<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阔落煮酒</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyin.top/"/>
  <updated>2020-07-10T06:23:36.945Z</updated>
  <id>http://chenyin.top/</id>
  
  <author>
    <name>Barwe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++标准库-fstream文件流</title>
    <link href="http://chenyin.top/Cpp/20200710-111f.html"/>
    <id>http://chenyin.top/Cpp/20200710-111f.html</id>
    <published>2020-07-10T06:12:45.000Z</published>
    <updated>2020-07-10T06:23:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>C++标准库 <strong>fstream</strong> 用来读写文件。</p><a id="more"></a><h1 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h1><p>C++标准库头文件 <code>#include &lt;fstream&gt;</code> 中包含了三个重要的文件流类：</p><ul><li><strong>fstream</strong>：既可以读文件，也可以写文件</li><li><strong>ifstream</strong>：只能读文件</li><li><strong>ofstream</strong>：只能写文件</li></ul><p>文件读写的基本步骤是：</p><ol><li>初始化文件流对象：声明，例如 <code>fstream f</code> 声明了读写文件流对象f</li><li>打开文件：调用 <strong>open</strong> 方法，例如 <code>f.open(&quot;xxx.txt&quot;, ios::in)</code></li><li>读/写文件：读取内容或者写入内容</li><li>关闭文件：调用 <strong>close</strong> 方法，<code>f.close()</code></li></ol><h2 id="声明文件流对象"><a href="#声明文件流对象" class="headerlink" title="声明文件流对象"></a>声明文件流对象</h2><p>如果只是对文件进行 <strong>读</strong> 操作，请使用 <strong>ifstream</strong>；如果只是对文件进行写操作，请使用 <strong>ofstream</strong>。语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::ifstream in;</span><br><span class="line"><span class="built_in">std</span>::ofstream out;</span><br><span class="line"><span class="built_in">std</span>::fstream in_out;</span><br></pre></td></tr></table></figure><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><h3 id="open-方法打开"><a href="#open-方法打开" class="headerlink" title="open 方法打开"></a>open 方法打开</h3><p><strong>open</strong> 是三个文件流类的成员方法，可被文件流对象调用以打开文件，实现文件流对象与具体文件的绑定。</p><p><strong>open</strong> 方法接收两个参数：文件路径，文件操纵模式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in.open(<span class="string">"xxx.txt"</span>, <span class="built_in">std</span>::ios::in);</span><br><span class="line">out.open(<span class="string">"yyy.txt"</span>, <span class="built_in">std</span>::ios::app);</span><br><span class="line">in_out.open(<span class="string">"zzz.txt"</span>, <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::out)</span><br></pre></td></tr></table></figure><p>读文件流对象的模式默认为 <code>ios::in</code>，可以缺省。</p><p><strong>ios标准库</strong> 内置了日常所需的文件操纵模式，包括：</p><ul><li><code>ios::in</code> 打开文件用于读取</li><li><code>ios::out</code> 打开文件用于写入</li><li><code>ios::ate</code> 文件打开后定位到末尾</li><li><code>ios::app</code> 追加模式，所有写入添加到文件末尾</li><li><code>ios::binary</code> 二进制方式</li><li><code>ios::trunc</code> 如果文件已存在则先删除文件</li></ul><p>常见的文件操纵模式组合：</p><ul><li>读取文本文件：<code>ios::in</code></li><li>读取二进制文件：<code>ios::in | ios::binary</code></li><li>写入为文本文件，文件存在时覆盖写入：<code>ios::out</code></li><li>写入为文本文件，文件存在时追加写入：<code>ios::out | ios::ate</code> 或者 <code>ios::app</code></li><li>写入为文本文件，文件存在时先删除再写入：<code>ios::out | ios::trunc</code></li><li>写入为二进制文件，文件存在时覆盖写入：<code>ios::out | ios::binary</code></li></ul><p>关于写入文件的三种情形，假设我有一个文件内容如下，想要写入的内容是 Fuzhou 和 Guangzhou：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nanjing</span><br><span class="line">Shanghai</span><br><span class="line">Shenzhen</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">文件写入方式</th><th>结果</th></tr></thead><tbody><tr><td style="text-align:center">覆盖式</td><td><u>Fuzhou</u><br><u>Guangzhou</u><br>Shenzhen</td></tr><tr><td style="text-align:center">追加式</td><td>Nanjing<br>Shanghai<br>Shenzhen<br><u>Fuzhou</u><br><u>Guangzhou</u></td></tr><tr><td style="text-align:center">删除式</td><td><u>Fuzhou</u><br><u>Guangzhou</u></td></tr></tbody></table><h3 id="在声明时打开"><a href="#在声明时打开" class="headerlink" title="在声明时打开"></a>在声明时打开</h3><p>除了使用 <strong>open</strong> 方法，在声明文件流对象时可以直接打开文件，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"xxx.txt"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"yyy.txt"</span>, <span class="built_in">std</span>::ios::out)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="检查文件打开是否成功"><a href="#检查文件打开是否成功" class="headerlink" title="检查文件打开是否成功"></a>检查文件打开是否成功</h3><p>通过 <code>if(in_out)</code> 来判断文件是否打开成功。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>在某些编程语言中，文件流对象打开文件后又叫做 <strong>文件句柄</strong>。文件句柄本身不存储文件的内容，但我们可以从文件句柄访问整个文件的内容或者写入内容到文件。文件句柄相当于程序和文件之间的一个通道。</p><p>文件句柄的读取方法很多。</p><h3 id="逐个单词读取至string变量"><a href="#逐个单词读取至string变量" class="headerlink" title="逐个单词读取至string变量"></a>逐个单词读取至string变量</h3><p>流运算符的一个特点就是从空白符后的第一个非空白字符开始，读取到下一个空白符为止。所以只能一个单词一个单词的提取。</p><p>常见的空白符有空格、制表符、换行符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"data.txt"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (in) <span class="keyword">while</span> (in &gt;&gt; x) vec.push_back(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : vec) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逐行读取至string变量"><a href="#逐行读取至string变量" class="headerlink" title="逐行读取至string变量"></a>逐行读取至string变量</h3><p><strong>getline</strong> 函数可以按行（换行符分割）读取文件，并将每行的内容保存在字符串类型的变量var里面：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (getline(文件句柄fh, 迭代变量var)) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>🐖：var中的行字符串不包含末尾的换行符。</p><p><strong>这个getline函数从哪里来的？</strong> getline函数用于从 <strong>ifstream</strong> 中按行读取文件内容，<strong>ifstream</strong> 派生自 <strong>istream</strong>，<code>&lt;istream&gt;</code> 头文件中就定义了这个 <strong>getline</strong> 函数。</p><h3 id="逐行读取至char数组"><a href="#逐行读取至char数组" class="headerlink" title="逐行读取至char数组"></a>逐行读取至char数组</h3><p>此外，文件输入流本身也提供了一个 <strong>getline</strong> 方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LINE_LENGTH = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> var[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (in.getline(var, LINE_LENGTH)) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>这个 getline 方法就显得笨重了许多，我们需要先预设一个 LINE_LENGTH，这个值要比文件最长的那一行的长度还要长（假设最长行的长度为99，则这个值最小应该设置为100）。然后我们需要声明一个迭代变量var，它是一个长为 LINE_LENGTH 的 <strong>字符数组</strong>。</p><p>getline 方法的第一个参数是迭代变量，第二个参数是 LINE_LENGTH。</p><p>所以这个 getline 方法实际上是将文件的每一行读进了一个等长的字符数组里面。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="流运算符"><a href="#流运算符" class="headerlink" title="流运算符"></a>流运算符</h3><p>流运算符可以用于写入文本文件，用于二进制文件可能会产生错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"output.txt"</span>)</span></span>;</span><br><span class="line">out &lt;&lt; setw(<span class="number">20</span>) &lt;&lt; setfill(<span class="string">'#'</span>) &lt;&lt; setiosflags(ios::left) &lt;&lt; <span class="string">"name: "</span> &lt;&lt; <span class="string">"barwe"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>尽管程序结束时会自动关闭打开的文件，但为了安全起见，建议手动关闭。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">in_out.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++标准库 &lt;strong&gt;fstream&lt;/strong&gt; 用来读写文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://chenyin.top/categories/Cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>C++标准库索引</title>
    <link href="http://chenyin.top/Cpp/20200710-e3c6.html"/>
    <id>http://chenyin.top/Cpp/20200710-e3c6.html</id>
    <published>2020-07-10T01:27:17.000Z</published>
    <updated>2020-07-10T06:16:37.796Z</updated>
    
    <content type="html"><![CDATA[<p>C++标准库总共51个头文件，按照内容可分为10个类，按照来源可分为3个类。</p><a id="more"></a><table><thead><tr><th style="text-align:center">51</th><th style="text-align:left">C++ （20）</th><th style="text-align:left">C (18)</th><th style="text-align:left">STL (13)</th></tr></thead><tbody><tr><td style="text-align:center">语言支持 (11)</td><td style="text-align:left">limits：C++数值类型特性<br>new：动态内存管理<br>typeinfo：运行时内存信息<br>exception：异常处理</td><td style="text-align:left">cstddef：C标准定义<br>climits：整型大小<br>cfloat：浮点型特性<br>cstdlib：C标准实用工具<br>cstdarg：可变参数<br>csetjmp：非局部跳转<br>csignal：C中断处理</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">输入输出 (10)</td><td style="text-align:left">iostream：标准输入输出流<br>istream：标准输入流<br>ostream：标准输出流<br>sstream：字符串流<br><a href="http://chenyin.top/Cpp/20200710-111f.html">fstream</a>：文件流<br><a href="https://baike.baidu.com/item/iomanip/3319954" target="_blank" rel="noopener">iomanip</a>：输入输出操纵器<br>ios：iostream的基类<br>iosfwd：输入输出前向声明<br>streambuf：流缓存</td><td style="text-align:left">cstdio：C标准输入输出</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">诊断功能 (3)</td><td style="text-align:left">stdexcept：异常类</td><td style="text-align:left">cassert：C断言验证<br>cerrno：C出错码</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">通用工具(4)</td><td style="text-align:left">-</td><td style="text-align:left">ctime：C时间日期</td><td style="text-align:left">utility：实用元件<br>functional：函数对象<br>memory：内存管理器</td></tr><tr><td style="text-align:center">字符串 (6)</td><td style="text-align:left">string：字符串类<br>strstream：C字符串流类</td><td style="text-align:left">cstring：C字符串<br>cctype：单字节字符类型<br>cwctype：多字节字符类型<br>cwchar：扩展多字节宽字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">容器 (8)</td><td style="text-align:left">bitset：位集</td><td style="text-align:left">-</td><td style="text-align:left"><a href="https://chenyin-rss.online" target="_blank" rel="noopener">vector</a>：向量<br>list：列表<br>queue：队列<br>deque：双队<br>stack：堆栈<br>map：映射<br>set：集合</td></tr><tr><td style="text-align:center">迭代器 (1)</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">iterator：迭代器</td></tr><tr><td style="text-align:center">算法 (2)</td><td style="text-align:left">-</td><td style="text-align:left">cios646：ISO646字符集替换</td><td style="text-align:left">algorithm：算法</td></tr><tr><td style="text-align:center">数值操作 (4)</td><td style="text-align:left">complex：复数<br>valarray：数值矢量</td><td style="text-align:left">cmath：C数学库</td><td style="text-align:left">numeric：数学运算</td></tr><tr><td style="text-align:center">本地化 (2)</td><td style="text-align:left">locale：本地化</td><td style="text-align:left">clocale：C本地化</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++标准库总共51个头文件，按照内容可分为10个类，按照来源可分为3个类。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://chenyin.top/categories/Cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>OD的基本使用2 - demo修改</title>
    <link href="http://chenyin.top/cracking/20191130-9c79.html"/>
    <id>http://chenyin.top/cracking/20191130-9c79.html</id>
    <published>2019-11-30T09:04:21.000Z</published>
    <updated>2020-07-10T01:46:27.888Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A00.jpg" alt="A00"></p><a id="more"></a><p>ODBG110: <a href="https://pan.baidu.com/s/1VklVhE7wH7qrEW2OOLElqw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VklVhE7wH7qrEW2OOLElqw</a> 提取码：uuhg<br>ODBG110BasicPlugins:  <a href="https://pan.baidu.com/s/1QG0ealpvKTTtjd26U9himQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1QG0ealpvKTTtjd26U9himQ</a> 提取码：6fym<br>ODBG Very More Plugins: <a href="https://pan.baidu.com/s/1VQoodK3ArkiGYzJazUToiw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VQoodK3ArkiGYzJazUToiw</a> 提取码：daoo<br>[教程]使用OllyDbg从零开始Cracking: <a href="https://pan.baidu.com/s/1l094huv-bQvka-QOhgNhhg" target="_blank" rel="noopener">https://pan.baidu.com/s/1l094huv-bQvka-QOhgNhhg</a> 提取码：65jv</p><h1 id="了解软件"><a href="#了解软件" class="headerlink" title="了解软件"></a>了解软件</h1><p>我们直接运行打开CRACKME.EXE文件进行注册，随机输入用户名和注册码，点击注册，软件报错，序列号不对，好吧，这才是正常的逻辑。现在尝试着修改软件，使我们输入任意的用户名和序列号，均通过验证。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A01.jpg" alt="A01"></p><p>程序弹出验证错误的消息框，调用的是系统的 <code>MessageBoxA</code> 方法，其它软件应该也是类似的吧。</p><p>消息框的标题是“No luck!”，文本是“No luck there, mate!”。</p><p>以上这是我们已知的重要信息，也是我们破解的关键地方。</p><h1 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h1><p>使用OD打开CRACKME.EXE，界面如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A02.jpg" alt="A02"></p><p>我们通过插件Command Bar（位于OD最下方）对消息弹窗函数 <code>MessageBoxA()</code> 加断点，断点的位置位于该函数的第一个指令处，这意味着如果程序遇到调用该函数的指令，会在跳转到该函数所在的内存区域后停留在第一个指令处。</p><p>加断点的命令为：<code>bp MessageBoxA</code></p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A03.jpg" alt="A03"></p><p>加断点后点击B按钮查看断点标记情况，可以看到背景自动变灰的哪一行就是我们上一步加断点的地方。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A04.jpg" alt="A04"></p><p>我们可以看出，<code>MessageBoxA()</code> 函数的一些基本信息：</p><ul><li>该函数存储的位置为 750F8700 到某个未知位置</li><li>该函数的代码位于 USER32 模块中</li><li>该函数的第一个指令是 <code>MOV EDI, EDI</code></li></ul><p>我们在该条目上右键选择 Follw in Disassembler 或者直接按回车键进入该函数存储的指令区域。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A05.jpg" alt="A05"></p><p>如下图，指令区域跳转至 750F8700 处并自动高亮显示。第一列地址处红色高亮，说明此处添加了断点。</p><p>我们往下数直到第一个 <strong>RETN</strong> 出现的区域为 <code>MessageBoxA()</code> 函数的内存区域。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A06.jpg" alt="A06"></p><p>如果我们此时执行程序，程序会运行到端点处暂停，因为没有实际执行 <code>MessageBoxA()</code> 函数，所以不会有注册成功或者注册失败的消息弹出。</p><p>第一次按下 F9 会跳转到 00401000，这个位置是程序执行的入口。</p><p>再次按下 F9 运行程序。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A07.jpg" alt="A07"></p><p>此时弹出了一个笑脸窗口，这个就是模拟软件的主窗口。</p><p>同时我们观察 EIP = 777BA8FC，说明程序并未执行到我们设置的断点（750F8700）处，为什么呢？因为执行 <code>MessageBoxA()</code> 函数的前提是进行注册，而注册是用户手动完成的。因此我们需要在模拟软件中手动注册。</p><p>点击 Help 按钮选择注册，这里我们特定随机输入用户名“123qwe”，密码为“asdzxc”，点击 OK。</p><p>接着OD中程序暂停在我们设置的断点上，注意此时 EIP = 750F8700。<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A08.jpg" alt="A08"></p><p>观察堆栈的信息：</p><ul><li>当前栈顶位置为 0019FDB8，存储在寄存器 ESP 中</li><li>当前子程序执行完之后会跳回到 004013C1</li><li>程序是从 004013BC 跳转到当前断点位置的，004013BC 处进行了 <code>MessageBoxA()</code> 函数的调用（CALL）</li><li>在调用 004013BC 处的 <code>MessageBoxA()</code> 函数之前，该函数的参数也被压入栈中。调用该函数提供了四个参数，分别是 Style, Title, Text, hOwner。观察它们的值可以发现，调用这个函数将会告诉用户注册失败。</li></ul><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A09.jpg" alt="A09"></p><p>我们在栈顶位置右键选择 Follw in Disassembler 或者直接按回车打开 004013BC 处调用 <code>MessageBoxA()</code> 函数的位置<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A10.jpg" alt="A10"></p><p>指令区域显示的并不是 004013BC 处调用 <code>MessageBoxA()</code> 函数的位置，而是调用结束后跳转继续执行的位置 004013C1</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A11.jpg" alt="A11"></p><p>滑动滚轮或者拉动滑条，观察 004013C1 上面的几行命令</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A12.jpg" alt="A12"></p><p>004013C1 处调用了 <code>MessageBoxA()</code> 函数，该函数需要的参数在 004013AD ~ 004013B9。</p><p>可以预见的是，程序会在这里调用 <code>MessageBoxA()</code> 函数，对我们输入的注册码做出回应，并且告诉我们很遗憾。</p><p>那么是什么导致程序会选择在这里调用 <code>MessageBoxA()</code> 函数呢？</p><p>因为指令都是按顺序执行的，我们去 004013C1 上面找寻答案。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A13.jpg" alt="A13"></p><p>因为 004013AD ~ 004013BC 是在定义 <code>MessageBoxA()</code> 函数的参数和调用，我们点击它们上面的 <code>POP ESI</code>，哎，我们在下面的信息栏中发现了一条重要信息：“Jump from 0040138B”，说明 <code>POP ESI</code> 指令从 0040138B 跳转而来，并且之后继续执行了 <code>MessageBoxA()</code> 函数。</p><p>我们跳转到 0040138B 位置，查看附近的指令：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A14.jpg" alt="A14"></p><p>0040138B 是一条 <strong>JB</strong> 跳转指令，而且在它的上面有这么一条 <code>CMP AL, 41</code> 指令。这表示：当前仅当寄存器 AL 的值 <strong>小于</strong> 41 时才会跳转到 004013AC 处执行 <code>POP ESI</code> 和调用 <code>MessageBoxA()</code> 函数。</p><p>那如果不管 <code>CMP AL, 41</code> 的结果如何，下面都不进行跳转是不是就不会弹出让人遗憾的消息框了？</p><p>这里我们将 <code>CMP AL, 41</code> 篡改成 <code>CMP AL, AL</code> ，这使得 <strong>JB</strong> 跳转永远不会执行。</p><p>双击 <code>CMP AL, 41</code> 指令即可修改。修改后结果如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A15.jpg" alt="A15"></p><p>第二列变为红色字体，表示改行经过修改；指令也已经发生变化。</p><p>按下 F9 执行程序，弹出消息框：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A16.jpg" alt="A16"></p><p>呀，还是注册不通过~</p><p>按下“确定”按钮，OD中程序中又暂停在了 750F8700 的位置，是不是有点眼熟这个位置？</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A17.jpg" alt="A17"></p><p>唯一不同的在这个地方：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A18.jpg" alt="A18"></p><p>这表示有两个不同的地方调用了 <code>MessageBoxA()</code> 函数，一个是 004013BC，一个是 00401378。</p><p>前者我们已经解决了，后者是新出现的。</p><p>这表示有两个甚至多个验证方法检查我们的注册信息，而且明显 004013BC 处的检查排在 00401378 前面。</p><p>下面跳转到 00401378 附近：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A19.jpg" alt="A19"></p><p>我们逐级向上检查，发现在 00401362 的 <code>PUSH 0</code> 处出现了 “Local call from 00401245”，接着调用了另一个USER32库中的函数 <code>MessageBeep</code>，然后就调用了即将给我们抛出遗憾信息的 <code>MessageBoxA</code> 函数。</p><p>我们跳转到 00401245：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A20.jpg" alt="A20"></p><p>这里首先比较了 EAX 和 EBX 的值，然后根据比较结果进行跳转：</p><ul><li>如果相等，<strong>JE</strong> 指令被执行，跳转到 0040124C 执行 <code>CALL ~.0040134D</code></li><li>如果不等，<strong>JE</strong> 指令不执行，直接执行 <code>CALL ~.00401362</code></li><li>不管怎样，最终都会跳转到 004011E6</li></ul><p>我们知道，如果 EAX 和 EBX 的值如果不相等，程序就会跳转到 00401362 继续执行，从而调用 <code>MessageBoxA</code> 函数使用户感到遗憾。那么如果 EAX 和 EBX 的值如果相等会怎么样？0040134D 又是什么东西？我们定位到 0040134D 瞅一下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A21.jpg" alt="A21"></p><p>我们可以看到，0040134D ~ 0040135C 区域依然在单纯地调用 <code>MessageBoxA</code> 函数，只是函数参数变得善良了，也就是说，这块区域只有在我们的注册信息有效的前提下才会被调用。而下面的 00401362 ~ 00401378 区域恰好是我们我们注册信息不通过会被执行的指令。</p><p>回到 00401245：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A20.jpg" alt="A20"></p><p>如果我们使 00401241 处的 <strong>CMP</strong> 结果恒成立会怎么样？例如 <code>CMP EAX, EAX</code>。</p><p>那么此时，不管我们怎么输注册信息，都只会跳转 0040134D 执行注册成功的信息。</p><p>修改后的结果如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A22.jpg" alt="A22"></p><p>这个模拟程序对注册信息进行了两次验证，我们也进行了两次修改，从而屏蔽掉了有效性检查。</p><h1 id="保存成果"><a href="#保存成果" class="headerlink" title="保存成果"></a>保存成果</h1><p>修改完成后在指令窗口的任意位置右键选择 Copy to executable 中的 All modifications：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A23.jpg" alt="A23"></p><p>选择 Copy all:</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A24.jpg" alt="A24"></p><p>弹出了一个新的指令集页面：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A25.jpg" alt="A25"></p><p>该页面内任意位置右键选择 Save file：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A26.jpg" alt="A26"></p><p>重命名例如 CRACKME2.EXE，保存即可<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A27.jpg" alt="A27"></p><p>关闭OD，验证破解成果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A00.jpg&quot; alt=&quot;A00&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cracking" scheme="http://chenyin.top/categories/cracking/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编 - 标志位和跳转</title>
    <link href="http://chenyin.top/cracking/20191130-ddcd.html"/>
    <id>http://chenyin.top/cracking/20191130-ddcd.html</id>
    <published>2019-11-29T17:08:03.000Z</published>
    <updated>2019-11-29T17:30:04.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/19.jpg" alt=""></p><p><strong>跳转指令</strong> 大部分是基于 <strong>标志位</strong> 的值进行的，也有基于两个数的比较进行的。</p><a id="more"></a><h1 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h1><h2 id="进位标志C"><a href="#进位标志C" class="headerlink" title="进位标志C"></a>进位标志C</h2><p><strong>进位/借位标志CF</strong>（Carry Flag）：当运算结果的<strong>最高有效位</strong>出现<strong>进位</strong>或者<strong>借位</strong>的时候，进位/借位标志被设为1，否则为0。</p><p>我们考虑<code>BB+6A=125</code>，我们说它出现了<strong>进位</strong>，我们这么认为是因为我们假设了操作数的有效位为2，而计算结果的有效位为3，即两个最高只有十位的数相加得到了最高位数为百位的结果，按照这种理解<code>49+6D=B6</code>没有发生进位。相应的，<code>10-9=7</code>发生了<strong>借位</strong>，因为操作数最高位为十位，计算结果最高位位各位。但是，在OD中，每个数用4个字节（1字节=8bits）表示，取值范围从 00 00 00 00 ~ FF FF FF FF，操作数最高位为第8位，在这种情况下所谓的发生进位的<code>BB+6A</code>完整的写法是<code>00 00 00 BB + 00 00 00 6A = 00 00 01 25</code>，此时最高位（第8位）并未发生进位。另一个例子,<code>FF FF FF FF + 00 00 00 01</code>就会在第9位产生1，即发生了<strong>进位</strong>，这已经超过了寄存器允许的最大值，去除溢出的部分，计算结果为<code>00 00 00 00</code>。<strong>借位</strong>类似，例如<code>00 00 00 02 - 00 00 00 03 = FF FF FF FF</code>。</p><h2 id="奇偶标志P"><a href="#奇偶标志P" class="headerlink" title="奇偶标志P"></a>奇偶标志P</h2><p><strong>奇偶标志位PF</strong>（Parity Flag）：当运算结果<strong>最低字节</strong>的二进制数中1的个数为偶数时PF=1，为奇数时PF=0。</p><p>为什么是<strong>最低字节</strong>？没太搞懂，在OD中：</p><ul><li><code>ADD 8930, 0</code>的结果显示P=1。8930H的二进制为1000 1001 0011 0000B，这个数中最低字节有两个1，总共五个1</li><li><code>ADD 8931, 0</code>的结果显示P=0。尽管总共六个1，但是最低字节有3个1</li></ul><h2 id="零标志Z"><a href="#零标志Z" class="headerlink" title="零标志Z"></a>零标志Z</h2><p><strong>零标志ZF</strong>（Zero Flag）：当计算结果为0时Z=1，否为为0。<br>零标志常用来判断两个数是否相等。</p><h2 id="符号标志S"><a href="#符号标志S" class="headerlink" title="符号标志S"></a>符号标志S</h2><p><strong>符号标志SF</strong>（Sign Flag）：我们通常说的<strong>有符号数</strong>指的是负数。当计算结果为负数时S=1，否则S=0。</p><p>四字节数的取值范围是 00 00 00 00 ~ FF FF FF FF，但是实际的取值范围还取决于该四字节数表示的<strong>有符号数</strong>还是<strong>无符号数</strong>：</p><ul><li>如果是<strong>无符号数</strong>：四字节数的表面值就等于实际值；</li><li>如果是<strong>有符号数</strong>：在有限的取值范围下，为了保证正数和负数数目相同，规定 00 00 00 00 ~ 7F FF FF FF 表示相当于十进制的 0 ~ 21,4748,3647，而 80 00 00 00 ~ FF FF FF FF 表示相当于十进制中的 -21,4748,3648 ~ -1。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/18.jpg" alt=""></li></ul><h2 id="溢出标志O"><a href="#溢出标志O" class="headerlink" title="溢出标志O"></a>溢出标志O</h2><p><strong>溢出标志O</strong>（Overflow Flag）：只对<strong>有符号数</strong>的运算，在范围正中间附近（即7F FF FF FF ~ 80 00 00 00）时，计算结果的符号发生改变，则称之为<strong>溢出</strong>，此时O=1。计算结果的期望值与实际值不相等，是的计算结果发生错误。</p><p>例如 <code>7F FF FF FF + 1 = 80 00 00 00</code> 会形成<strong>溢出</strong>。</p><p>换句话说，在OD中，如果计算结果的值超出了[-80000000H, 7FFFFFFFH]的范围就属于<strong>溢出</strong>。</p><h2 id="其它标志位-A-T-D"><a href="#其它标志位-A-T-D" class="headerlink" title="其它标志位: A T D"></a>其它标志位: A T D</h2><h1 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h1><p>洒家总结了以下常见的<strong>跳转指令</strong>，大致可以分为4类：</p><ul><li>检查<strong>标志位</strong>进行跳转</li><li>检查<strong>两个操作数</strong>进行跳转</li><li>比较<strong>两个无符号数</strong>进行跳转</li><li>比较<strong>两个有符号数</strong>进行跳转</li></ul><h2 id="基于标志位"><a href="#基于标志位" class="headerlink" title="基于标志位"></a>基于标志位</h2><p>常见的标志为 <strong>C</strong>(进位/借位)，<strong>P</strong>(奇偶), <strong>Z</strong>(零), <strong>S</strong>(符号), <strong>O</strong>(溢出)，标志位的取值有0和1两种。</p><p>标志位值为1时使用<strong>J</strong>前缀进行跳转，值为0时使用<strong>JN</strong>前缀进行跳转。</p><table><thead><tr><th style="text-align:center">Description</th><th style="text-align:center">Flag</th><th style="text-align:center"><strong>J-</strong> 跳转1</th><th style="text-align:center"><strong>JN-</strong> 跳转0</th></tr></thead><tbody><tr><td style="text-align:center">低字节中1的数目为偶数？Parity？</td><td style="text-align:center"><strong>-P</strong></td><td style="text-align:center">JP</td><td style="text-align:center">JNP</td></tr><tr><td style="text-align:center">计算结果为0？Zero？</td><td style="text-align:center"><strong>-Z</strong></td><td style="text-align:center">JZ</td><td style="text-align:center">JNZ</td></tr><tr><td style="text-align:center">有符号？是负数？Zero？</td><td style="text-align:center"><strong>-S</strong></td><td style="text-align:center">JS</td><td style="text-align:center">JNS</td></tr><tr><td style="text-align:center">溢出？Overflow？</td><td style="text-align:center"><strong>-O</strong></td><td style="text-align:center">JO</td><td style="text-align:center">JNO</td></tr><tr><td style="text-align:center">进位/借位？Carry？</td><td style="text-align:center"><strong>-C</strong></td><td style="text-align:center">JC</td><td style="text-align:center">JNC</td></tr></tbody></table><h2 id="比较两个操作数"><a href="#比较两个操作数" class="headerlink" title="比较两个操作数"></a>比较两个操作数</h2><h3 id="比较两个普通操作数"><a href="#比较两个普通操作数" class="headerlink" title="比较两个普通操作数"></a>比较两个普通操作数</h3><p>比较两个操作数使用<code>CMP leftOp, rightOp</code>，比较结果保存至<strong>标志位</strong>中，然后使用<code>JE</code>或者<code>JNE</code>进行跳转。</p><p><strong>JE</strong>和<strong>JNE</strong>根据<strong>标志位Z</strong>的结果判定是否需要跳转。JE和JZ、JNE和JNE实际上是等效的，都是以标志位Z为依据进行跳转。它们的不同在于直观理解上：</p><ul><li>后缀<strong>E</strong>（Equal）倾向于判断两个操作数是否相同</li><li>后缀<strong>Z</strong>（Zero）倾向于检查标志位Z的值</li></ul><p>在不同的场景中选择不同的语法是个很好的习惯。</p><h3 id="检查寄存器值是否为0"><a href="#检查寄存器值是否为0" class="headerlink" title="检查寄存器值是否为0"></a>检查寄存器值是否为0</h3><p>检查寄存器的值是否为0，当然可以使用CMP，如<code>CMP EAX, 0</code>，但是更一般的，我们为寄存器设计了专用的指令。</p><p>指令结构为：<code>J</code> + <code>[寄存器名称]</code> + <code>Z</code> (表示Zero)，例如：</p><ul><li><code>JECXZ</code> 表示当ECX=0时跳转</li><li><code>JCXZ</code> 表示当CX=0时跳转</li></ul><p>其它的寄存器检查类似。</p><h2 id="比较两个无符号数"><a href="#比较两个无符号数" class="headerlink" title="比较两个无符号数"></a>比较两个无符号数</h2><p>跳转前缀只使用 <strong>J</strong>，跳转后缀使用 <strong>B/E/A</strong> 系统 。</p><p>当第一个操作数 <strong>小于</strong> 第二个操作数时，记为 <strong>B=1</strong>，意为 Below。<br>当第一个操作数 <strong>等于</strong> 第二个操作数时，记为 <strong>E=1</strong>，意为 Equal；<br>当第一个操作数 <strong>大于</strong> 第二个操作数时，记为 <strong>A=1</strong>，意为 Above。<br>当然上述记法并不代表存在这样一个标志位B，E，A。</p><p>假设第一个操作数为<code>left</code>，第二个操作数为<code>right</code>，则</p><table><thead><tr><th style="text-align:center">跳转条件</th><th style="text-align:center">正面描述 指令</th><th style="text-align:center">等价的反面描述 指令 （可以但没必要）</th></tr></thead><tbody><tr><td style="text-align:center">$\text{left} &lt; \text{right}$</td><td style="text-align:center">小于 <strong>JB</strong></td><td style="text-align:center">不大于等于 <strong>JNAE</strong></td></tr><tr><td style="text-align:center">$\text{left} \le \text{right}$</td><td style="text-align:center">小于等于 <strong>JBE</strong></td><td style="text-align:center">不大于 <strong>JNA</strong></td></tr><tr><td style="text-align:center">$\text{left} = \text{right}$</td><td style="text-align:center">等于 <strong>JE</strong></td><td style="text-align:center">既不大于也不小于 JNAB （这个指令不存在）</td></tr><tr><td style="text-align:center">$\text{left} &gt; \text{right}$</td><td style="text-align:center">大于 <strong>JA</strong></td><td style="text-align:center">不小于等于 <strong>JNBE</strong></td></tr><tr><td style="text-align:center">$\text{left} \ge \text{right}$</td><td style="text-align:center">大于等于 <strong>JAE</strong></td><td style="text-align:center">不小于 <strong>JNB</strong></td></tr></tbody></table><h2 id="比较两个有符号数"><a href="#比较两个有符号数" class="headerlink" title="比较两个有符号数"></a>比较两个有符号数</h2><p>与无符号数比较类似，只是后缀采用 <strong>L/E/G</strong> 系统，分别代表 Less / Equal / Greater。</p><table><thead><tr><th style="text-align:center">跳转条件</th><th style="text-align:center">正面描述 指令</th><th style="text-align:center">等价的反面描述 指令 （可以但没必要）</th></tr></thead><tbody><tr><td style="text-align:center">$\text{left} &lt; \text{right}$</td><td style="text-align:center">小于 <strong>JL</strong></td><td style="text-align:center">不大于等于 <strong>JNGE</strong></td></tr><tr><td style="text-align:center">$\text{left} \le \text{right}$</td><td style="text-align:center">小于等于 <strong>JLE</strong></td><td style="text-align:center">不大于 <strong>JNG</strong></td></tr><tr><td style="text-align:center">$\text{left} = \text{right}$</td><td style="text-align:center">等于 <strong>JE</strong></td><td style="text-align:center">既不大于也不小于 <strong>JNGL</strong> （这个指令不存在）</td></tr><tr><td style="text-align:center">$\text{left} &gt; \text{right}$</td><td style="text-align:center">大于 <strong>JG</strong></td><td style="text-align:center">不小于等于 <strong>JNLE</strong></td></tr><tr><td style="text-align:center">$\text{left} \ge \text{right}$</td><td style="text-align:center">大于等于 <strong>JGE</strong></td><td style="text-align:center">不小于 <strong>JNL</strong></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/19.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳转指令&lt;/strong&gt; 大部分是基于 &lt;strong&gt;标志位&lt;/strong&gt; 的值进行的，也有基于两个数的比较进行的。&lt;/p&gt;
    
    </summary>
    
      <category term="cracking" scheme="http://chenyin.top/categories/cracking/"/>
    
    
      <category term="汇编" scheme="http://chenyin.top/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>请求库2 - requests</title>
    <link href="http://chenyin.top/spider/20191128-908f.html"/>
    <id>http://chenyin.top/spider/20191128-908f.html</id>
    <published>2019-11-28T03:31:26.000Z</published>
    <updated>2019-11-28T06:14:57.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests.jpg" alt=""></p><p><strong>urllib</strong>是基本库，功能实现尚且比较复杂。<strong>requests</strong>库更加友好、高效。</p><p><strong>requests</strong>能更加简单的实现Cookies、登录验证和代理设置等额外操作。</p><a id="more"></a><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="基本的GET请求"><a href="#基本的GET请求" class="headerlink" title="基本的GET请求"></a>基本的GET请求</h2><h3 id="实例1：抓取知乎专题的标题"><a href="#实例1：抓取知乎专题的标题" class="headerlink" title="实例1：抓取知乎专题的标题"></a>实例1：抓取知乎专题的标题</h3><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests1.jpg" alt=""></p><p><strong>文本内容</strong>通过<code>response.text</code>属性查询。</p><h4 id="URL参数"><a href="#URL参数" class="headerlink" title="URL参数"></a>URL参数</h4><p>如果get访问的服务器需要参数需要在URL中加入参数，常见的方式有两种：</p><ol><li>直接构建带参数的URL字符串，通过<strong>问号</strong>分隔，例如 <code>http://xxx.com/?key=value</code></li><li>通过<strong>param参数</strong>传递URL参数，该参数接受一个<strong>字典</strong>，如 <code>response = requests.get(..., param = {&#39;k&#39;: &#39;v&#39;})</code><ol><li>可以是简单的字典，如 <code>{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;}</code>构造出的参数字符串为 <code>?key1=value1&amp;key2=value2</code></li><li>可以有多个值，如 <code>{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: [&quot;key21&quot;, &quot;key22&quot;]}</code>构造出的参数字符串为<code>?key1=value1&amp;key2=value21&amp;key2=value22</code> </li><li>可以是空值，此时会忽略这个参数，如 <code>{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: None}</code>构造出的参数字符串为 <code>?key1=value1</code></li></ol></li></ol><h3 id="实例2：抓取json数据"><a href="#实例2：抓取json数据" class="headerlink" title="实例2：抓取json数据"></a>实例2：抓取json数据</h3><p>json数据本质上还是文本数据，我们抓取后需要转化为字典/json格式，为避免这一转化步骤，可直接通过<code>response.json()</code>方法获取json字典</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests2.jpg" alt=""></p><h3 id="实例3：抓取GitHub站点图标"><a href="#实例3：抓取GitHub站点图标" class="headerlink" title="实例3：抓取GitHub站点图标"></a>实例3：抓取GitHub站点图标</h3><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests3.jpg" alt=""></p><p><strong>二进制内容</strong>通过<code>response.content</code>获取，直接打印bytes类型的字符串是没有视觉意义的，因此需要保存到本地。注意文件打开格式为<code>wb</code>。</p><p>图片、视频、音频等二进制多媒体文件都用这种方式获取。</p><h2 id="基本的POST请求"><a href="#基本的POST请求" class="headerlink" title="基本的POST请求"></a>基本的POST请求</h2><p>POST请求需要提交<strong>表单</strong>（form），表单数据在python中以<strong>字典</strong>表示，通过<code>requests.post()</code>函数的<code>data</code>参数传入。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests4.jpg" alt=""></p><p>在<strong>响应</strong>结果中我们可以看到<strong>请求</strong>的数据存储在<code>form</code>字段中。</p><h2 id="响应（response）"><a href="#响应（response）" class="headerlink" title="响应（response）"></a>响应（response）</h2><p>我们通过<code>requests.get()</code>或者<code>requests.post()</code>向服务器发送一个<strong>请求</strong>（request），服务器给我们一个返回结果称之为<strong>响应</strong>（response）。</p><p><strong>响应</strong>结果中包含了许多的信息，主要如下：<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests5.jpg" alt=""></p><ul><li><strong>text</strong>：str类型的请求内容</li><li><strong>json()</strong> ：如果返回内容本质上是json数据，直接调用这个</li><li><strong>content</strong>：bytes类型的请求内容</li><li><strong>cookies</strong>：类型为<code>requests.cookies.RequestsCookieJar</code></li><li><strong>headers</strong>：字典，<code>requests.structures.CaseInsensitiveDict</code>类型</li><li><strong>ok</strong>：bool类型，请求是否正常返回结果</li><li><strong>status_code</strong>：int类型，状态码，正常为200</li><li><strong>encoding</strong>：编码方式，常见的如utf-8, gbk</li><li><strong>url</strong>：请求的url</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>requests内置了一个状态码查询对象<code>requests.codes</code></p><p>例如正常返回200对应的状态码对象为<code>requests.codes.ok</code></p><p>下面是常见的<strong>状态码</strong>和对应的<strong>状态码对象</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信息性状态码</span></span><br><span class="line"><span class="number">100</span>: (<span class="string">'continue'</span>,),</span><br><span class="line"><span class="number">101</span>: (<span class="string">'switching_protocols'</span>,),</span><br><span class="line"><span class="number">102</span>: (<span class="string">'processing'</span>,),</span><br><span class="line"><span class="number">103</span>: (<span class="string">'checkpoint'</span>,),</span><br><span class="line"><span class="number">122</span>: (<span class="string">'uri_too_long'</span>, <span class="string">'request_uri_too_long'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功状态码</span></span><br><span class="line"><span class="number">200</span>: (<span class="string">'ok'</span>, <span class="string">'okay'</span>, <span class="string">'all_ok'</span>, <span class="string">'all_okay'</span>, <span class="string">'all_good'</span>, <span class="string">'\\o/'</span>, <span class="string">'✓'</span>),</span><br><span class="line"><span class="number">201</span>: (<span class="string">'created'</span>,),</span><br><span class="line"><span class="number">202</span>: (<span class="string">'accepted'</span>,),</span><br><span class="line"><span class="number">203</span>: (<span class="string">'non_authoritative_info'</span>, <span class="string">'non_authoritative_information'</span>),</span><br><span class="line"><span class="number">204</span>: (<span class="string">'no_content'</span>,),</span><br><span class="line"><span class="number">205</span>: (<span class="string">'reset_content'</span>, <span class="string">'reset'</span>),</span><br><span class="line"><span class="number">206</span>: (<span class="string">'partial_content'</span>, <span class="string">'partial'</span>),</span><br><span class="line"><span class="number">207</span>: (<span class="string">'multi_status'</span>, <span class="string">'multiple_status'</span>, <span class="string">'multi_stati'</span>, <span class="string">'multiple_stati'</span>),</span><br><span class="line"><span class="number">208</span>: (<span class="string">'already_reported'</span>,),</span><br><span class="line"><span class="number">226</span>: (<span class="string">'im_used'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向状态码</span></span><br><span class="line"><span class="number">300</span>: (<span class="string">'multiple_choices'</span>,),</span><br><span class="line"><span class="number">301</span>: (<span class="string">'moved_permanently'</span>, <span class="string">'moved'</span>, <span class="string">'\\o-'</span>),</span><br><span class="line"><span class="number">302</span>: (<span class="string">'found'</span>,),</span><br><span class="line"><span class="number">303</span>: (<span class="string">'see_other'</span>, <span class="string">'other'</span>),</span><br><span class="line"><span class="number">304</span>: (<span class="string">'not_modified'</span>,),</span><br><span class="line"><span class="number">305</span>: (<span class="string">'use_proxy'</span>,),</span><br><span class="line"><span class="number">306</span>: (<span class="string">'switch_proxy'</span>,),</span><br><span class="line"><span class="number">307</span>: (<span class="string">'temporary_redirect'</span>, <span class="string">'temporary_moved'</span>, <span class="string">'temporary'</span>),</span><br><span class="line"><span class="number">308</span>: (<span class="string">'permanent_redirect'</span>,</span><br><span class="line">      <span class="string">'resume_incomplete'</span>, <span class="string">'resume'</span>,), <span class="comment"># These 2 to be removed in 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端错误状态码</span></span><br><span class="line"><span class="number">400</span>: (<span class="string">'bad_request'</span>, <span class="string">'bad'</span>),</span><br><span class="line"><span class="number">401</span>: (<span class="string">'unauthorized'</span>,),</span><br><span class="line"><span class="number">402</span>: (<span class="string">'payment_required'</span>, <span class="string">'payment'</span>),</span><br><span class="line"><span class="number">403</span>: (<span class="string">'forbidden'</span>,),</span><br><span class="line"><span class="number">404</span>: (<span class="string">'not_found'</span>, <span class="string">'-o-'</span>),</span><br><span class="line"><span class="number">405</span>: (<span class="string">'method_not_allowed'</span>, <span class="string">'not_allowed'</span>),</span><br><span class="line"><span class="number">406</span>: (<span class="string">'not_acceptable'</span>,),</span><br><span class="line"><span class="number">407</span>: (<span class="string">'proxy_authentication_required'</span>, <span class="string">'proxy_auth'</span>, <span class="string">'proxy_authentication'</span>),</span><br><span class="line"><span class="number">408</span>: (<span class="string">'request_timeout'</span>, <span class="string">'timeout'</span>),</span><br><span class="line"><span class="number">409</span>: (<span class="string">'conflict'</span>,),</span><br><span class="line"><span class="number">410</span>: (<span class="string">'gone'</span>,),</span><br><span class="line"><span class="number">411</span>: (<span class="string">'length_required'</span>,),</span><br><span class="line"><span class="number">412</span>: (<span class="string">'precondition_failed'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">413</span>: (<span class="string">'request_entity_too_large'</span>,),</span><br><span class="line"><span class="number">414</span>: (<span class="string">'request_uri_too_large'</span>,),</span><br><span class="line"><span class="number">415</span>: (<span class="string">'unsupported_media_type'</span>, <span class="string">'unsupported_media'</span>, <span class="string">'media_type'</span>),</span><br><span class="line"><span class="number">416</span>: (<span class="string">'requested_range_not_satisfiable'</span>, <span class="string">'requested_range'</span>, <span class="string">'range_not_satisfiable'</span>),</span><br><span class="line"><span class="number">417</span>: (<span class="string">'expectation_failed'</span>,),</span><br><span class="line"><span class="number">418</span>: (<span class="string">'im_a_teapot'</span>, <span class="string">'teapot'</span>, <span class="string">'i_am_a_teapot'</span>),</span><br><span class="line"><span class="number">421</span>: (<span class="string">'misdirected_request'</span>,),</span><br><span class="line"><span class="number">422</span>: (<span class="string">'unprocessable_entity'</span>, <span class="string">'unprocessable'</span>),</span><br><span class="line"><span class="number">423</span>: (<span class="string">'locked'</span>,),</span><br><span class="line"><span class="number">424</span>: (<span class="string">'failed_dependency'</span>, <span class="string">'dependency'</span>),</span><br><span class="line"><span class="number">425</span>: (<span class="string">'unordered_collection'</span>, <span class="string">'unordered'</span>),</span><br><span class="line"><span class="number">426</span>: (<span class="string">'upgrade_required'</span>, <span class="string">'upgrade'</span>),</span><br><span class="line"><span class="number">428</span>: (<span class="string">'precondition_required'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">429</span>: (<span class="string">'too_many_requests'</span>, <span class="string">'too_many'</span>),</span><br><span class="line"><span class="number">431</span>: (<span class="string">'header_fields_too_large'</span>, <span class="string">'fields_too_large'</span>),</span><br><span class="line"><span class="number">444</span>: (<span class="string">'no_response'</span>, <span class="string">'none'</span>),</span><br><span class="line"><span class="number">449</span>: (<span class="string">'retry_with'</span>, <span class="string">'retry'</span>),</span><br><span class="line"><span class="number">450</span>: (<span class="string">'blocked_by_windows_parental_controls'</span>, <span class="string">'parental_controls'</span>),</span><br><span class="line"><span class="number">451</span>: (<span class="string">'unavailable_for_legal_reasons'</span>, <span class="string">'legal_reasons'</span>),</span><br><span class="line"><span class="number">499</span>: (<span class="string">'client_closed_request'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端错误状态码</span></span><br><span class="line"><span class="number">500</span>: (<span class="string">'internal_server_error'</span>, <span class="string">'server_error'</span>, <span class="string">'/o\\'</span>, <span class="string">'✗'</span>),</span><br><span class="line"><span class="number">501</span>: (<span class="string">'not_implemented'</span>,),</span><br><span class="line"><span class="number">502</span>: (<span class="string">'bad_gateway'</span>,),</span><br><span class="line"><span class="number">503</span>: (<span class="string">'service_unavailable'</span>, <span class="string">'unavailable'</span>),</span><br><span class="line"><span class="number">504</span>: (<span class="string">'gateway_timeout'</span>,),</span><br><span class="line"><span class="number">505</span>: (<span class="string">'http_version_not_supported'</span>, <span class="string">'http_version'</span>),</span><br><span class="line"><span class="number">506</span>: (<span class="string">'variant_also_negotiates'</span>,),</span><br><span class="line"><span class="number">507</span>: (<span class="string">'insufficient_storage'</span>,),</span><br><span class="line"><span class="number">509</span>: (<span class="string">'bandwidth_limit_exceeded'</span>, <span class="string">'bandwidth'</span>),</span><br><span class="line"><span class="number">510</span>: (<span class="string">'not_extended'</span>,),</span><br><span class="line"><span class="number">511</span>: (<span class="string">'network_authentication_required'</span>, <span class="string">'network_auth'</span>, <span class="string">'network_authentication'</span>)</span><br></pre></td></tr></table></figure><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><p>这里涉及到一个 <strong>Session</strong> 的概念。不管是调用<code>get</code>还是调用<code>post</code>或者其它请求方法，requests都会默认给我们建立一个Session，当请求完成自动·关闭Session。一个Session就相当于打开了一个浏览器，我们打开浏览器，点击某个页面，看到了信息，然后关闭浏览器。</p><p>如果我们连续两次发出请求，其实是相当于打开了两个浏览器窗口。两个窗口之间的信息是不互通的，例如我在一个浏览器中登录了，想在第二个浏览器中获取登陆后的个人信息是做不到的，除非我们手动在第二个浏览器的请求中添加第一次登录的Cookie信息。</p><p>如果我们是在同一个浏览器中打开了两个标签页，情况就不一样了。第一个标签页中登录，第二个标签页也处于登录状态。</p><p>Session方式通过<code>requests.Session()</code>初始化，返回一个<code>requests.session.Session</code>对象。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests7.jpg" alt=""></p><p>Session通常用来打开同一个站点的不同页面。</p><h2 id="POST上传文件"><a href="#POST上传文件" class="headerlink" title="POST上传文件"></a>POST上传文件</h2><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests6.jpg" alt="requests6"></p><p><code>requests.post()</code>的参数<code>files</code>接受一个字典类型的数据，字典每个元素标识了相应的文件</p><p>注意传入的字典包含的是 <strong>文件对象</strong>，而不是文件名字符串。</p><h2 id="Cookies获取"><a href="#Cookies获取" class="headerlink" title="Cookies获取"></a>Cookies获取</h2><p>Cookies信息存储在<code>response.cookies</code>中，数据类型为 <strong>requests.cookies.RequestsCookieJar</strong>。</p><p><code>response.cookies.items()</code>返回一个 <strong>元组列表</strong>。</p><p>Cookies可以用来维持 <strong>登录状态</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'...'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Chrome/53.0.2785.116'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://www.zhihu.com'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><p>原文所举的12306的例子好像已经被修复了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>, verify=<span class="keyword">True</span>)</span><br><span class="line">response.status_code <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>如果设置<code>varify = True</code>(默认值)，当我们请求一个HTTPS的站点需要验证SSL证书，如果证书无效（不存在或者不合法），程序抛出<code>requests.exceptions.SSLError</code>。</p><p>不验证SSL证书需要手动设置<code>varify = False</code>，可能会抛出 <strong>警告</strong>：建议设置证书。</p><p>忽略警告可以使用：</p><ul><li><code>requests.packages.urllib3.disable_warnings()</code></li><li><code>import logging; logging.captureWarnings(True)</code></li></ul><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p> 对于某些网站，在测试的时候请求几次，能正常获取内容。但是一旦开始大规模爬取，对于大规模且频繁的请求，网站可能会弹出验证码，或者跳转到登录认证页面，更甚者可能会直接封禁客户端的IP，导致一定时间段内无法访问。 </p><p>通过设置 <strong>代理</strong> 可以解决上述问题，设置代理通过参数<code>proxies</code>实现。</p><h3 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h3><p>简单的参数用于指定HTTP/HTTPS代理，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">"proxy_name"</span>: <span class="string">"http://host:port"</span>&#125; <span class="comment"># 模板地址</span></span><br><span class="line">response = requests.get(url, proxies = proxies)</span><br></pre></td></tr></table></figure><p>HTTP代理需要身份验证时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">"proxy_name"</span>: <span class="string">"http://user:passwd@host:port"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h3><p>安装socks库：<code>pip install requests[socks]</code></p><p>设置代理：<code>proxies = {&#39;http&#39;: &#39;socks5://user:passwd@host:port&#39;}</code></p><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p> 在本机网络状况不好或者服务器网络响应太慢甚至无响应时，我们可能会等待特别久的时间才可能收到响应，甚至到最后收不到响应而报错。为了防止服务器不能及时响应，应该设置一个超时时间，即超过了这个时间还没有得到响应，那就报错。这需要用到<code>timeout</code>参数。</p><p>这个时间的计算是发出请求到服务器返回响应的时间。 </p><p>请求时间分为两部分：连接（connect）和读取（read）。因此<code>timeout</code>参数的值可以是标量，也可以是元组。</p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>在访问网站时我们可能需要提供用户名和密码才能继续访问。</p><h3 id="HTTP认证"><a href="#HTTP认证" class="headerlink" title="HTTP认证"></a>HTTP认证</h3><p>requests自带身份认证模块<code>requests.auth.HHTPBasicAuth</code>。</p><p>带身份认证的请求通过参数<code>auth</code>实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"><span class="comment">##1.完整形式</span></span><br><span class="line">response = requests.get(url, auth=HTTPBasicAuth(<span class="string">'user'</span>, <span class="string">'passwd'</span>))</span><br><span class="line"><span class="comment">##2.简写形式</span></span><br><span class="line">response = requests.get(url, auth=(<span class="string">'user'</span>, <span class="string">'passwd'</span>))</span><br></pre></td></tr></table></figure><h3 id="OAuth认证"><a href="#OAuth认证" class="headerlink" title="OAuth认证"></a>OAuth认证</h3><p>安装第三方包：<code>pip install requests_oauthlib</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_oauthlib <span class="keyword">import</span> OAuth1</span><br><span class="line">auth = OAuth1(<span class="string">'app_key'</span>, <span class="string">'app_secret'</span>, <span class="string">'user_oauth_token'</span>, <span class="string">'user_oauth_token_secret'</span>)</span><br><span class="line">response = requests.get(url, auth = auth)</span><br></pre></td></tr></table></figure><h2 id="对请求进行抽象"><a href="#对请求进行抽象" class="headerlink" title="对请求进行抽象"></a>对请求进行抽象</h2><p>将 <strong>请求</strong> 抽象为 <strong>Requests类</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br></pre></td></tr></table></figure><p>初始化<code>Request</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'...'</span></span><br><span class="line">data = <span class="string">'&#123;...&#125;'</span></span><br><span class="line">headers = <span class="string">'&#123;...&#125;'</span></span><br><span class="line">request = Request(<span class="string">'POST'</span>, url, data = data, headers = headers)</span><br></pre></td></tr></table></figure><p>转换<code>request</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session = Session()</span><br><span class="line">prepared_request = session.prepare_request(request)</span><br><span class="line">response = session.send(prepared_request) <span class="comment"># not post or get</span></span><br></pre></td></tr></table></figure><p>将 <strong>请求</strong> 独立成本地的对象，需要的时候才在 <strong>会话</strong> 中获取结果。</p><p>这在队列调度中十分有效。</p><hr><ol><li>使用chrome可以通过访问 <code>chrome://version</code> 查询到<strong>用户代理</strong>信息。<br> <img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/01.png" alt=""></li><li>本文参考：<a href="https://cuiqingcai.com/5514.html" target="_blank" rel="noopener">https://cuiqingcai.com/5514.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;urllib&lt;/strong&gt;是基本库，功能实现尚且比较复杂。&lt;strong&gt;requests&lt;/strong&gt;库更加友好、高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;requests&lt;/strong&gt;能更加简单的实现Cookies、登录验证和代理设置等额外操作。&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="爬虫" scheme="http://chenyin.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://chenyin.top/tags/requests/"/>
    
      <category term="python" scheme="http://chenyin.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>请求库1 - urllib</title>
    <link href="http://chenyin.top/spider/20191127-ae0b.html"/>
    <id>http://chenyin.top/spider/20191127-ae0b.html</id>
    <published>2019-11-27T08:09:28.000Z</published>
    <updated>2019-11-28T06:13:50.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/urllib.jpg" alt="urllib"></p><a id="more"></a><p><strong>urllib库</strong>是Python内置的HTTP请求库，包含4个模块：</p><ul><li><code>request</code>：用来模拟发送请求的基本HTTP请求模块</li><li><code>error</code>：此模块定义了请求过程中可能出现的<strong>异常</strong>，高效的爬虫需要捕获并处理这些可能出现的异常以防止程序意外终止</li><li><code>parse</code>：处理URL的工具</li><li><code>robotparser</code>：<strong>不常用</strong>，识别网站的robots.txt文件，判定网站是否可爬</li></ul><h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="request-urlopen"><a href="#request-urlopen" class="headerlink" title="request.urlopen"></a>request.urlopen</h2><p><code>urllib.request</code>模块可以模拟浏览器发送请求，提供了最基本的HTTP请求方法。</p><p>向服务器发送一个请求并获得<strong>响应</strong>（Response）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = urllib.request.urlopen(<span class="string">"https://www.python.org"</span>)</span><br></pre></td></tr></table></figure></p><p>取得的<strong>响应</strong>是一个<code>http.client.HTTPResponse</code>对象，它包含了与请求结果相关的各种属性和方法：</p><ul><li><strong>超文本解码</strong>：<code>response.read().decode(&#39;utf-8&#39;)</code></li><li><strong>请求状态码</strong>：<code>response.status</code>，200表示请求成功</li><li><strong>头部信息</strong>：<code>response.getheaders()</code>，<strong>元组列表</strong>形式</li><li><strong>某项头部信息</strong>：<code>response.getheader(&#39;Server&#39;)</code>，响应头中的Server值。例如如果Server值为”nginx”就代表服务器是由Nginx搭建的</li></ul><p><code>urllib.request.urlopen()</code>的API如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlopen(url, data=<span class="keyword">None</span>, [timeout, ]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>除了给定基本的URL之外，还可以传递其它数据：</p><ul><li><p><strong>data参数</strong>：可选，用于构造<strong>POST</strong>请求。<strong>data</strong>必须是<strong>bytes</strong>类型/bytes类型的可迭代对象/文件对象，不能是str类型。下面这种方式可以构造一个有效的<strong>data</strong>参数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">args = &#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125; <span class="comment"># dict</span></span><br><span class="line">args = urllib.parse.urlencode(args) <span class="comment"># str: Unicode</span></span><br><span class="line">data = bytes(args, encoding=<span class="string">'utf-8'</span>) <span class="comment"># bytes: UTF-8</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line"><span class="comment"># response.getheader('Content-Type') =&gt; application/json</span></span><br><span class="line"><span class="comment"># response.read().decode('utf-8')是一个json字符串</span></span><br><span class="line"><span class="comment"># 我们构造的data参数存储在"form"字段中</span></span><br><span class="line"><span class="comment"># 表示我们提交的是表单请求</span></span><br></pre></td></tr></table></figure></li><li><p><strong>timeout参数</strong>：可选，超时时间，单位为<strong>秒</strong>。超时未响应的程序会抛出<code>urllib.error.URLError</code>错误（其实叫<strong>异常</strong>是不是更好~）</p></li><li><strong>context参数</strong>：可选，用来指定SSL设置，必须是<code>ssl.SSLContext</code>类型</li><li><strong>cafile参数</strong>：可选，CA证书名称，HTTPS请求需要</li><li><strong>capath参数</strong>：可选，CA证书路径，HTTPS请求需要</li></ul><h2 id="request-Request"><a href="#request-Request" class="headerlink" title="request.Request"></a>request.Request</h2><p><code>urlopen</code>只能实现最基本的请求发起，参数过于简单，不能加入<strong>headers</strong>等信息。构建完整的请求可以使用<strong>Request</strong>类。我们通过各种丰富的参数实例化<strong>Request</strong>类，然后再调用<code>urlopen</code>进行请求：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request = urllib.request.Request(<span class="string">'https://python.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">html = response.read().decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p><p><code>urllib.request.Request</code>对象的构造方法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span><span class="params">(url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</span></span></span><br></pre></td></tr></table></figure></p><ul><li><strong>data</strong>：<strong>bytes</strong>类型，同<code>urlopen</code>中的<code>data</code>参数相似</li><li><strong>headers</strong>：<strong>dict</strong>类型，请求头；或者通过<code>.add_header()</code>方法添加。常用的<strong>请求头</strong>为：<code>{&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;}</code></li><li><strong>origin_req_host</strong>：请求方的host地址（ip地址）</li><li><strong>unverifiable</strong>：是否是无法验证的请求，默认为<code>False</code>，表示用胡可以获取请求的结果</li><li><strong>method</strong>：请求的方法（GET/POST/PUT/…）</li></ul><p>一个使用<code>Request</code>对象获取请求的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">data_dict = &#123;<span class="string">'name'</span>: <span class="string">'Germey'</span>&#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(data_dict), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url, data = data, headers = headers, method = <span class="string">'POST'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="request-Handler"><a href="#request-Handler" class="headerlink" title="request.Handler"></a>request.Handler</h2><p><code>urlopen</code>只能进行最基础的请求，<code>Request</code>类实现了在请求中添加<strong>请求头</strong>，但它们都不能解决Cookies处理和代理设置等更加高级的问题，此时就轮到<strong>Handler</strong>工具登场了。</p><p>基于<code>urllib.request.Handler</code>基类继承实现的高级<strong>Handler</strong>主要有：</p><ul><li><code>HTTPDefaultErrorHandler</code>：处理HTTP响应错误</li><li><code>HTTPRedirectHandler</code>：处理重定向</li><li><code>HTTPCookieProcessor</code>：处理Cookies</li><li><code>ProxyHandler</code>：设置代理</li><li><code>HTTPPasswordMgr</code>：管理密码</li><li><code>HTTPBasicAuthHandler</code>：管理认证</li><li><a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler" target="_blank" rel="noopener">其它的<code>Handler</code>类</a></li></ul><h2 id="request-OpenerDirector"><a href="#request-OpenerDirector" class="headerlink" title="request.OpenerDirector"></a>request.OpenerDirector</h2><p>在之前的例子中，<strong>urllib</strong>通过<code>urlopen</code>函数为我们提供了一个隐藏的<code>OpenerDirector</code>对象（或者叫<code>Opener</code>）。</p><p><code>Opener</code>类相比于<code>urlopen</code>函数和<code>Request</code>类能实现更多的功能，它是更加底层的工具。</p><p><code>Opener</code>对象通过<code>Handler</code>来构建。</p><p><code>opener.addheaders = [(&#39;user-Agent&#39;, &#39;...)]</code>可设置请求头</p><hr><blockquote><p><a href="https://cuiqingcai.com/5500.html" target="_blank" rel="noopener">[Python3网络爬虫开发实战] 3.1.1-发送请求</a></p></blockquote><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>合理的异常处理使得程序更加稳健。</p><p><code>urllib.request</code>产生的<strong>异常</strong>由<code>urllib.error</code>模块处理。</p><h2 id="URLError-base"><a href="#URLError-base" class="headerlink" title="URLError (base)"></a>URLError (base)</h2><p><code>urllib.error.URLError</code>是<code>urllib.error</code>模块中的<strong>基类</strong>，下面提到的所有异常都是继承自<code>URLError</code>。</p><p>所有的<code>urllib.request</code>产生的异常都可以通过<code>URLError</code>进行捕获，如果记不住其它更精细的异常类的话用这个准没错。</p><p><code>URLError</code>异常有个很常用的属性叫做<code>reason</code>，帮助我们快速判断出错原因。</p><p><code>reason</code>描述了错误的原因，但它不一定是字符串，也可能是个对象。例如超时请求会返回一个<code>socket.timeout</code>对象，因此使用异常的<code>reason</code>的值时最好进行类型检查。</p><h2 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h2><p>处理HTTP请求错误，常用的三个属性：</p><ul><li><code>code</code>：状态码</li><li><code>reason</code>：错误原因</li><li><code>headers</code>：请求头</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><hr><blockquote><p><a href="https://cuiqingcai.com/5505.html" target="_blank" rel="noopener">[Python3网络爬虫开发实战] 3.1.2-处理异常</a></p></blockquote><h1 id="URL处理"><a href="#URL处理" class="headerlink" title="URL处理"></a>URL处理</h1><p><code>urllib.parse</code>模块用来处理URL（部分），支持多种协议。</p><p>常用方法如下：</p><ul><li><strong>urlparse</strong>: 将完整的URL字符串拆分为一个六元素元组。<br>URL的标准格式为：<code>scheme://netloc/path;parameters?query#fragment</code></li><li><strong>urlunparse</strong>: 将一个长度为6的可迭代对象（元组、列表等）转化为一个完整的URL字符串</li><li><strong>urlsplit</strong>: 和<code>urlparse()</code>十分相似，只是把<code>params</code>部分合并到了<code>path</code>中</li><li><strong>urlunsplit</strong>: 和<code>urlunparse()</code>十分相似，处理对象为5元素的可迭代对象</li><li><strong>urljoin</strong>: 只能填补、合并</li><li><strong>urlencode</strong>：将<strong>参数字典</strong>序列化为<strong>GET请求</strong>的参数字符串</li><li><strong>parse_qs</strong>：功能与<code>urlencode</code>相反，将参数字符串转化为字典</li><li><strong>parse_qsl</strong>：功能与<code>urlencode</code>相反，将参数字符串转化为元组列表</li><li><strong>quote</strong>：对字符串进行URL编码，例如中文会被转化为编码</li><li><strong>unquote</strong>：对编码的字符串进行URL解码，例如中文编码被解码回中文</li><li>其它</li></ul><h1 id="分析Robots协议"><a href="#分析Robots协议" class="headerlink" title="分析Robots协议"></a>分析Robots协议</h1><p><strong>Robots协议</strong>也称作<strong>爬虫协议</strong>、<strong>机器人协议</strong>，它的全名叫作<strong>网络爬虫排除标准</strong>（Robots Exclusion Protocol），用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。</p><p>它通常是一个叫作<u>robots.txt</u>的文本文件，一般放在网站的根目录下。当搜索爬虫访问一个站点时，它首先会检查这个站点根目录下是否存在robots.txt文件，如果存在，搜索爬虫会根据其中定义的爬取范围来爬取。如果没有找到这个文件，搜索爬虫便会访问所有可直接访问的页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/urllib.jpg&quot; alt=&quot;urllib&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="爬虫" scheme="http://chenyin.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://chenyin.top/tags/python/"/>
    
      <category term="urllib" scheme="http://chenyin.top/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>asyncio与异步协程爬虫</title>
    <link href="http://chenyin.top/spider/20191126-af0c.html"/>
    <id>http://chenyin.top/spider/20191126-af0c.html</id>
    <published>2019-11-26T07:42:41.000Z</published>
    <updated>2019-11-26T09:30:33.485Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/async.jpg" alt="async"></p><a id="more"></a><h1 id="关于异步协程"><a href="#关于异步协程" class="headerlink" title="关于异步协程"></a>关于异步协程</h1><p><strong>异步协程</strong>往往对IO密集型任务非常有效，如网络IO、磁盘IO，典型的应用场景是提升爬虫效率。</p><p>不适用任何并行或者异步的爬虫往往因为服务器响应过慢而将大量的时间花费在IO等待上。</p><p>当需要获取多个url的内容时，怎么url内容获取的累计时间？这里主要有两个思路。一是多进程并行，这种方法的效率主要取决于机器CPU的核数，一般情况下CPU核数有限，而且单个CPU在等待响应的过程中仍然处于空闲状态。二是<strong>异步协程</strong>，其设计思想为：在执行某个子程序如果遇到阻塞就将该子程序挂起转而执行其它的子程序到其完成或者挂起为止，这样在多个子程序间进行切换，从而充分利用处理器。在爬虫设计中，多个url的内容获取实际上是相互独立的，当程序处理一个url遇到阻塞时可以将其挂起等待服务器响应转而处理其它的url，通过队列访问的方式不断循环处理任务。当被挂起的子程序处理完成后自动添加到任务队列末尾等待轮执；如果所有任务都处于挂起状态则程序进入阻塞状态直到新的可执行任务出现。</p><p>Python3.5以后添加了<strong>async/await</strong>关键字用以实现<strong>异步协程</strong>，使用它们需要导入包<strong>asyncio</strong>:</p><ul><li><strong>async</strong>：定义一个<strong>异步函数</strong>（协程）或者异步生成器</li><li><strong>await</strong>：当子程序阻塞时挂起子程序（任务）</li></ul><p>一些基本概念：</p><ul><li><strong>阻塞</strong>：程序在等待某个操作完成而不能去干别的事情，即程序处于挂起状态，称该程序处于 <strong>阻塞状态</strong>。常见的阻塞形式有：等待网络I/O，等待磁盘I/O，等待用户输入，CPU切换上下文等；</li><li><strong>非阻塞</strong>：非阻塞是相对于阻塞而言的：如果程序包含多个独立的子程序，当其中一个子程序完成或者阻塞时可以转而执行其它的子程序，从而避免因为毫无作为的等待而造成的效率低下；</li><li><strong>同步</strong>：为了完成某个任务，不同程序间需要相互协商、相互影响，则这些程序是同步的；同步通常通过“锁”来实现</li><li><strong>异步</strong>：如果在完成某个任务时，程序之间不需要相互通信而各自独立运行，则这些程序是异步的</li></ul><p>异步协程中的基本概念：</p><ul><li><p><strong>事件循环</strong>（event loop）：我们需要向系统申请一个<strong>事件循环对象</strong>运行我们自己的<strong>协程对象</strong>，事件循环帮助我们自动执行、挂起协程子程序。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop</span><br><span class="line"><span class="comment"># &lt;_WindowsSelectorEventLoop running=False closed=False debug=False&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>协程</strong>（Coroutine）：协程对象类型，需要被注册到<strong>事件循环</strong>中才能被循环调用，通过<strong>async</strong>关键字定义，直接调用不会被立即执行，而是返回一个<strong>协程对象</strong>。</p></li><li><p><strong>任务</strong>（Task）：任务是对<strong>协程对象</strong>的封装，包含了更多的信息。</p></li><li><p><strong>future</strong></p></li></ul><h1 id="异步协程爬虫"><a href="#异步协程爬虫" class="headerlink" title="异步协程爬虫"></a>异步协程爬虫</h1><p>下面以一个例子说明异步协程爬虫的基本语法。</p><h2 id="模拟慢速服务器"><a href="#模拟慢速服务器" class="headerlink" title="模拟慢速服务器"></a>模拟慢速服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(threaded=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>这里我们定义了一个 Flask 服务，主入口是 index() 方法，方法里面先调用了 sleep() 方法休眠 3 秒，然后接着再返回结果，也就是说，每次请求这个接口至少要耗时 3 秒，这样我们就模拟了一个慢速的服务接口。</p><p>注意这里服务启动的时候，run() 方法加了一个参数 threaded，这表明 Flask 启动了多线程模式，不然默认是只有一个线程的。如果不开启多线程模式，同一时刻遇到多个请求的时候，只能顺次处理，这样即使我们使用协程异步请求了这个服务，也只能一个一个排队等待，瓶颈就会出现在服务端。所以，多线程模式是有必要打开的。</p><p>启动之后，Flask 应该默认会在 127.0.0.1:5000 上运行，运行之后控制台输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Running on http:*//127.0.0.1:5000/ (Press CTRL+C to quit)*</span><br></pre></td></tr></table></figure><h2 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio <span class="comment"># 异步I/O</span></span><br><span class="line"><span class="keyword">import</span> aiohttp <span class="comment"># 实现了异步的网络通信工具，替换requests</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>, url)</span><br><span class="line">    result = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from %s Result: %s'</span>%(url, result))</span><br></pre></td></tr></table></figure><p><strong>asyncio</strong>中实现了定义和执行协程的关键字和方法，<strong>aiohttp</strong>中实现了支持异步操作的网络通信，<strong>requests</strong>不支持异步操作。</p><p>异步函数<code>request()</code>定义了一个协程，如果事件循环执行到本协程的<code>await get(url)</code>语句时遇到阻塞就会将此协程挂起转而执行任务队列中的其它任务。当本协程挂起时实际上是在等待<code>get(url)</code>的结果，<code>get(url)</code>本身也是一个协程，它返回一个<strong>可等待对象</strong>（Awaitable object）。</p><p><code>get(url)</code>同样是一个协程，如果事件循环执行到<code>await session.get(url)</code>时遇到阻塞，该任务被挂起等待服务器响应，当下次轮执此协程时会再次遇到<code>await response.text()</code>，如果这个子程序没有遇到执行阻塞，就不会挂起继续向下执行。</p><p>总结一下：</p><ul><li><code>async</code>定义协程，<code>await</code>当任务阻塞时挂起任务，<code>await</code>只能用于<code>async</code>定义的协程里面</li><li><code>await</code>关键字修饰的必须是<strong>可等待对象</strong>。<a href="https://www.python.org/dev/peps/pep-0492/#await-expression" target="_blank" rel="noopener">哪些是<strong>可等待对象</strong>？</a><ul><li>异步函数定义的原生协程对象</li><li>异步生成器</li><li>实现了<code>__await__()</code>方法的迭代器</li></ul></li></ul><h2 id="任务包装并注册到事件循环"><a href="#任务包装并注册到事件循环" class="headerlink" title="任务包装并注册到事件循环"></a>任务包装并注册到事件循环</h2><p>将<strong>协程对象</strong>包装为<strong>任务对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p>获取<strong>事件循环对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><p>将任务注册到事件循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 单个任务</span></span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多个任务</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure><p>获取运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = [task.result() <span class="keyword">for</span> task <span class="keyword">in</span> tasks]</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>非原创声明</strong>：本笔记非原创，主要内容参考博客 <a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">https://cuiqingcai.com/6160.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/async.jpg&quot; alt=&quot;async&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="爬虫" scheme="http://chenyin.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="协程" scheme="http://chenyin.top/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>决策树 - CART</title>
    <link href="http://chenyin.top/ml/20191122-edcd.html"/>
    <id>http://chenyin.top/ml/20191122-edcd.html</id>
    <published>2019-11-22T03:37:42.000Z</published>
    <updated>2019-11-26T09:24:56.712Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/cart.jpg" alt="CART"></p><a id="more"></a><p>Breiman等在1984年提出了 <strong>分类与回归树模型</strong>（CART, Classification and regression tree）。</p><p>CART能够输出随机变量$Y$的 <strong>条件概率分布</strong>。</p><p>CART的一个重要特点是假设决策树是二叉树，这意味着不论特征是连续型随机变量还是多个取值的离散型随机变量，都将被处理成二元变量，即需要确定一个 <strong>阈值</strong>。</p><h1 id="CART生成"><a href="#CART生成" class="headerlink" title="CART生成"></a>CART生成</h1><h2 id="生成回归树"><a href="#生成回归树" class="headerlink" title="生成回归树"></a>生成回归树</h2><p>给定训练数据集<br>$$<br>D = { (x_1, y_1),(x_2,y_2), \cdots, (x_N,y_N) }<br>$$<br>如果选定第$j$个特征和该特征的某个取值$s$，我们就能将所有样本的第$j$个特征的取值与$s$分别进行比较，从而将数据集$D$划分为两部分。对于这两个划分的子数据集$D_1$和$D_2$，我们再次执行上面的操作进行进一步的划分……</p><p>最终我们将数据集$D$划分成了$M$个子集，或者说将输入空间（特征空间）划分成了$M$个区域。对于划分的每一个子区域$R_m$（$m=1,2,\cdots,M$）我们可以通过某种方法求出这样一个值$c_m$，于是就可以定义 <strong>回归模型</strong><br>$$<br>f(x) = \sum_{m=1}^M c_m I(x \in R_m)<br>$$<br>其中$I(x \in R_m)$称为 <strong>指示函数</strong>，样本$x$只会属于子区域中的某一个，而不会同时被划分到多个子区域，因为互斥完备。</p><p>这里产生了两个问题：</p><ol><li>如何确定最优的$j$和$s$？</li><li>如何定义$c_m$？</li></ol><p>先看第二个问题：因为是回归模型，我们用 <strong>平方误差</strong> 来表示回归树对训练数据的预测误差<br>$$<br>\begin{split}<br>L(D) &amp;= \sum_{i=1}^N [y_i - f(x_i)]^2 \\<br>&amp;= \sum_{m=1}^M \sum_{x_k \in R_m} [y_k - f(x_k)]^2 \\<br>&amp;= \sum_{m=1}^M \sum_{x_k \in R_m} (y_k - c_m)^2<br>\end{split}<br>$$<br>若使$L(D)$最小，则使$\sum_{x_k \in R_m} (y_k - c_m)^2$最小，一阶导等于0极小，解得<br>$$<br>C_m = \frac1{|D_m|} \sum_{k=1}^{|D_m|} y_k = avg(y_k|x_k \in R_m)<br>$$<br>其中数据集$D$位于子空间$R_m$中的子数据集为$D_m$，$|D_m|$为数据集$D_m$中的样本总数。</p><p>综上所述，子空间$R_m$上的$c_m$的最优估计值$\hat{c}_m$是$R_m$上所有输入样本对应的$y$的均值。</p><p>再看第一个问题：怎么确定最优的$j$和$s$，亦即怎么对样本空间进行划分。</p><p>这里我们将第$j$个变量称为 <strong>切分变量</strong>（splitting variable），将该变量的取值$s$称为 <strong>切分点</strong>（splitting point），并进行如下划分：<br>$$<br>\begin{split}<br>R_1(j,s) &amp;= { x|x^{(j)} \le s } \\<br>R_2(j,s) &amp;= { x|x^{(j)} \gt s}<br>\end{split}<br>$$<br><strong>启发式</strong> 方法寻找最优的切分变量$j$和切分点$s$：遍历所有输入输入特征，固定$j$扫描可能的切分点$s$，计算<br>$$<br>Loss(j,s) = \sum_{x_i \in R_1(j,s)}(y_i-\bar{y_i})^2 + \sum_{x_i \in R_2(j,s)}(y_i-\bar{y_i})^2<br>$$<br>哪组$(j,s)$的$Loss$小就选谁。</p><p>迭代划分得到$M$个子区域。</p><h2 id="生成分类树"><a href="#生成分类树" class="headerlink" title="生成分类树"></a>生成分类树</h2><h3 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h3><p><strong>基尼指数</strong> 用来度量集合$D$的不确定性，基尼指数越大，集合$D$的不确定性越大，与<strong>熵</strong>类似。<br>$$<br>\text{Gini}(p) = \sum_{k=1}^K p_k(1-p_k) = 1 - \sum_{k=1}^K p_k^2<br>$$<br>二分类问题的基尼指数为 $2p(1-p)$</p><p>样本集合$D$的基尼指数为 $1-\sum_{k=1}^K (\frac{|D_k|}{|D|})^2$</p><p>依据某特征A是否取值为a可将数据集D分为两个子集$D_1$和$D_2$<br>$$<br>\begin{split}<br>D &amp;= D_1 + D_2 \\<br>D_1 &amp;= { (x,y) \in D | A(x) = a } \\<br>D_2 &amp;= { (x,y) \in D | A(x) \ne a }<br>\end{split}<br>$$<br>在特征A的条件下数据集D的基尼指数定义为<br>$$<br>\text{Gini}(D,A) = \frac{|D_1|}{|D|}\text{Gini}(D_1) + \frac{|D_2|}{|D|}\text{Gini}(D_2)<br>$$<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/14.jpg" alt=""></p><h3 id="CART生成-1"><a href="#CART生成-1" class="headerlink" title="CART生成"></a>CART生成</h3><p>遍历所有的可用的特征，遍历该特征所有可能的取值，分别计算基尼指数，取基尼指数最小的切分变量和切分点作为当前二分数据集的策略。</p><p>递归对数据集进行二分。</p><p>以下表为例说明基尼指数如何用于选择切分变量和切分点</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/11.jpg" alt=""></p><p>$$<br>\begin{split}<br>\text{Gini}(D,A=1) &amp;= \frac{5}{15}(2 \times \frac25 \times (1-\frac25)) + \frac{10}{15}(2 \times \frac7{10} \times (1 - \frac7{10})) \\<br>&amp;= 0.44 \\<br>\text{Gini}(D,A=2) &amp;= 0.48 \\<br>\text{Gini}(D,A=3) &amp;= 0.44<br>\end{split}<br>$$<br>$\text{Gini}(D,A=1)$或者$\text{Gini}(D,A=3)$都可以作为A的最优切分点</p><p>同理求得其它特征的最优切分点<br>$$<br>\begin{split}<br>\text{Gini}(D,B=1) &amp;= 0.32 \\<br>\text{Gini}(D,C=1) &amp;= 0.27 \\<br>\text{Gini}(D,E=3) &amp;= 0.32<br>\end{split}<br>$$<br>上面的四个切分点中，$\text{Gini}(D,C=1)$最小，所以选择特征C（有自己的房子）作为最优分类特征，C=1为最优切分点，将数据集D分为两个子集，同时根节点也产生了两个子节点。由于C=1的样本标签全部为1，则此节点为叶子节点，类别标记为1；接下来对另一个子节点进行寻找最优分类特征和最优切分点。</p><h1 id="CART剪枝"><a href="#CART剪枝" class="headerlink" title="CART剪枝"></a>CART剪枝</h1><p>CART剪枝算法是个很费解的东西，我尝试着通俗化地去描述它。</p><p>CART的剪枝同ID3/C4.5的剪枝算法有些许区别。ID3/C4.5的剪枝算法直接计算内部节点剪除前后决策树损失大小，CART剪枝算法多了一步：先从“完全生长”的整树$T_0$开始一个节点一个节点（内部节点）的剪除，直到剩下最后的根节点$T_n$，每剪一次就会得到一棵树，这样就得到了一个树的序列${T_0,T_1,\cdots,T_n}$，注意这里的$n$并不是指整树内部节点的多少，实际上由整树生成的子树非常多，这个$n$可能会很大，但是它始终是有限的；然后在 <strong>验证数据集</strong> 上分别进行测试，选择损失最小的树作为最终结果。</p><p>先来回顾一下决策树$T$的损失函数的定义，其中$C(T)$是对训练数据的预测误差，$|T|$是模型复杂度：<br>$$<br>C_\alpha(T) = C(T) + \alpha |T|,\ \alpha \ge 0<br>$$<br>在ID3/C4.5的剪枝算法中，$\alpha$作为超参需要预先设定，当我们预设$\alpha$的值后对整树进行剪枝，最后会得到一个整树的子树作为最终结果，这里$0&lt;\alpha&lt;+\infty$，特别地，当$\alpha=0$时，整树是最优解；当$\alpha=+\infty$时仅由根节点构成地单节点树是最优解，当然一般情况下$\alpha=0$或者$\alpha=+\infty$都不会是我们想要的结果。所以，当我们确定了$\alpha$的值时，我们就确定了整树的某一棵子树；换言之，一个$\alpha$值对应着一颗子树，而这棵子树就是这个$\alpha$条件下的最优解。</p><p>如果我更改$\alpha$的值就会得到不同的子树，那么哪一棵子树才是最好的呢？CART剪枝算法把$\alpha$视为一个参数而不是超参，在剪枝的过程中寻找最优的$\alpha$和这个$\alpha$对应的最优子树。$\alpha \in (0,+\infty)$表示$\alpha$有无穷多的取值，那这是不是意味着有无穷多的子树呢？显然不是的，因为整树的节点是有限的，所以整树的子树肯定是有限的。但是一个$\alpha$必定对应着一棵子树，这就表示很多个$\alpha$对应着相同的子树，换言之，一棵子树对应着很多个$\alpha$值，<strong>一棵子树对应了一个$\alpha$的区间</strong>。我们将$[0,+\infty]$区间分成$[\alpha_0,\alpha_1)$、$[\alpha_1,\alpha_2)$、…、$[\alpha_n,\alpha_{n+1})$，其中$\alpha_0=0$, $\alpha_{n+1}=+\infty$，每个区间$[\alpha_i,\alpha_{i+1})$的$\alpha$对应的最优子树都是$T_i$。于是乎，我们假设，如果我们可以求出每个子树$T_i$对应区间的左$\alpha$的值，我们就能将子树$T_i$与$\alpha$区间一一对应，通过求解最优子树来求解最优$\alpha$。</p><p>那么问题来了，怎么通过子树求区间左边界的$\alpha$呢？</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/15.jpg" alt=""></p><p>我们通过比较剪除节点$t$前后损失的变化来决定是否剪除节点$t$。我们观察预测误差$C_\alpha(T)= \sum_{k=1}^{|T|} N_k H_k(T)$：独立计算每个叶子节点$N_kH_k(T)$再求加和，这意味着剪除节点$t$整个决策树的损失变化就等价于上图中粉色区域子树剪除节点$t$损失的变化。</p><p>对于整树$T_0$的任意一个内部节点$t$，假设剪除此节点得到的子树为$T_k$，$k \in {1,\cdots,n}$。</p><p>以$t$为根节点的单节点树的损失函数为<br>$$<br>C_\alpha(t) = C(t) + \alpha |t| = C(t) + \alpha<br>$$<br>以$t$为根节点的多节点子树$T_t$的损失为<br>$$<br>C_\alpha(T_t) = C(T_t) + \alpha |T_t|<br>$$<br>上面两个式子中的$C(t)$和$C(T_t)$都是可求的。</p><p>当$\alpha=0$或者$\alpha$充分小时，预测误差占损失函数的大头，单节点树的损失肯定比多节点子树高，$C(t)&gt;C_\alpha(T_t)$；当$\alpha$充分大时，模型复杂度占损失函数的大头，单节点树的损失肯定比多节点树低，$C(t)&lt;C_\alpha(T_t)$。如果单节点损失较大，说明还是保留$t$的叶子节点比较好，因为损失比较小，此时不剪枝；如果单节点树的损失较小，说明应该剪除内部节点$t$。</p><p>那么应该存在这样一个不大不小的$\alpha$，使得单节点树的损失刚好等于多节点树的损失，即$C_\alpha(t)=C_\alpha(T_t)$，解得<br>$$<br>\alpha’ = \frac{C_t - C(T_t)}{|T_t|-1}<br>$$<br>如果$\alpha$的值比这个$\alpha’$小，单节点树损失更大，意味着不能剪$t$；当$\alpha$的值比这个$\alpha ‘$大，单节点树损失更小，意味着应该剪除$t$。根据前面的叙述，子树$T_k$对应的$\alpha$区间为$[\alpha_k, \alpha_{k+1})$，子树$T_k$存在的前体就是相应内部节点被无情的剪除了，所以$\alpha_k = \alpha’$。</p><p>所以，我们对整树$T_0$的所有内部节点求其$\frac{C_t - C(T_t)}{|T_t|-1}$，按$\alpha$从小到大依次剪除对应的节点得到相应的子树序列${T_0,T_1,\cdots,T_n}$。</p><p>至此，我们已经拿到了按照$\alpha$从小到大排列的子树序列，接下来在 <strong>验证数据集</strong> 上进行验证，取损失最小的子树即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/cart.jpg&quot; alt=&quot;CART&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ml" scheme="http://chenyin.top/categories/ml/"/>
    
    
      <category term="决策树" scheme="http://chenyin.top/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>从生成器到协程</title>
    <link href="http://chenyin.top/spider/20191120-1aaa.html"/>
    <id>http://chenyin.top/spider/20191120-1aaa.html</id>
    <published>2019-11-20T04:30:56.000Z</published>
    <updated>2019-11-26T09:30:59.890Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_1.png" alt=""></p><a id="more"></a><h1 id="可迭代对象和迭代器"><a href="#可迭代对象和迭代器" class="headerlink" title="可迭代对象和迭代器"></a>可迭代对象和迭代器</h1><p><strong>可迭代对象</strong>（Iterable）指的是能够使用<strong>for循环</strong>进行遍历的对象，如字符串、数组、迭代器、生成器等。</p><p><strong>可迭代对象</strong>实现了<code>__iter__()</code>方法。</p><p><strong>迭代器</strong>（Iterator）是一种特殊的<strong>可迭代对象</strong>，实现了<code>__next__()</code>方法。</p><p>判断一个对象<code>obj</code>是否是<strong>可迭代对象/迭代器</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"></span><br><span class="line">isinstance(obj, Iterable)</span><br><span class="line">isinstance(obj, Iterator)</span><br></pre></td></tr></table></figure></p><p><code>iter()</code>函数称之为<strong>迭代器工厂</strong>函数，它能将一个<strong>可迭代对象</strong>转化为<strong>迭代器</strong>，通过给非迭代器的可迭代对象添加<code>__next__()</code>方法，实现工厂式的加工和包装功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(isinstance(x, Iterable)) <span class="comment"># True</span></span><br><span class="line">print(isinstance(x, Iterator)) <span class="comment"># False</span></span><br><span class="line">x_iter = iter(x)</span><br><span class="line">print(isinstance(x_iter, Iterable)) <span class="comment"># True</span></span><br><span class="line">print(isinstance(x_iter, Iterator)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p><strong>生成器</strong>（Generator）本质上还是<strong>迭代器</strong>，因此<strong>迭代器</strong>的所有特性都适合于<strong>生成器</strong>。他们的区别在于实现方式不同：实现一个<strong>迭代器</strong>往往需要定义一个<strong>类</strong>并且实现其<code>__iter__()</code>方法和<code>__next__()</code>方法；实现一个生成器只需要在函数中使用<code>yield</code>关键字。后者的实现方式更加简洁，性能与迭代器一样高效。</p><p>python中的<strong>生成器</strong>有两种基本实现方式，一种是通过<code>yield</code>关键字实现，一种叫做<strong>生成器表达式</strong>。<strong>生成器表达式</strong>与<strong>列表推导式</strong>十分相似，只需把<code>[...]</code>换成<code>(...)</code>即可。在大数据的迭代过程中，<strong>列表推导式</strong>将会耗费大量的时间和空间，此时选择<strong>生成器表达式</strong>性能将会得到显著的提升。只是简简单单地改变一个括号，程序运行的速度就能肉眼可见的变快！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Generator</span><br><span class="line"></span><br><span class="line">l = [x**<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>)] <span class="comment"># 列表推导式</span></span><br><span class="line">isinstance(l, list) <span class="comment"># True</span></span><br><span class="line">g = (x**<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>)) <span class="comment"># 生成器表达式</span></span><br><span class="line">isinstance(g, Generator) <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><p>另外一种实现<strong>生成器</strong>的方法是在函数中使用<code>yield</code>关键字。当函数执行到<code>yield</code>时会返回<code>yield</code>指定的值，同时将函数挂起，这点同<code>return</code>不一样：<code>return</code>返回指定的值时意味着函数调用结束。当再次调用此函数时，不会从头执行，而是会接着上次挂起时的状态接着执行。</p><p><code>yield</code>关键字不仅能返回数据，也能从外界接收数据，接收数据通过<code>.send(...)</code>方法实现。<code>next()</code>函数和<code>.send()</code>方法都能够激活生成器函数继续运行直到下一次遇到<code>yield</code>挂起，不同的是，<code>.send()</code>方法还能够向生成器函数传递值。看下面这个生硬的例子：<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_2.png" alt=""></p><p>使用<code>next(g)</code>使生成器运行至<code>yield</code>处，函数等待外界传值给局部变量<code>x</code>并挂起，此时再使用<code>g.send(3)</code>将3传递给<code>x</code>，函数被激活继续向下执行，计算<code>y</code>等于8，此时遇到第二个<code>yield</code>，函数返回<code>y</code>的值并挂起，所以<code>g.send(3)</code>的返回结果为8。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_3.png" alt=""></p><p>如果再次执行<code>g.send(4)</code>会发现返回结果为空！这是因为：<code>.send()</code>方法激活可生成器函数并从上次挂起的地方继续执行（<code>yield y</code>），执行至<code>x = yield</code>等待外界传值，也就是说本次<code>.send</code>发送的消息，生成器函数内部没有变量接收，相当于一次无效的消息发送，故而没有返回值。如果再次执行<code>g.send(4)</code>，返回结果显示为16，这与上述<code>g.send(3)</code>的情景相似。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_3.png" alt=""></p><p>通过<code>yield</code>关键字和<code>.send</code>方法，用户可以随时中断一个函数执行转而执行另一个函数，相当于手动从一个子程序的执行切换到了另一个子程序的执行。在这种子程序的切换过程中没有涉及到<strong>线程</strong>的切换，我们将一个子程序和它被执行以及被挂起时的状态称之为一个<strong>协程</strong>（Coroutine）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="迭代器与生成器" scheme="http://chenyin.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="异步协程" scheme="http://chenyin.top/tags/%E5%BC%82%E6%AD%A5%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开启搬瓦工VPS的IPv6服务</title>
    <link href="http://chenyin.top/it/20191119-a377.html"/>
    <id>http://chenyin.top/it/20191119-a377.html</id>
    <published>2019-11-19T05:18:50.000Z</published>
    <updated>2019-11-22T07:08:00.254Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/ipv6.png" alt=""></p><a id="more"></a><p>搬瓦工上能买到带IPv6的服务器。此服务器位于LOS ANGELES，IPv4地址是xxx.xxx.xxx.xxx。如下</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/06.jpg" alt=""></p><p>注册并登陆<a href="https://www.tunnelbroker.net" target="_blank" rel="noopener">tunnelbroker</a>，如下</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/07.jpg" alt=""></p><p>点击<strong>Create Regular Tunnel</strong>，在2处输入服务器的IPv4地址，确定后自动检查该IP是否支持IPv6。</p><p>如果3处变为绿色并显示”IP is apotential tunnel endpoint”表示该IP支持IPv6服务。</p><p>在4处选择服务器所在的地区。</p><p>点击页面底部的<strong>确认</strong>。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/08.jpg" alt=""></p><p>点击<strong>Example Configurations</strong>，在1处选择服务器的操作系统（本服务器操作系统是Ubuntu16.04，选择”Linux-net-tools”），确认后在2处会显示相关命令。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/09.jpg" alt=""></p><p>打开服务器终端，依次执行上述命令。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/10.jpg" alt=""></p><p>输入<code>ping6 google.com</code>检查IPv6是否可用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/ipv6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="it" scheme="http://chenyin.top/categories/it/"/>
    
    
  </entry>
  
  <entry>
    <title>决策树 - ID3和C4.5</title>
    <link href="http://chenyin.top/ml/20191117-62c1.html"/>
    <id>http://chenyin.top/ml/20191117-62c1.html</id>
    <published>2019-11-17T12:44:27.000Z</published>
    <updated>2019-11-22T03:47:42.195Z</updated>
    
    <content type="html"><![CDATA[<p>决策树学习通常包含三个步骤：特征选择、决策树的生成、决策树的修剪。</p><p>决策树学习的思想主要来源于：</p><ul><li>由Quinlan提出的<strong>ID3</strong>算法和<strong>C4.5</strong>算法</li><li>由Breiman等人提出的<strong>CART</strong>算法</li></ul><a id="more"></a><h1 id="决策树模型与学习"><a href="#决策树模型与学习" class="headerlink" title="决策树模型与学习"></a>决策树模型与学习</h1><h2 id="决策树模型"><a href="#决策树模型" class="headerlink" title="决策树模型"></a>决策树模型</h2><p>决策树由<strong>节点</strong>（node）和<strong>有向边</strong>（directed edge）组成。</p><p>节点分为<strong>内部节点</strong>（表示特征/属性）和<strong>叶子节点</strong>（表示分类）。</p><p><strong>&gt; 决策树与if-then规则</strong></p><p>从根节点到叶子节点对应一条路径，亦即一条<strong>规则</strong>，不同规则间互斥，所有规则组成全体，即<strong>互斥完备性</strong>。</p><p><strong>&gt; 决策树与条件概率分布</strong></p><p>给定<strong>特征</strong>条件下类的条件概率分布。</p><p>决策树分类时强行将样本分到条件概率最大的那一类中去。</p><h2 id="决策树学习"><a href="#决策树学习" class="headerlink" title="决策树学习"></a>决策树学习</h2><p>给定训练数据集<br>$$<br>D = { (x_1, y_1),(x_2,y_2), \cdots, (x_N,y_N) }<br>$$<br>其中</p><ul><li>$x_i=(x_i^{(1)},x_i^{(2)},\cdots,x_i^{(n)})^T$为输入向量（特征向量），$n$为样本的特征维度</li><li>$y_i \in { 1,2,\cdots,K }$为每个样本的<strong>类</strong>标记，$K$为总类数</li><li>$i=1,2,\cdots,N$，$N$为<strong>样本容量</strong></li></ul><p>与训练数据集不矛盾的决策树可能有多个，也可能没有；我们需要求矛盾最小、对测试集泛化能力较高的那个决策树。</p><h1 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h1><p>经典的<strong>特征选择</strong>准则有两个：<strong>信息增益</strong>，<strong>信息增益比</strong>。</p><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><h3 id="熵-amp-经验熵"><a href="#熵-amp-经验熵" class="headerlink" title="熵&amp;经验熵"></a>熵&amp;经验熵</h3><p>在信息论和概率统计中，<strong>熵</strong>（Entropy）是随机变量不确定性的度量。</p><p>设$X$是有限取值的离散型随机变量，其概率分布为<br>$$<br>P(X=x_i)=p_i \text{, $i=1,2,\cdots,n$}<br>$$<br>随机变量$X$的<strong>熵</strong>为<br>$$<br>H(X)=-\sum_{i=1}^N p_i \log p_i \text{, 特别的 $0 \log 0 = 0$}<br>$$<br>由<strong>熵</strong>的定义可知，随机变量的<strong>熵</strong>（不确定性）与随机变量的取值无关。这其实不难理解：确定性变量是随机性变量的一种特例，对于确定性变量取值1还是1000它们的不确定性应该是一样的，都为0。</p><p><strong>熵</strong>的单位：<strong>bit</strong>（当对数底为2时）或者<strong>nat</strong>（当对数底为$e$时）。</p><p>当随机变量$X$<strong>完全确定</strong>（$P(X=x_k)=1$且$P(X=x_{\text{else}})=0$）或者<strong>完全不确定</strong>（$P(X=x_{\text{any}})=1/n$）时，$H(X)$取得最小值（0）或者最大值（$\log n$）。</p><p>当随机变量只取0、1时<br>$$<br>H(p) = -p \log_2 p - (1-p) \log_2 (1-p)<br>$$<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/12.png" alt=""></p><p>如果此随机变量的熵值通过<strong>极大似然估计</strong>得到，称之为<strong>经验熵</strong>。</p><h3 id="条件熵-amp-经验条件熵"><a href="#条件熵-amp-经验条件熵" class="headerlink" title="条件熵&amp;经验条件熵"></a>条件熵&amp;经验条件熵</h3><p><strong>条件熵</strong>（Conditional Entropy）</p><p>设随机变量$X$和$Y$的联合分布为<br>$$<br>P(X=x_i, Y=y_j) = p_{ij}, i=1,2,\cdots,n;j=1,2,\cdots,m<br>$$<br><strong>条件熵</strong>$H(Y|X)$表示已知随机变量$X$的条件下随机变量$Y$的不确定性<br>$$<br>H(Y|X) = \sum_{i=1}^n [ P(X=x_i) \cdot H(Y|X=x_i) ]<br>$$<br>如果随机变量$X$和$Y$独立，则$H(Y|X=x_i)=H(Y)$，此时条件熵<br>$$<br>H(Y|X) =  \sum_{i=1}^n [ P(X=x_i) \cdot H(Y) ] = H(Y)<br>$$<br>如果随机变量$Y$的<strong>条件熵</strong>通过<strong>极大似然估计</strong>得到，称之为<strong>经验条件熵</strong>。</p><p><strong>经验</strong>之意，即从观察数据中进行推断。</p><p>我们将随机变量Y的熵与已知X条件下Y的条件熵的差称之为<strong>互信息</strong>（Mutual Information）。</p><h3 id="信息增益-1"><a href="#信息增益-1" class="headerlink" title="信息增益"></a>信息增益</h3><p><strong>信息增益</strong>（Information Gain）指，当得知<strong>特征</strong>$X$的信息时，<strong>类</strong>$Y$不确定性减少的程度。</p><p>特征A对训练数据集D的<strong>信息增益</strong>为<br>$$<br>g(D,A) = H(D) - H(D|A)<br>$$<br>决策树中<strong>信息增益</strong>的概念就相当于训练数据集中<strong>类</strong>与<strong>特征</strong>的<strong>互信息</strong>。</p><p>训练数据集中不同的特征具有不同的<strong>信息增益</strong>，信息增益较大的特征具有更强的分类能力。</p><p>计算<strong>信息增益</strong>举例：<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/11.png" alt=""></p><p>类别的先验分布：$P(Y=是)=9/15=3/5$, $P(Y=否)=9/15=2/5$</p><p>类别的熵：$H(Y)=-3/5\log3/5-2/5\log2/5 = 0.971$</p><p>该训练数据集有4个特征：年龄、有工作、有自己的房子、信贷情况，分别用A、B、C、D表示。</p><p>以年龄为例计算其对训练数据集的<strong>信息增益</strong>：</p><ol><li><p>随机变量取值数值化（有序分类）：青年 $\to$ 1, 中年 $\to$ 2，老年 $\to$ 3</p></li><li><p>年龄的先验分布: $P(A=1)=P(A=2)=P(A=3)=1/3$</p></li><li><p>训练数据集D在年龄A已知时的条件概率分布：<br>$$<br>\begin{split}<br>P(Y=0|A=1)=3/5, P(Y=1|A=1)=2/5 \\<br>P(Y=0|A=2)=2/5, P(Y=1|A=2)=3/5 \\<br>P(Y=0|A=3)=1/5, P(Y=1|A=3)=4/5<br>\end{split}<br>$$<br>此时<br>$$<br>\begin{split}<br>H(Y|A=1) &amp;= - 3/5 \log_2 3/5 - 2/5 \log_2 2/5 = 0.9709506 \\<br>H(Y|A=2) &amp;= - 2/5 \log_2 2/5 - 3/5 \log_2 3/5 = 0.9709506 \\<br>H(Y|A=3) &amp;= - 1/5 \log_2 1/5 - 4/5 \log_2 4/5 = 0.7219281<br>\end{split}<br>$$</p></li></ol><ol start="4"><li><p>训练数据集D在年龄A已知时的条件熵：<br>$$<br>\begin{split}<br>H(Y|A) &amp;= P(A=1)H(Y|A=1) + P(A=2)H(Y|A=2) + P(A=3)H(Y|A=3) \\<br>&amp;= 1/3 \times 0.9709506 + 1/3 \times 0.9709506 + 1/3 \times 0.7219281 \\<br>&amp;= 0.8879431 \\<br>\end{split}<br>$$</p></li><li><p>信息增益<br> $$<br> \begin{split}<br> g(Y,A) &amp;= H(Y) - H(Y|A) \\<br> &amp;= 0.971 - 0.8879431 \\<br> &amp;= 0.083<br> \end{split}<br> $$<br> 同理得<br> $$<br> \begin{split}<br> g(Y,B) &amp;= 0.324 \\<br> g(Y,C) &amp;= 0.420 \\<br> g(Y,D) &amp;= 0.363<br> \end{split}<br> $$<br> 经过比较，特征C（有自己的房子）对训练数据集的<strong>信息增益</strong>最大，所以选择特征C作为最优的分类特征。</p></li></ol><h2 id="信息增益比"><a href="#信息增益比" class="headerlink" title="信息增益比"></a>信息增益比</h2><h3 id="信息增益的偏向性"><a href="#信息增益的偏向性" class="headerlink" title="信息增益的偏向性"></a>信息增益的偏向性</h3><p>根据信息增益的定义$H(D,A)=H(D)-H(D|A)$，如果数据集D中某个特征A的采样值为恒定常数，那么$H(D|A)=0$，即$H(D,A)=H(D)$，此时特征A对数据集D的信息增益达到最大值——D的熵值。那么我们应该选择特征A作为最优划分特征吗？显然不。这是<strong>信息增益</strong>在描述采样值为常数的特征时的弊端。除此之外，<strong>信息增益</strong>在计算连续型随机变量时也会遇到不小的问题。</p><p>所以<strong>信息增益</strong>适合于计算离散特征，并且该随机变量取值的采样数不宜过少。</p><h3 id="信息增益的相对性"><a href="#信息增益的相对性" class="headerlink" title="信息增益的相对性"></a>信息增益的相对性</h3><p>所谓的<strong>信息增益</strong>，字面意思就是确定性的增加量，这个确定性的增加是相对数据集D的熵的，这意味着，D的熵越大，信息增益就可能越大；反之越小。</p><h3 id="信息增益比的定义"><a href="#信息增益比的定义" class="headerlink" title="信息增益比的定义"></a>信息增益比的定义</h3><p>于是，我们将信息增益除以数据集的熵，用相对的确定性增量来描述最优分类特征：<br>$$<br>g_R(D,A) = \frac{g(D,A)}{H(D)} = \frac{H(D)-H(D|A)}{H(D)} = 1 - \frac{H(D|A)}{H(D)}<br>$$</p><h1 id="决策树的生成"><a href="#决策树的生成" class="headerlink" title="决策树的生成"></a>决策树的生成</h1><p>决策树学习的两个经典算法：ID3算法、C4.5算法。</p><p>生成算法只能用来生成树，十分容易过拟合。</p><p>生成的树需要进行剪枝，去拟合。</p><h2 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h2><p>算法核心是在决策树的各个节点应用<strong>信息增益</strong>的准则选择特征。</p><p>根据<strong>信息增益</strong>选择特征的方法还是属于极大似然。</p><p><strong>&gt; ID3算法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CONST 信息增益阈值</span><br><span class="line">DEF ID3算法(数据集D, 特征集合A):</span><br><span class="line">    IF D中所有样本属于同一类C:</span><br><span class="line">        T为单节点树，将C作为该节点的类标记，返回T</span><br><span class="line">    ELSE IF A为空：</span><br><span class="line">        T为单节点树，将D中样本数最多的那个类作为该节点的类标记，返回T</span><br><span class="line">    ELSE:</span><br><span class="line">        计算特征集合A中各个特征对数据集D的信息增益，确定信息增益最大的特征Ag</span><br><span class="line">    IF Ag &lt; 信息增益阈值:</span><br><span class="line">        T为单节点树，将D中样本数最多的那个类作为该节点的类标记，返回T</span><br><span class="line">    ELSE:</span><br><span class="line">        FOR 采样值v IN 特征Ag中的所有采样值的集合:</span><br><span class="line">            从数据集D中划分出特征Ag值为v的子集Dv</span><br><span class="line">            T的一个子节点 = 递归调用 ID3算法(数据集Dv, 特征集合&#123;A-Ag&#125;)</span><br><span class="line">        返回T</span><br></pre></td></tr></table></figure><h2 id="C4-5算法"><a href="#C4-5算法" class="headerlink" title="C4.5算法"></a>C4.5算法</h2><p>将ID3算法中的 <strong>信息增益</strong> 替换为 <strong>信息增益比</strong> 即可。</p><p>为什么叫做C4.5算法而不叫ID4算法呢？据说作者发表完ID3算法后此领域过于火爆导致ID4、ID5等名字有人用了。</p><h1 id="决策树的剪枝"><a href="#决策树的剪枝" class="headerlink" title="决策树的剪枝"></a>决策树的剪枝</h1><p>前面提到，决策树的生成算法倾向于拟合训练数据，极易出现过拟合。</p><p><strong>剪枝</strong>（Pruning） 即考虑模型的复杂度，对生成的树进行简化。</p><p><strong>剪枝</strong> 通过极小化 <strong>损失函数</strong> 实现。</p><p><strong>&gt; 剪枝原理</strong></p><p>假设：树$T$的叶子节点的个数为$|T|$，$t$是树$T$的一个叶子节点，该叶子节点有$N_t$个样本点，其中属于第$k$类的样本点有$N_{tk}$个。</p><p>则，叶子节点$t$的经验熵为<br>$$<br>H_t(T) = - \sum_{k=1}^K \frac{N_{tk}}{N_t} \log \frac{N_{tk}}{N_t}<br>$$<br>决策树学习的损失函数为<br>$$<br>L_\alpha(T) = \sum_{t=1}^{|T|} N_t H_t(T) + \alpha |T|<br>$$<br>每个叶子节点的样本数越少、经验熵越小，同时总叶子节点数越少，损失越小。</p><p>这里损失函数由两部分组成：</p><ol><li>决策树模型对数据集的预测误差</li></ol><p>$$<br>L(T) = \sum_{t=1}^{|T|} N_t H_t(T) = - \sum_{t=1}^{|T|} \sum_{k=1}^K N_{tk} \log \frac{N_{tk}}{N_t}<br>$$</p><ol start="2"><li>决策树模型的模型复杂度</li></ol><p>$$<br>C(T) = |T|<br>$$</p><p>剪枝的具体实现如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/13.jpg" alt=""></p><p>剪枝前的叶子节点集合为{A,B,C,D}，计算其损失函数$L_1$</p><p>剪枝后的叶子节点集合为{E,C,D}，计算其损失函数$L_2$</p><p>因为$L_2 &lt; L_1$，所以我们剪掉以E为根节点的子树，E的 <strong>类别</strong> 标记为样本数最多的那一个。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/16.jpg" alt=""></p><p>CART算法见&lt; <a href="http://localhost:4002/ml/20191122-edcd.html" target="_blank" rel="noopener">http://localhost:4002/ml/20191122-edcd.html</a> &gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;决策树学习通常包含三个步骤：特征选择、决策树的生成、决策树的修剪。&lt;/p&gt;
&lt;p&gt;决策树学习的思想主要来源于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由Quinlan提出的&lt;strong&gt;ID3&lt;/strong&gt;算法和&lt;strong&gt;C4.5&lt;/strong&gt;算法&lt;/li&gt;
&lt;li&gt;由Breiman等人提出的&lt;strong&gt;CART&lt;/strong&gt;算法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ml" scheme="http://chenyin.top/categories/ml/"/>
    
    
      <category term="决策树" scheme="http://chenyin.top/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>R读取内容为空的文件报错怎么办？</title>
    <link href="http://chenyin.top/R/20191112-e00c.html"/>
    <id>http://chenyin.top/R/20191112-e00c.html</id>
    <published>2019-11-12T07:29:42.000Z</published>
    <updated>2019-11-12T07:37:08.372Z</updated>
    
    <content type="html"><![CDATA[<p>一般我们用R处理的多半都是表格文件，但是当文件内容为空时（准确的描述应该是没有有效的表格内容，这意味着可以有许多<code>#</code>注释的行），直接使用<code>read.table</code>函数读取文件会报错。</p><a id="more"></a><p>报错如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; read.table(<span class="string">'kws_included.txt'</span>, sep = <span class="string">','</span>, stringsAsFactors = <span class="literal">F</span>)</span><br><span class="line">Error <span class="keyword">in</span> read.table(<span class="string">"kws_included.txt"</span>, sep = <span class="string">","</span>, stringsAsFactors = <span class="literal">F</span>) : </span><br><span class="line">  输入中没有多出的行</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong></p><p>用<code>try(...)</code>函数捕获异常，只是R中的<code>try(...)</code>函数功能比较简单，但是用来判断一下语句执行是否报错还是没有什么问题的。用法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = <span class="keyword">try</span>(read.table(<span class="string">'kws_included.txt'</span>, sep = <span class="string">','</span>, stringsAsFactors = <span class="literal">F</span>), silent = <span class="literal">T</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'try-error'</span> %<span class="keyword">in</span>% class(df)) <span class="keyword">...</span> <span class="comment"># 语句执行出错</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">...</span> <span class="comment"># 语句执行1正常</span></span><br></pre></td></tr></table></figure><p><strong>其他解决办法</strong>：</p><p>未知~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般我们用R处理的多半都是表格文件，但是当文件内容为空时（准确的描述应该是没有有效的表格内容，这意味着可以有许多&lt;code&gt;#&lt;/code&gt;注释的行），直接使用&lt;code&gt;read.table&lt;/code&gt;函数读取文件会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://chenyin.top/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>使用parallel包的apply并行计算函数</title>
    <link href="http://chenyin.top/R/20191112-d180.html"/>
    <id>http://chenyin.top/R/20191112-d180.html</id>
    <published>2019-11-12T07:24:12.000Z</published>
    <updated>2019-11-12T07:26:07.622Z</updated>
    
    <content type="html"><![CDATA[<p><code>apply</code>系列的函数（例如常见的<code>lapply</code>, <code>sapply</code>）都是可以并行计算的，这在计算单位数较多且每个计算单位非常耗时时，能大大加快计算速度。这里简单记录内建的<code>parallel</code>包如何进行并行计算。</p><a id="more"></a><p><strong>1. 加载R包</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(parallel)</span><br></pre></td></tr></table></figure><p><strong>2. 查看当前节点可用CPU数，确定任务所需CPU数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detectCores()</span><br></pre></td></tr></table></figure><p><strong>3. 指定任务所需CPU数，初始化资源调度器</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 这里假设调度10核</span></span><br><span class="line">mkc = makeCluster(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>4. 运行主程序</strong></p><p>并行运算的<code>apply</code>家族的函数与原函数都是一一对应的，如</p><ul><li><code>apply</code> $\to$ <code>parApply</code></li><li><code>lapply</code> $\to$ <code>parLapply</code></li><li><code>sapply</code> $\to$ <code>parSapply</code></li></ul><p>代码示例如下：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs = parLapply(mkc, xs, func()&#123;<span class="keyword">...</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>注意，<code>func(){...}</code>中的所有第三方包都需要在函数内导入，因为<code>parLapply</code>会启动R的额外进程，在新的进程里面不会自动导入当前环境中已经导入的第三方包。</p><p><strong>4. 关闭资源调度器</strong></p><p>结束并行运算后一定要关闭资源调度器<code>mkc</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopCluster(mkc)</span><br></pre></td></tr></table></figure><p>不然<code>top</code>之后你会发现自己刷屏了~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;apply&lt;/code&gt;系列的函数（例如常见的&lt;code&gt;lapply&lt;/code&gt;, &lt;code&gt;sapply&lt;/code&gt;）都是可以并行计算的，这在计算单位数较多且每个计算单位非常耗时时，能大大加快计算速度。这里简单记录内建的&lt;code&gt;parallel&lt;/code&gt;包如何进行并行计算。&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://chenyin.top/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>从因变量类型对回归分类</title>
    <link href="http://chenyin.top/stat/20191017-ca7e.html"/>
    <id>http://chenyin.top/stat/20191017-ca7e.html</id>
    <published>2019-10-16T16:26:37.000Z</published>
    <updated>2019-10-16T16:30:30.892Z</updated>
    
    <content type="html"><![CDATA[<p>假设自变量是$X$，因变量是$Y$。按照$Y$的数据类型将回归分为以下几种：</p><a id="more"></a><p><strong>(一) $Y$是数值资料</strong></p><ol><li><p>$Y$是连续数据：普通线性回归</p></li><li><p>$Y$是计数数据：计数回归</p><ul><li>泊松回归</li><li>负二项回归</li><li>零膨胀泊松回归等</li></ul></li></ol><blockquote><p><strong>计数数据</strong>：对某些对象计数的数据，取值为自然数</p></blockquote><ol start="3"><li>$Y$是生存数据：生存回归</li></ol><blockquote><p><strong>生存数据</strong>：生存数据表征了对象从”出生”到”死亡”的<strong>生存时间</strong>，本质上还是一个连续型数据。但是当我们进行分析时对象往往还未”死亡”，我们不能获得准确的生存时间，但是我们能获得该对象的最小生存时间（即到记录数据为止时的生存时间），记录数据时以”60d+”这种形式表示，意味着该对象的最小生存时间为60天。有趣的是，如果我们能获得所有样本的准确生存时间，生存回归本质上就是普通线性回归。</p></blockquote><p><strong>(二) $Y$是分类资料</strong></p><ol><li><p>$Y$是二值数据：0-1回归</p><ul><li>Logistic Regression</li><li>Probit Regression</li></ul></li><li><p>$Y$是定序数据：定序回归</p></li></ol><blockquote><p><strong>定序数据</strong>：数值无意义（意味着不能进行代数运算），但是顺序很重要</p></blockquote><hr><p>注：本文只是简单总结记录方便查阅，<a href="https://cosx.org/2016/06/five-useful-regression-models/" target="_blank" rel="noopener">欲览全文，查看此处</a>，尊重原创！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设自变量是$X$，因变量是$Y$。按照$Y$的数据类型将回归分为以下几种：&lt;/p&gt;
    
    </summary>
    
      <category term="stat" scheme="http://chenyin.top/categories/stat/"/>
    
    
  </entry>
  
  <entry>
    <title>编写bash脚本时怎么方便的测试代码</title>
    <link href="http://chenyin.top/os/20190928-1314.html"/>
    <id>http://chenyin.top/os/20190928-1314.html</id>
    <published>2019-09-28T03:01:25.000Z</published>
    <updated>2019-09-28T03:02:18.596Z</updated>
    
    <content type="html"><![CDATA[<p>编写bash脚本时怎么方便的测试代码？</p><a id="more"></a><p><code>Esc Shift :/; wq</code> 太麻烦了</p><p>当然前提是能频繁测试的代码</p><p>解决办法：开两个窗口，一个vim编辑并保存，一个通过<code>watch -n 2 &quot;sh test.sh ...&quot;</code>频繁刷新执行test.sh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写bash脚本时怎么方便的测试代码？&lt;/p&gt;
    
    </summary>
    
      <category term="os" scheme="http://chenyin.top/categories/os/"/>
    
    
  </entry>
  
  <entry>
    <title>screen-SSH终端离线持久化工具</title>
    <link href="http://chenyin.top/os/20190911-89a2.html"/>
    <id>http://chenyin.top/os/20190911-89a2.html</id>
    <published>2019-09-11T03:03:26.000Z</published>
    <updated>2019-11-08T08:43:11.960Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们使用自己的电脑远程连接服务器（例如SSH）进行工作，某些任务我们希望放在<strong>前台</strong>运行但是其运行时间可能很长，如果程序运行期间我们需要断开连接，一般情况下这个前台任务也会随之中断。例如R交互式环境中的程序。screen工具就是为了解决这样一个问题。</p><a id="more"></a><p>screen工具不仅可以保证在断开远程连接的情况下继续运行当前任务，还可以实现单个<strong>实际窗口</strong>中操纵多个<strong>工作窗口</strong>。简单来说，新建一个<strong>screen会话</strong>会创建一个主进程，这个主进程对应着一个会话窗口。这个主进程是存储在服务器上的，它不受我们连接服务器的SSH进程的影响，因此当我们断开SSH连接时这个进程依旧存在，在下次重新连接服务器时依然可以恢复。而我们连接服务器时的工作环境中的任务实际上受SSH连接进程的影响，当我们断开连接时相关联的任务自然而然也就停止了。（PS: 下面提到的<strong>会话</strong>就是指一个虚拟窗口）</p><p>screen的用法如下：</p><ul><li><strong>怎么查询当前服务器中建立了哪些会话？</strong> <code>screen -ls</code> 即可</li><li><strong>怎么建立一个会话？</strong> <code>screen -S &lt;SOCKNAME&gt;</code> 可以建立一个虚拟会话，查看会话信息如下：<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/09/01.png" alt="screen_info_1"><br>由上可知，一个虚拟窗口的ID标识由<strong>进程号PID</strong>和<strong>会话名（SOCKNAME）</strong>组成，我们可以通过这两个信息恢复会话。除了 <code>screen -s ...</code> 之外，<code>screen -R ...</code> 也能建立一个新的虚拟窗口，与<code>-S</code>不同的是，<code>-R</code>是去尝试着恢复一个已有的会话，如果在已有会话中没有找到，他就会建立一个新的会话，跟“若目录不存在则创建目录”是一个意思。</li><li><strong>怎么恢复一个会话？</strong> <code>screen -r ...</code>可以恢复一个会话，当会话不存在时会报错；<code>screen -R ...</code>也能恢复一个会话，但是当会话不存在时会创建一个新的会话。注意：同一时间一个会话只能在一个实际窗口中打开（例如你可能会在不同的电脑上连接服务器或者在一台电脑上打开多个SSH会话）。当会话被挂起时（意味着此时没有窗口打开这个会话），会话信息中每个ID后面会标识出<code>(Detached)</code>，此时意味着你可以在当前窗口中打开这个会话继续工作；如果标识的是<code>(Attached)</code>，那么标识这个虚拟窗口已经在其它的地方被打开了，你将不能打开这个会话。如果你确定这属于异常情况，你可以使用<code>screen -d ...</code>强制挂起一个会话，此时状态会变成<code>(Detached)</code>，这表示你单方面终止了在某个未知地方打开的虚拟窗口。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/09/02.png" alt="screen_info_2"><br>screen对你命令传入的会话名与会话ID进行匹配，例如你可以：<ul><li>只指定进程号PID，例如<code>screen -r 23288</code></li><li>在不引起歧义的情况下只指定会话名的首字母或前几个字母，例如<code>screen -r n</code>将恢复<code>23288.net</code></li><li>当然你也可以传入完整的<code>&lt;SOCKNAME&gt;</code>或者<code>&lt;PID&gt;.&lt;SOCKNAME&gt;</code></li></ul></li><li><strong>怎么退出并挂起当前会话？</strong> 依次摁下<code>Ctrl A D</code>三个键即可退出并挂起当前会话</li><li><strong>怎么挂起当前窗口中创建的指定会话？</strong>上面已经提到了，<code>screen -d ...</code>可强制挂起指定会话</li><li><strong>怎么删除一个会话？</strong>请确认你的虚拟窗口完成使命后再删除它，不然追悔莫及。<ul><li>直接<code>kill &lt;PID&gt;</code>可删除相应的会话</li><li>摁下<code>Ctrl A K D</code>可删除当前会话中的所有任务并退出当前会话</li></ul></li></ul><p>总结一下，screen常用的命令有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br><span class="line">screen -r</span><br><span class="line">screen -R</span><br><span class="line">screen -S</span><br><span class="line">screen -d</span><br><span class="line">Ctrl + A + D 组合键</span><br><span class="line">Ctrl + A + K + D 组合键</span><br><span class="line">kill &lt;PID&gt;</span><br></pre></td></tr></table></figure><p>下面是我设置的alias（使用极其频繁，根据奥卡姆剃刀原则，越频繁越简洁）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> sr=<span class="string">"screen -r"</span></span><br><span class="line"><span class="built_in">alias</span> sl=<span class="string">"screen -ls"</span></span><br><span class="line"><span class="comment"># 还可以设置几个快捷窗口</span></span><br><span class="line"><span class="built_in">alias</span> srq=<span class="string">'sr q'</span></span><br><span class="line"><span class="built_in">alias</span> srr=<span class="string">'sr r'</span></span><br></pre></td></tr></table></figure><p>其它命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 重命名已经存在的会话名称</span></span><br><span class="line">screen -S &lt;OLDNAME&gt; -X sessionname &lt;NEWNAME&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们使用自己的电脑远程连接服务器（例如SSH）进行工作，某些任务我们希望放在&lt;strong&gt;前台&lt;/strong&gt;运行但是其运行时间可能很长，如果程序运行期间我们需要断开连接，一般情况下这个前台任务也会随之中断。例如R交互式环境中的程序。screen工具就是为了解决这样一个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="os" scheme="http://chenyin.top/categories/os/"/>
    
    
      <category term="Linux实用命令" scheme="http://chenyin.top/tags/Linux%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>C++中与号和星号的再理解</title>
    <link href="http://chenyin.top/Cpp/20190713-1536.html"/>
    <id>http://chenyin.top/Cpp/20190713-1536.html</id>
    <published>2019-07-13T07:36:39.000Z</published>
    <updated>2020-07-10T06:57:35.191Z</updated>
    
    <content type="html"><![CDATA[<p>大学初识<strong>指针</strong>和<strong>引用</strong>，一知半解。最近想重新学习C++，发现自己对指针和引用的了解透彻了许多，遂记之以温习。</p><a id="more"></a><p><code>&amp;</code>和<code>*</code>实际上各有两种含义：出现在<strong>定义</strong>中时，作为<strong>运算符</strong>时</p><ul><li><code>&amp;</code>用于定义往往只在函数形参中使用，表示<strong>引用</strong>，如<code>void func (int&amp; x, int&amp; y) ...</code></li><li><code>&amp;</code>作为运算符表示<strong>取地址</strong>操作，例如<code>int* p = &amp;x</code></li><li><code>*</code>用于定义中时表示定义一个指针型变量，例如<code>int* p</code>或者<code>int *p</code></li><li><code>*</code>作为运算符时表示<strong>间接取值</strong>，即通过地址间接而不是通过变量名直接获取值，如<code>(*p)++</code></li></ul><h1 id="作为运算符"><a href="#作为运算符" class="headerlink" title="作为运算符"></a>作为运算符</h1><p><code>&amp;</code>和<code>*</code>分别称之为<strong>取地址运算符</strong>和<strong>间接取值运算符</strong>。</p><p><code>&amp;</code>是一个<strong>一元运算符</strong>，是一个<strong>运算符</strong>，它的作用是取出<strong>变量的地址</strong>，取出的是<strong>地址</strong>，地址的类型会带上<code>*</code> ，例如<code>int</code>型的变量<code>x</code>的地址（例如<code>0x61fe44</code>）的<strong>值</strong>的类型就是<code>int*</code>，这个值不能被保存到<code>int</code>类型中（因为<code>int</code>和<code>int*</code>是两种不同的数据类型），那么这个地址值怎么保存呢？这里定义了<strong>指针</strong>类型用于保存地址的值。上面例子中我们可以定义<strong>int指针类型</strong>用于保存int类型的变量的地址（通过<code>&amp;</code>获取），即<code>int *p = &amp;x</code>。其实<code>int *p</code>这种写法容易引起误解，<code>int* p</code>就明显一点，但是前者似乎更通用。上面的定义已经表明了：<code>p</code> 是一个<code>int*</code>类型（即int指针类型）,它保存的是变量<code>x</code>的内存地址，因此可以直接通过<strong>指针</strong>访问变量<code>x</code>存储的值，方法是<code>*p</code>，所以实际上<code>*p</code>和<code>x</code>都能访问到相应地址块上的值，这里<code>*</code>使得我们可以间接通过地址<code>p</code>访问值，所以叫<strong>间接寻址运算符</strong>。这里注意体会<code>int*</code>中的<code>*</code>和<code>*p</code>中的<code>*</code>意义是不完全相同的：前者表明这是变量（<code>p</code>）是一个指针型变量，后者是一种运算符，所谓<strong>运算</strong>，就从一个状态出发得到新的状态，这里就是指从<strong>地址</strong>出发计算得到了<strong>值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> *p; <span class="comment">// 写作 int* p可能更好理解点</span></span><br><span class="line">p = &amp;x; <span class="comment">// 这两步可以直接写作 int *p = &amp;x，写成 int* p = &amp;x 可能更加容易理解</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x; <span class="comment">// 1000</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p; <span class="comment">// 类似于 0x61fe44 这样的表示地址的值，其类型为 int*</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p; <span class="comment">// 1000，对地址进行*运算得到值</span></span><br></pre></td></tr></table></figure><h1 id="用于参数定义"><a href="#用于参数定义" class="headerlink" title="用于参数定义"></a>用于参数定义</h1><p><code>*</code>用于参数定义时表示定义一个指针型变量，这十分容易理解。</p><p>那么<code>&amp;</code>用于参数定义时表示什么意思呢？<strong>引用</strong>！</p><p>下面以常见的三种函数参数传递方式为例说说<strong>引用</strong>的用法。</p><p><strong>参数传递</strong>有三种常见方式：值传递、指针传递、引用传递</p><p>不得不说时隔这么多年，我总算理解了三种参数传递的方式的基本区别，真笨。</p><p>假设我们现在需要对一个整型变量<code>x</code>进行加1操作，三种参数传递的解决方案如下：</p><ol><li><p><strong>值传递</strong>：值传递即按照普通方式定义形参，此时会对变量进行复制，以保证函数内部不会修改实参的任何信息，这样的参数传递方式当然不能直接修改实参的值，它返回的实际上是一块新的内存区域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span> <span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="keyword">return</span> ++v;&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = f(x);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x; <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指针传递</strong>：指针传递实际上传递的不是变量名称，而是变量指向的内存区域，这个区域怎么表示呢？当然用一个地址来表示啦。这个地址怎么获取呢？当然是用 <strong>取地址运算符&amp;</strong> 啦。对于指针传递来说，形参定义为一个<strong>指针型</strong>变量，而实参也是一个指针型变量（地址），所以指针传递将会直接修改原内存块的值，这导致函数执行后我们再通过相同的方式取访问变量（实际上是访问变量指向的内存块的值），它的值已经发生了改变</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addone</span> <span class="params">(<span class="keyword">int</span>* p)</span> </span>&#123;(*p)++;&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x; <span class="comment">// 1</span></span><br><span class="line">addone(&amp;x);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引用传递</strong>：指针传递实际上并不优雅，它直接让程序接触到了内存地址。与其如此，我们为什么不直接定义一个类似于<strong>值传递</strong>中的但是又不用对实参进行复制的形参呢？这个形参本质上还是一个<strong>非指针数据类型</strong>，但是它能直接修改实参的值，就相当于给实参定义了一个<strong>别名</strong>，不论通过实参本身修改值还是通过这个别名修改值都是等价的。这种方式称之为<strong>引用</strong>，通过<code>&amp;</code>实现，<code>&amp;</code>作为<strong>引用</strong>含义时常常出现在函数形参中（<code>&amp;</code>还可作为<strong>运算符</strong>使用），它表示形参实际上是实参的一个别名，对形参的任何修改都将等价于对实参的修改，例如形参<code>int&amp; x</code>定义的就是对某个整形实参的<strong>引用</strong>，此时传递的实参也不需要像<strong>指针传递</strong>那样需要先获取地址，程序本身规避了对地址进行直接操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addone</span> <span class="params">(<span class="keyword">int</span>&amp; v)</span> </span>&#123;++v;&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x; <span class="comment">// 1</span></span><br><span class="line">addone(x);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ol><p><code>*</code>和<code>&amp;</code>的其它高级用法以后遇到了再温习吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学初识&lt;strong&gt;指针&lt;/strong&gt;和&lt;strong&gt;引用&lt;/strong&gt;，一知半解。最近想重新学习C++，发现自己对指针和引用的了解透彻了许多，遂记之以温习。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://chenyin.top/categories/Cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux三个常见的压缩打包命令</title>
    <link href="http://chenyin.top/os/20190515-feae.html"/>
    <id>http://chenyin.top/os/20190515-feae.html</id>
    <published>2019-05-15T01:32:02.000Z</published>
    <updated>2019-09-15T02:52:16.040Z</updated>
    
    <content type="html"><![CDATA[<p>常见压缩文件扩展名</p><table><thead><tr><th style="text-align:center">扩展名</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">*.gz</td><td style="text-align:center">gzip压缩文件</td></tr><tr><td style="text-align:center">*.bz2</td><td style="text-align:center">bzip2压缩文件</td></tr><tr><td style="text-align:center">*.tar</td><td style="text-align:center">tar打包的文件，没有压缩</td></tr><tr><td style="text-align:center">*.tar.gz</td><td style="text-align:center">tar打包文件。经过gzip压缩</td></tr><tr><td style="text-align:center">*.tar.bz2</td><td style="text-align:center">tar打包文件，经过bzip2压缩</td></tr></tbody></table><a id="more"></a><h1 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h1><p>压缩并<strong>删除</strong>本地文件：<code>gzip -v SOURCE</code></p><p>压缩但<strong>保留</strong>本地文件：<code>gzip -c SOURCE &gt; TARGET</code></p><p>解压缩：<code>gzip -d SOURCE</code></p><p>不解压缩但查看文件内容：<code>zcat SOURCE</code></p><h1 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h1><p>取代gzip，压缩比例高于gzip</p><p>压缩并<strong>删除</strong>本地文件：<code>bzip2 -zv SOURCE</code></p><p>压缩但<strong>保留</strong>本地文件：<code>bzip2 -kv SOURCE</code></p><p>解压缩：<code>bzip2 -d SOURCE</code></p><p>不解压缩但查看文件内容：<code>bzcat SOURCE</code></p><h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><p>将（多个）文件打包（压缩）成一个文件</p><p>压缩 <code>-c</code>：</p><ul><li>创建bzip2压缩文件：<code>tar -jcvf TARGET.tar.bz2 SOURCE</code></li><li>创建gzip压缩文件：<code>tar -zcvf TARGET.tar.gz SOURCE</code></li></ul><p>不解压缩查看文件列表 <code>-t</code>：</p><ul><li><code>tar -jtvf SOUTCE.tar.bz2</code></li><li><code>tar -ztvf SOURCE.tar.gz</code></li></ul><p>解压缩 <code>-x</code>：</p><ul><li><code>tar -jxvf SOURCE.tar.bz2</code></li><li><code>tar -zxvf SOURCE.tar.gz</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见压缩文件扩展名&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;扩展名&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*.gz&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;gzip压缩文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*.bz2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bzip2压缩文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*.tar&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;tar打包的文件，没有压缩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*.tar.gz&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;tar打包文件。经过gzip压缩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*.tar.bz2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;tar打包文件，经过bzip2压缩&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="os" scheme="http://chenyin.top/categories/os/"/>
    
    
      <category term="Linux实用命令" scheme="http://chenyin.top/tags/Linux%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>markdown奇淫技巧</title>
    <link href="http://chenyin.top/cargo/20190514-71e.html"/>
    <id>http://chenyin.top/cargo/20190514-71e.html</id>
    <published>2019-05-14T03:13:16.000Z</published>
    <updated>2019-05-14T03:19:02.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生表格中插入包含-的代码"><a href="#原生表格中插入包含-的代码" class="headerlink" title="原生表格中插入包含 | 的代码"></a>原生表格中插入包含 <code>|</code> 的代码</h1><p>由于markdown原生表格使用”|”分隔列，在表格中直接输入”|”会使表格结构解析错误。</p><p>下面这种写法可以使表格正常解析：</p><table><thead><tr><th style="text-align:center">样式</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center"><code>A &#124; B</code></td><td style="text-align:center"><code>&lt;code&gt;A &amp;#124; B&lt;/code&gt;</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原生表格中插入包含-的代码&quot;&gt;&lt;a href=&quot;#原生表格中插入包含-的代码&quot; class=&quot;headerlink&quot; title=&quot;原生表格中插入包含 | 的代码&quot;&gt;&lt;/a&gt;原生表格中插入包含 &lt;code&gt;|&lt;/code&gt; 的代码&lt;/h1&gt;&lt;p&gt;由于markdow
      
    
    </summary>
    
      <category term="cargo" scheme="http://chenyin.top/categories/cargo/"/>
    
    
  </entry>
  
  <entry>
    <title>R模型公式</title>
    <link href="http://chenyin.top/R/20190514-95ad.html"/>
    <id>http://chenyin.top/R/20190514-95ad.html</id>
    <published>2019-05-14T03:00:25.000Z</published>
    <updated>2019-11-26T09:36:24.041Z</updated>
    
    <content type="html"><![CDATA[<p>在进行 <strong>方差分析</strong>（ANOVA）或者 <strong>回归分析</strong> 时我们常常会遇到 <strong>~</strong> 操作符，这对R新手来说实在是难以理解，遂查查<a href="http://ww2.coastal.edu/kingw/statistics/R-tutorials/formulae.html" target="_blank" rel="noopener">文档</a>整理整理。<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/17.jpg" alt=""></p><a id="more"></a><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aov(formula, data = <span class="literal">NULL</span>, projections = <span class="literal">FALSE</span>, qr = <span class="literal">TRUE</span>, contrasts = <span class="literal">NULL</span>, <span class="keyword">...</span>)</span><br><span class="line"></span><br><span class="line">lm(formula, data, subset, weights, na.action, method = <span class="string">"qr"</span>, model = <span class="literal">TRUE</span>, x = <span class="literal">FALSE</span>, y = <span class="literal">FALSE</span>, qr = <span class="literal">TRUE</span>, singular.ok = <span class="literal">TRUE</span>, contrasts = <span class="literal">NULL</span>, offset, <span class="keyword">...</span>)</span><br><span class="line"></span><br><span class="line">glm(formula, family = gaussian, data, weights, subset, na.action, start = <span class="literal">NULL</span>, etastart, mustart, offset, control = list(<span class="keyword">...</span>), model = <span class="literal">TRUE</span>, method = <span class="string">"glm.fit"</span>, x = <span class="literal">FALSE</span>, y = <span class="literal">TRUE</span>, singular.ok = <span class="literal">TRUE</span>, contrasts = <span class="literal">NULL</span>, <span class="keyword">...</span>)</span><br></pre></td></tr></table></figure><p>R函数例如 <code>aov()</code>, <code>lm()</code>, <code>glm()</code> 都提供了 <code>formula</code> 参数供用户定义将要进行的分析中涉及到的变量（反应变量、解释变量）。这个 <code>formula</code> 参数直接决定了R构建和测试的模型结构。<code>formula</code> 参数的基本格式为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response_variable[反应变量] ~ explanatory_variables[解释变量]</span><br></pre></td></tr></table></figure><p>上式中的波浪号（tilde）可以理解为“通过……建模”或者“是……的函数”。</p><p>上式的技巧多在于，如何书写解释变量。</p><p>最基础的回归分析的 <code>formula</code> 参数格式如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y ~ x</span><br></pre></td></tr></table></figure><p>上式中的”x” 称之为 <strong>解释变量</strong>（Explanatory Variable）或者 <strong>自变量</strong>（Independent Variable, IV）,”y”称之为 <strong>反应变量</strong>（Response Variable）或者 <strong>因变量</strong>（Dependent Variable, DV）。</p><p>如果还有其它的解释变量添加到表达式后面即可。下式表示构建两变量的多回归模型：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y ~ x + z</span><br></pre></td></tr></table></figure><p>类似于上面的式子我们称之为 <strong>模型公式</strong>（Model Formula），它将传递给 <code>formula</code> 参数。</p><p>如何书写正确优雅的模型公式是一件很有意思的事情……</p><p>尤其注意，我们在其它地方使用的数学运算符（例如四则运算符）在模型公式里都有新的含义，也就是说我们不能像读一般数学公式那样去阅读模型公式。</p><p>下面这张表列出了模型公式中常用符号的意义，我们可以直观地感受到它们与一般意义地显著差别：</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">例子</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>+</code></td><td style="text-align:center"><code>+ x</code></td><td style="text-align:center">包含了解释变量x</td></tr><tr><td style="text-align:center"><code>-</code></td><td style="text-align:center"><code>- x</code></td><td style="text-align:center">删除解释变量x（没太理解）</td></tr><tr><td style="text-align:center"><code>:</code></td><td style="text-align:center"><code>x : z</code></td><td style="text-align:center">包含了解释变量x和z间的互作</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center"><code>x * z</code></td><td style="text-align:center">包含了解释变量x和z，以及它们之间的互作</td></tr><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center"><code>x / z</code></td><td style="text-align:center">嵌套：包含了嵌套在x中的z</td></tr><tr><td style="text-align:center"><code>&#124;</code></td><td style="text-align:center"><code>x &#124; z</code></td><td style="text-align:center">条件：包含了给定z时的x</td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:center"><code>(u + v + w + z) ^ 3</code></td><td style="text-align:center">包含了四个变量，以及它们之间最多三个变量间的互作</td></tr><tr><td style="text-align:center"><code>poly</code></td><td style="text-align:center"><code>poly(x, 3)</code></td><td style="text-align:center">多项式回归：正交多项式</td></tr><tr><td style="text-align:center"><code>Error</code></td><td style="text-align:center"><code>Error(a/b)</code></td><td style="text-align:center">指定误差项</td></tr><tr><td style="text-align:center"><code>I</code></td><td style="text-align:center"><code>I(x*z)</code></td><td style="text-align:center"><code>I()</code> 中的表达式保留一般的数学意义，表示包含了x乘以z这个新变量</td></tr><tr><td style="text-align:center"><code>1</code> (数字)</td><td style="text-align:center"><code>- 1</code></td><td style="text-align:center">截距：删除截距，即通过原点回归</td></tr></tbody></table><p>同一个模型可以通过不同的公式表达：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model 1</span></span><br><span class="line">y ~ u + v + w + u:v + u:w + v:w + u:v:w</span><br><span class="line">y ~ u * v * w</span><br><span class="line">y ~ (u + v + w)^<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model 2</span></span><br><span class="line">y ~ u + v + w + u:v + v:w + v:w</span><br><span class="line">y ~ u * v * w - u:v:w</span><br><span class="line">y ~ (u + v + w)^<span class="number">2</span></span><br></pre></td></tr></table></figure><p>解释变量的属性（例如二值变量、分类变量、数值变量……）决定了模型的特性，例如对公式 <code>y ~ x + z</code>：</p><ul><li>如果x和y是两个分类变量，该公式表示方差分析[?]</li><li>如果x和y是两个数值变量，该公式表示多回归[?]</li><li>如果一个是数值变量一个是分类变量，则表示相关性分析[?]</li></ul><p><strong>关于 <code>Error()</code> 的一点见解</strong></p><p>略</p><!-- url -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进行 &lt;strong&gt;方差分析&lt;/strong&gt;（ANOVA）或者 &lt;strong&gt;回归分析&lt;/strong&gt; 时我们常常会遇到 &lt;strong&gt;~&lt;/strong&gt; 操作符，这对R新手来说实在是难以理解，遂查查&lt;a href=&quot;http://ww2.coastal.edu/kingw/statistics/R-tutorials/formulae.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;整理整理。&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/17.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://chenyin.top/categories/R/"/>
    
    
  </entry>
  
</feed>
