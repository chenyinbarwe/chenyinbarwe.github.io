<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阔落煮酒</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyin.top/"/>
  <updated>2020-10-22T06:57:43.012Z</updated>
  <id>http://chenyin.top/</id>
  
  <author>
    <name>Barwe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汉诺塔问题</title>
    <link href="http://chenyin.top/algo/20201022-e841.html"/>
    <id>http://chenyin.top/algo/20201022-e841.html</id>
    <published>2020-10-22T03:22:57.000Z</published>
    <updated>2020-10-22T06:57:43.012Z</updated>
    
    <content type="html"><![CDATA[<p><strong>从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去，期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数。</strong></p><a id="more"></a><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20201022112855233.png" alt="image-20201022112855233" style="zoom:80%;"></p><p>考虑最后可能的步骤：要想把 n 个圆盘从 A 移动到 C，在移动最大的圆盘时，C 上不能有任何圆盘，A上面只能有一个大圆盘，这就意味着其余的 n-1 个圆盘必须都位于 B 上面。此时我们只需要：将第 n 个圆盘从 A 移动到 C，再将 前 n-1 个圆盘从 B 移动到 C 即可，用函数可表示为：<br>$$<br>\begin{split}<br>\text{move}([1 \dots n], A, C) \ \Leftrightarrow \  &amp; \text{move}([1\dots n-1], A, B) \\</p><ul><li>\ &amp; \text{move}(n, A, C) \\</li><li>\ &amp; \text{move}([1\dots n-1], B, C)<br>\end{split}<br>$$<br>$\text{move}([1\dots n-1], A, B)$ 表示把前 $n-1$ 个圆盘从 A 移动到 B，它与把前 $n$ 个圆盘从 A 移动到 C 是类似的。后者需要借助 B，而前者需要借助于 C。特别地，当 $n=1$ 时，$\text{move}(1,\ast,\ast)$ 总是等于1。</li></ul><p>这是汉诺塔问题的递归解法，下面看一下时间复杂度：<br>$$<br>\begin{split}<br>T_n &amp;= T_{n-1} + 1 + T_{n-1} = 2T_{n-1} + 1 \\<br>&amp;= 2(2T_{n-2}+1)+1 = 2^2T_{n-2}+2+1 \\<br>&amp;= 2^2(2T_{n-3}+1)+3 = 2^3T_{n-3}+2^2+2+1 \\<br>&amp;\dots \\<br>&amp;= 2^{n-1}T_1 + 2^{n-2} + \dots + 2 + 1 \\<br>&amp;= 2^{n-1} + 2^{n-2} + \dots + 2 + 1<br>\end{split}<br>$$<br>显然这是一个指数级的时间复杂度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>, <span class="keyword">char</span>, <span class="keyword">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = move(<span class="number">5</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Total moving counts = %d"</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> src, <span class="keyword">char</span> dst, <span class="keyword">char</span> medi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Move the disc(1) from %c to %c\n"</span>, src, dst);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x1 = move(n<span class="number">-1</span>, src, medi, dst);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Move the disc(%d) from %c to %c\n"</span>, n, src, dst);</span><br><span class="line">    <span class="keyword">int</span> x2 = move(n<span class="number">-1</span>, medi, dst, src);</span><br><span class="line">    <span class="keyword">return</span> x1 + x2 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去，期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algo" scheme="http://chenyin.top/categories/algo/"/>
    
    
  </entry>
  
  <entry>
    <title>细胞分裂问题</title>
    <link href="http://chenyin.top/algo/20201022-b29d.html"/>
    <id>http://chenyin.top/algo/20201022-b29d.html</id>
    <published>2020-10-22T02:51:13.000Z</published>
    <updated>2020-10-22T06:57:30.919Z</updated>
    
    <content type="html"><![CDATA[<p><strong>有一个细胞，每过一小时就会分裂一次，每次分裂产生一个子细胞。同时，这个细胞分裂三次后就会死亡。请问第 $n$ 小时时有多少细胞？</strong></p><a id="more"></a><p>递归解决问题的思路就是把 n 的问题化归到比 n 小的问题上去，先解决小问题，大问题自然就解决了。</p><p>因为一个细胞分裂三次后会立即死亡，所以 n 时刻的所有细胞的已分裂次数都不会超过三次。</p><p>所以 n 时刻的细胞的已分裂次数有可能是 0 次，1 次，2 次。</p><p>记 n 时刻的细胞数目为 $f(n)$，按照已分裂次数将细胞分为三堆，则：<br>$$<br>f(n) = f_0(n) + f_1(n) + f_2(n)<br>$$<br>如下图所示：</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20201021180049857.png" alt="image-20201021180049857" style="zoom:67%;"></p><p>观察发现，无论 n 时刻会有多少细胞死亡，每个 n-1 时刻的细胞都会分裂出一个新的细胞。只是对于那些 n-1 时刻已经分裂了两次的细胞而言，它们在分裂后会立即死亡而已，故而<br>$$<br>f_0(n) = f(n-1)<br>$$<br>n 时刻所有已分裂次数为 1 的细胞都是 n-1 时刻已分裂次数为 0 的细胞，故而<br>$$<br>f_1(n) = f_0(n-1) = f(n-2)<br>$$<br>n 时刻所有已分裂次数为 2 的细胞都是 n-1 时刻已分裂次数为 1 的细胞，故而<br>$$<br>f_2(n) = f_1(n-1) = f(n-3)<br>$$<br>所以<br>$$<br>f(n) = f(n-1) + f(n-2) + f(n-3)<br>$$<br>综上<br>$$<br>f(n) = \begin{cases}<br>f(n-1) + f(n-2) + f(n-3) &amp; n \ge 3 \\<br>4 &amp; n = 2 \\<br>2 &amp; n = 1 \\<br>1 &amp; n = 0<br>\end{cases}<br>$$<br>这个递推公式表示的数列跟斐波那契数列十分相似，而且更复杂，时间复杂度更高。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hist;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">countCell</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        n = countCell(i);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"too big"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"n = "</span> &lt;&lt; i &lt;&lt; <span class="string">", counts = "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">countCell</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        hist.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        hist.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        hist.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator res;</span><br><span class="line">    <span class="keyword">int</span> x1, x2, x3;</span><br><span class="line">    res = hist.find(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != hist.end()) &#123;</span><br><span class="line">        x1 = res-&gt;second;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x1 = countCell(n<span class="number">-1</span>);</span><br><span class="line">        hist.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(n<span class="number">-1</span>, x1));</span><br><span class="line">    &#125;</span><br><span class="line">    res = hist.find(n<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != hist.find(n<span class="number">-2</span>)) &#123;</span><br><span class="line">        x2 = countCell(n<span class="number">-2</span>);</span><br><span class="line">        hist.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(n<span class="number">-2</span>, x2));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x2 = res-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    res = hist.find(n<span class="number">-3</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != hist.end()) &#123;</span><br><span class="line">        x3 = countCell(n<span class="number">-3</span>);</span><br><span class="line">        hist.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(n<span class="number">-3</span>, x3));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x3 = res-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x1 + x2 + x3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>STL map 的几个用法：</p><ul><li>初始化一个空的map：<code>map&lt;int,int&gt; mapname;</code></li><li>向map中插入数据：<code>mapname.insert(pair&lt;int,int&gt;(M, N));</code></li><li>查询key是否存在：<code>mapname.find(KEY)</code> 并与 <code>mapname.end()</code> 进行比较；</li><li>声明一个迭代器：<code>map&lt;int,int&gt;::iterator iter;</code>，配合 <code>.begin()</code> 和 <code>.end()</code> 使用<ul><li>反向迭代器：<code>map&lt;int,int&gt;::reverse_iterator</code>，配合 <code>.rbegin()</code> 和 <code>.rend()</code> 使用</li></ul></li><li>访问迭代器的key和value：<code>iter-&gt;first</code> &amp; <code>iter-&gt;second</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;有一个细胞，每过一小时就会分裂一次，每次分裂产生一个子细胞。同时，这个细胞分裂三次后就会死亡。请问第 $n$ 小时时有多少细胞？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algo" scheme="http://chenyin.top/categories/algo/"/>
    
    
  </entry>
  
  <entry>
    <title>最大二叉树</title>
    <link href="http://chenyin.top/algo/20201021-a527.html"/>
    <id>http://chenyin.top/algo/20201021-a527.html</id>
    <published>2020-10-21T07:26:28.000Z</published>
    <updated>2020-10-22T06:56:21.298Z</updated>
    
    <content type="html"><![CDATA[<p><strong>给定一个不含重复元素的整数数组，以此构建最大二叉树。</strong></p><a id="more"></a><p>最大二叉树有如下特点：</p><ul><li>二叉树的根对应数组中的最大值</li><li>左子树是原数组最大值左边的子数组构建出的最大二叉树</li><li>右子树是原数组最大值右边的子数组构建出的最大二叉树</li></ul><p>下面是一个经典例子：</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20201013100218048.png" alt="image-20201013100218048" style="zoom:50%;"></p><p>树的构建一般都使用 <strong>递归</strong> 的方式。</p><p>在递归时，为了避免为子数组开辟额外的存储空间，可以选择在原数组上遍历。</p><p><span style="color:blue">maxBiTree.h</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAXBITREE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXBITREE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明一个二叉节点 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BiNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T data; <span class="comment">// 二叉节点的数据</span></span><br><span class="line">    BiNode&lt;T&gt; *left; <span class="comment">// 二叉节点的左子树地址，叶子节点为nullptr</span></span><br><span class="line">    BiNode&lt;T&gt; *right; <span class="comment">// 二叉节点的右子树地址，叶子节点为nullptr</span></span><br><span class="line">    BiNode(T); <span class="comment">// 只能从已有数据初始化一个二叉节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义一个最大二叉树类 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MaxBiTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BiNode&lt;T&gt; *root; <span class="comment">// 根节点，是一个二叉节点类型</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp;)</span></span>; <span class="comment">// 给定数组构建最大二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printPreOrder</span><span class="params">()</span></span>; <span class="comment">// 打印前序遍历结果</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    BiNode&lt;T&gt;* _r_construct(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>); <span class="comment">// 递归构建</span></span><br><span class="line">    <span class="keyword">void</span> _r_preorder(<span class="keyword">const</span> BiNode&lt;T&gt;*); <span class="comment">// 递归前序遍历</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><span style="color:blue">maxBiTree.cpp</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"maxBiTree.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; </span></span><br><span class="line"><span class="class"><span class="title">BiNode</span>&lt;T&gt;:</span>:BiNode(T d): data(d) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 递归构建二叉树 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; </span></span><br><span class="line"><span class="class"><span class="title">BiNode</span>&lt;T&gt;* <span class="title">MaxBiTree</span>&lt;T&gt;:</span>:_r_construct(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">int</span> begin, <span class="keyword">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt;= end ) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">int</span> maxv_index = begin;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; end; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vec[i] &gt; vec[maxv_index]) &#123;</span><br><span class="line">                maxv_index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        BiNode&lt;T&gt; *node = <span class="keyword">new</span> BiNode&lt;T&gt;(vec[maxv_index]);</span><br><span class="line">        node-&gt;left = _r_construct(vec, begin, maxv_index);</span><br><span class="line">        node-&gt;right = _r_construct(vec, maxv_index+<span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxBiTree</span>&lt;T&gt;:</span>:construct(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"call _r_construct ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    root = _r_construct(vec, <span class="number">0</span>, vec.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 递归前序遍历 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxBiTree</span>&lt;T&gt;:</span>:_r_preorder(<span class="keyword">const</span> BiNode&lt;T&gt; *node) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; node-&gt;data &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left != <span class="literal">nullptr</span>) _r_preorder(node-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>) _r_preorder(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxBiTree</span>&lt;T&gt;:</span>:printPreOrder()&#123;</span><br><span class="line">    _r_preorder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Explicit Instantiation */</span></span><br><span class="line"><span class="comment">/* 显式实例化 */</span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">BiNode</span>&lt;int&gt;;</span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxBiTree</span>&lt;int&gt;;</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">main.cpp</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"maxBiTree.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    MaxBiTree&lt;<span class="keyword">int</span>&gt; mbtree;</span><br><span class="line">    mbtree.construct(vec);</span><br><span class="line">    mbtree.printPreOrder();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; g++ main.cpp maxBiTree.cpp &amp;&amp; a.exe &amp;&amp; del a.exe</span><br><span class="line">call _r_construct ...</span><br><span class="line">6 3 2 1 5 0</span><br></pre></td></tr></table></figure><p>用这个例子好好复习了一下 C++， emmm</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;给定一个不含重复元素的整数数组，以此构建最大二叉树。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algo" scheme="http://chenyin.top/categories/algo/"/>
    
    
  </entry>
  
  <entry>
    <title>C++函数模板在分离式编译中的坑</title>
    <link href="http://chenyin.top/Cpp/20201019-1e61.html"/>
    <id>http://chenyin.top/Cpp/20201019-1e61.html</id>
    <published>2020-10-19T07:31:47.000Z</published>
    <updated>2020-10-19T07:37:30.807Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 中 <strong>模板</strong> 是 <strong>泛型</strong> 编程的基础，但是模板在 <strong>分离式编译</strong> 中又有许多坑~</p><a id="more"></a><h1 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h1><p><strong>函数模板</strong>（Function Template）虽然也定义了函数实现的具体过程，但是它并不能完全等同于普通函数。</p><p>在 C++ 中，<strong>类型</strong> 和 <strong>值</strong> 是 <strong>数据</strong> 的两个主要特征。普通函数限定了数据的类型，只对数据的值进行操作。</p><p>当我们需要对不同类型数据的值进行相同的操作时，就需要为每一种数据类型各自定义对应的普通函数，这意味着大量冗余重复的代码。</p><p><strong>函数模板</strong> 就是为了解决这样一个问题：针对不同数据类型的相同操作只定义一次函数。</p><p>函数模板实际上是在普通函数的基础上，将数据的 <strong>类型</strong> 看作了参数，从而建立起了一个 <strong>模板</strong>，这个模板可以通过指定特定的数据类型而 <strong>实例化</strong> 为具体的普通函数。模板中传递数据类型的参数叫做 <strong>模板参数</strong>（Template Parameters）:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">returnType</span> <span class="title">funcName</span>(<span class="title">T1</span> <span class="title">t1</span>, <span class="title">T2</span> <span class="title">t2</span>) &#123;</span> ... &#125;</span><br></pre></td></tr></table></figure><p>通过 <strong>template</strong> 关键字定义一个模板，<code>T1</code> 和 <code>T2</code> 是模板参数，<code>class</code> 也可替换成 <code>typename</code>。</p><h1 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h1><p>函数模板与函数的区别在于：函数在定义时就已经自动实例化（实例化的意思就是编译时产生了对应的二进制代码），因为函数只处理数据的值，而数据的类型是已知的；<span style="color:blue">函数模板需要指定<strong>模板参数</strong>转化为普通函数才能被实例化</span>，这就意味着如果只是定义一个模板，编译器会忽略它，这是理所应当的，因为编译器不知道模板的具体数据类型。模板参数的值只有当函数模板被 <strong>调用</strong> 时才能确定，也就是说，调用函数模板会自动实例化一个特定数据类型的普通函数，这种依赖于实际调用和传输参数数据类型的函数模板实例化过程叫做 <strong>隐式实例化</strong>（Implicit Instantiation）。</p><p>除了隐式实例化之外，我们还可以在函数模板发生实际调用之前主动对函数模板进行实例化，即主动告诉编译器我们需要对哪些特定的数据类型（模板参数）生成普通函数，这种方式叫做 <strong>显式实例化</strong>（Explicit Instantiation）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) &#123;</span></span><br><span class="line">    T temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式实例化</span></span><br><span class="line"><span class="function"><span class="keyword">template</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp;, <span class="keyword">int</span>&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式实例化</span></span><br><span class="line"><span class="keyword">float</span> x = <span class="number">1.23</span>, y = <span class="number">3.21</span>;</span><br><span class="line">swap(x, y);</span><br></pre></td></tr></table></figure><h1 id="特化"><a href="#特化" class="headerlink" title="特化"></a>特化</h1><p>有时候，函数模板并不适用于某些特殊的数据类型。例如上面的 <code>swap</code> 函数，如果 T 是复杂的类，而我们想交换的是对象的两个属性，则上面定义的模板并不能实现这个目的。此时我们可以针对特殊的数据类型对函数模板进行修改，即函数模板的 <strong>特化</strong>（Specialization）。</p><p>特化实现的是普通函数，它需要重写函数的定义过程，并自动实例化（因为数据的类型指定了）。</p><p>特化实际上相当于函数的重载：相同的函数名，形参具有不同的数据类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) &#123;</span> ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特化</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Books &amp;x, Books &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> title = x.title;</span><br><span class="line">    x.title = y.title;</span><br><span class="line">    y.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分离式编译"><a href="#分离式编译" class="headerlink" title="分离式编译"></a>分离式编译</h1><p><strong>分离式编译</strong>（Separate Compilation）：C++ 以 cpp 文件为基本编译单元，将每个 cpp 文件单独编译成目标文件，最后通过连接器连接所有的目标文件生成可执行文件。</p><blockquote><p>为什么要连接？一个目标文件中的函数/类/变量的定义可能在其它的目标文件中，并且程序的执行入口只在其中某一个目标文件中。</p></blockquote><p>每一个 cpp 文件在被独立编译时都会 <strong>包含</strong>（include）相关的头文件，如果两个 cpp 文件同时引入了相同的头文件，意味着这个头文件会被编译两次，这表示头文件中的对象会被多次声明，这将导致 redefinition 的错误。正确的做法是在头文件中使用 <strong>条件编译</strong>。</p><blockquote><p>条件编译相关宏指令：#if, #ifdef, #ifndef, #endif, #else, #elif 和 #define</p></blockquote><p>因为函数模板的定义实际上不会被编译成二进制代码（实例化），所以函数模板的分离式编译就会出现一些问题。</p><p>下面是一个经典的分离式编译，三个文件分别实现了函数的声明、定义和调用：</p><ul><li><p>函数声明 <strong>swap.h</strong>：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SWAP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SWAP_H</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap2</span>(<span class="title">T</span>&amp;, <span class="title">T</span>&amp;);</span></span><br></pre></td></tr></table></figure></li><li><p>函数定义 <strong>swap.cpp</strong>：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"swap.h"</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap2</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) &#123;</span></span><br><span class="line">    T temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数调用 <strong>main.cpp</strong>：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"swap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">3</span>, y = <span class="number">5</span>;</span><br><span class="line">    swap2(x, y);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"x = "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"y = "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>编译器分别编译 swap.cpp 和 main.cpp 两个文件。</p><p>由于两个文件都包含了 swap.h 文件，因此需要使用条件编译。</p><p>编译器在编译 swap.cpp 时虽然会检查函数模板的语法，但是却不会生成相应的函数代码，因为模板参数是未知的。</p><p>main.cpp 中调用了函数 <code>swap2&lt;int&gt;</code>，编译器只能在 swap.h 中找到函数模板 <code>swap2&lt;T&gt;</code> 的声明，而没有模板的定义。这导致函数模板不能被正确实例化，报错信息提示未定义的函数 <code>void swap2&lt;int&gt;(int&amp;, int&amp;)</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">undefined reference to void swap2&lt;int&gt;(int&amp;, int&amp;)</span><br></pre></td></tr></table></figure><p>因为 main.cpp 包含了 swap.h 文件，如果我们在 swap.h 文件中实现了函数模板，则不会报错：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SWAP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SWAP_H</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap2</span>(<span class="title">T</span>&amp;, <span class="title">T</span>&amp;);</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap2</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) &#123;</span></span><br><span class="line">    T t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>因为此时编译 main.cpp 时能够在 swap.h 中找到 函数模板的定义，并且根据实际调用时的变量类型对函数模板进行 <strong>隐式实例化</strong> 生成 <code>void swap2&lt;int&gt;(int&amp;, int&amp;)</code> 相关的代码。但是，这种写法明显不符合分离式编译的规范：在头文件中声明，在源文件中定义。</p><p>一种较好的做法是在 swap.cpp 中对函数模板进行 <strong>显式实例化</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"swap.h"</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap2</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) &#123;</span></span><br><span class="line">    T t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> <span class="keyword">void</span> swap2&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span>&amp;, <span class="keyword">int</span>&amp;);</span><br></pre></td></tr></table></figure><p><span style="color:red">没想明白的是，显式实例化语句写在头文件中会提示找不到模板的定义，而写在源文件中的任何位置都可以~</span></p><p>进行显式实例化后，就可以正常编译啦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; g++ main.cpp swap.cpp &amp;&amp; a.exe &amp;&amp; del a.exe</span><br><span class="line">Before swapping: x = 3, y = 5</span><br><span class="line">After swapping: x = 5, y = 3</span><br></pre></td></tr></table></figure><h1 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h1><p><strong>类模板</strong> 与 <strong>函数模板</strong> 类似：</p><ul><li><p>books.h</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BOOKS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOKS_H</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">Books</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>books.cpp</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"books.h"</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">Books</span> &#123;</span> ... &#125;;</span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span>&lt;int&gt;;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/pongba/article/details/19130" target="_blank" rel="noopener">为什么C++编译器不能支持对模板的分离式编译</a></p><p><a href="https://blog.csdn.net/qq_30835655/article/details/76850894" target="_blank" rel="noopener">C++ 函数模板 实例化和具体化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ 中 &lt;strong&gt;模板&lt;/strong&gt; 是 &lt;strong&gt;泛型&lt;/strong&gt; 编程的基础，但是模板在 &lt;strong&gt;分离式编译&lt;/strong&gt; 中又有许多坑~&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://chenyin.top/categories/Cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>高阶函数之装饰器(1)</title>
    <link href="http://chenyin.top/python/20200928-95fe.html"/>
    <id>http://chenyin.top/python/20200928-95fe.html</id>
    <published>2020-09-28T10:08:51.000Z</published>
    <updated>2020-09-28T10:15:00.919Z</updated>
    
    <content type="html"><![CDATA[<p>当我们实现了某个核心模块（函数）后，可能按照实际情况需要为这个模块添加额外的功能，例如统计程序运行时间、记录日志等等。此时，我们并不希望去修改模块本身的代码（想想都觉得很low），也不希望改变函数的调用方式（不然那么多调用每个都去改岂不是也很low）。<strong>装饰器</strong> 提供了解决这一问题的方案。简单来说，装饰器可以在核心代码的外面套一层壳，执行这段带壳的代码就能达到我们的目的。我将从一个 Python 渣渣的角度理解什么是 <strong>装饰器</strong>。</p><a id="more"></a> <p>套壳这一操作通过 <strong>@语法糖</strong> 实现，@语法糖指定了使用什么壳（装饰器函数的引用），壳的内容通过 <strong>装饰器函数</strong> 定义。</p><p>我们在面向对象编程时用到的 @staticmethod 和 @classmethod 就属于装饰器的一种。</p><p>这里只以最简单的 ”壳“ 理解装饰器的执行逻辑。</p><h1 id="最基础的装饰器"><a href="#最基础的装饰器" class="headerlink" title="最基础的装饰器"></a>最基础的装饰器</h1><p>装饰器会对目标函数进行包装，然后将目标函数名指向包装后的函数定义。一般语法是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span> <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里我们将 <code>decorator</code> 称之为 <strong>装饰器函数</strong>，将 <code>func</code> 称之为 <strong>目标函数</strong>。这里我们需要注意的是，使用 @ 语法时不仅仅是在<span style="color:red">定义目标函数</span>，也是在<span style="color:red">调用装饰器函数</span>，搞清楚这一点就能理解 @ 语法的作用机制。</p><p>一般来说，装饰器函数的 <strong>引用</strong> 紧跟在 @ 符号后面，紧接着下一行就是目标函数的定义。装饰器函数只接受一个参数，那就是目标函数。所以说，装饰器函数是一个 <strong>高阶函数</strong>，它以函数引用作为参数，同时返回另一个函数的引用。</p><p>当程序检测到 @ 符号时，会 <strong>调用</strong>（或者叫 <strong>执行</strong>） 装饰器函数，传入目标函数的引用，返回另外一个函数的引用，并将指向原来目标函数的变量（上面的 <code>func</code> 变量）指向返回的新函数。所以上面的示例代码就相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 定义一个函数（具体实现略），并定义一个变量func（函数变量）指向这个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 调用装饰器函数，并使func变量指向装饰器返回的那个函数</span></span><br><span class="line">func = decorator(func)</span><br></pre></td></tr></table></figure><p>说完了 @ 符号，我们再来谈谈 <strong>装饰器函数</strong> 本身。上面提到了，装饰器函数接受目标函数作为参数并返回一个新的函数。</p><p>我们之所以称之为 <strong>装饰器</strong>，是因为我们想扩展目标函数的功能，例如统计目标函数的执行时间等等。</p><p>换言之，目标函数定义了模块的核心功能，而某些时候我们需要对该模块做一些拓展，例如统计运行时间。</p><p>所以装饰器函数的基本形式应该是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment">## 我们加上下面这一句可以验证执行到@时是否执行了装饰器函数</span></span><br><span class="line">    print(<span class="string">'run decorator ...'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment">## do something, such as</span></span><br><span class="line">        print(<span class="string">'run wrapper ...'</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="comment">## do something, such as</span></span><br><span class="line">        print(<span class="string">'wrapper end!'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    print(wrapper)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>上面描述了一个装饰器函数的基本模型，它主要定义了两个东西：</p><ul><li>局部的函数变量 func：<code>decorator.&lt;locals&gt;.func</code>，它指向了目标函数</li><li>内嵌的函数 wrapper：<code>decorator.&lt;locals&gt;.wrapper</code>，目标函数的<strong>函数变量</strong>将指向它</li></ul><p>执行 <code>decorator</code> 函数返回了另外一个函数 <code>wrapper</code> 的引用，显然这个函数的 <code>__name__</code> 属性是 wrapper。</p><p>下面是用装饰器修饰目标函数的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** y</span><br></pre></td></tr></table></figure><p>运行这段代码的输出是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run decorator ...</span><br><span class="line">&lt;function decorator.&lt;locals&gt;.wrapper at 0x0000023AEDADC488&gt;</span><br></pre></td></tr></table></figure><p>可以看到，@ 确实执行了装饰器函数 decorator，同时 <strong>定义</strong> 了一个函数 wrapper。</p><p>但是 wrapper 函数并没有执行，我们再次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(exp(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#&gt; run wrapper ...</span></span><br><span class="line"><span class="comment">#&gt; wrapper end!</span></span><br><span class="line"><span class="comment">#&gt; 8</span></span><br></pre></td></tr></table></figure><p>可以看到，此时执行了 wrapper 函数，同时返回了计算结果，最终使用 print 函数打印了返回结果。</p><p>检查函数变量 exp 的 <code>__name__</code> 属性，发现不再是 “exp”，而是 “wrapper”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exp.__name__</span><br><span class="line"><span class="comment">#&gt; 'wrapper'</span></span><br></pre></td></tr></table></figure><h1 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h1><p>此外，还有一种带参数的装饰器，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@auth('barwe')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access_database</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">"访问某个数据库..."</span>)</span><br><span class="line">    </span><br><span class="line">access_database()</span><br></pre></td></tr></table></figure><p>假定的执行结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数（access_database）准备授权给用户（barwe）...</span><br><span class="line">访问某个数据库...</span><br><span class="line">授权完成!</span><br></pre></td></tr></table></figure><p>我们回忆一下上面提到的规则：@ 后面应紧跟 <strong>装饰器函数</strong> 的引用。这里很明显 <code>auth(&#39;barwe&#39;)</code> 是调用了 auth 函数，而且它的参数是一个字符串。那么可以预见的是，<code>auth(&#39;barwe&#39;)</code> 应该返回一个真正的装饰器函数的引用，然后再解释 @ 符号，再调用一次装饰器函数。另外，从打印结果我们知道，装饰器函数还可以访问 auth 函数的局部变量的值 “barwe”。不难定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment">#print('start auth ...')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_auth</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="comment">#print('start _auth ...')</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="comment">#print('start wrapper ...')</span></span><br><span class="line">            print(<span class="string">f'函数（<span class="subst">&#123;func.__name__&#125;</span>）准备授权给用户（<span class="subst">&#123;name&#125;</span>）...'</span>)</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            print(<span class="string">'授权完成!'</span>)</span><br><span class="line">            <span class="comment">#print('wrapper end!')</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="comment">#print('_auth end!')</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="comment">#print('auth end!')</span></span><br><span class="line">    <span class="keyword">return</span> _auth</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth('barwe')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access_database</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">"访问某个数据库..."</span>)</span><br></pre></td></tr></table></figure><p>如果去掉上面 print 函数的注释再次执行，就能得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start auth ...</span><br><span class="line">auth end!</span><br><span class="line">start _auth ...</span><br><span class="line">_auth end!</span><br></pre></td></tr></table></figure><p>这表示先调用了 <code>auth(&#39;barwe&#39;)</code> ，再解释 @ 时又调用了 <code>auth.&lt;locals&gt;._auth(access_database)</code>。</p><p>但是 <code>access_database &lt;- auth.&lt;locals&gt;._auth.&lt;locals&gt;.wrapper</code> 并没有执行！</p><p>我们正式执行修饰后的目标函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_database()</span><br></pre></td></tr></table></figure><p>输出结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start wrapper ...</span><br><span class="line">函数（access_database）准备授权给用户（barwe）...</span><br><span class="line">访问某个数据库...</span><br><span class="line">授权完成!</span><br><span class="line">wrapper end!</span><br></pre></td></tr></table></figure><p>总结一下，@ 符号会调用一次装饰器函数。如果是带参的装饰器，先执行后面的函数，然后再解释 @，这就要求后面那个函数应该返回一个标准的装饰器函数（即以目标函数为参数，返回对目标函数进行修饰后的新函数）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们实现了某个核心模块（函数）后，可能按照实际情况需要为这个模块添加额外的功能，例如统计程序运行时间、记录日志等等。此时，我们并不希望去修改模块本身的代码（想想都觉得很low），也不希望改变函数的调用方式（不然那么多调用每个都去改岂不是也很low）。&lt;strong&gt;装饰器&lt;/strong&gt; 提供了解决这一问题的方案。简单来说，装饰器可以在核心代码的外面套一层壳，执行这段带壳的代码就能达到我们的目的。我将从一个 Python 渣渣的角度理解什么是 &lt;strong&gt;装饰器&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://chenyin.top/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>在线获取UserAgent</title>
    <link href="http://chenyin.top/spider/20200927-204d.html"/>
    <id>http://chenyin.top/spider/20200927-204d.html</id>
    <published>2020-09-27T06:56:39.000Z</published>
    <updated>2020-09-27T07:28:58.154Z</updated>
    
    <content type="html"><![CDATA[<p><strong>UserAgent</strong> 让你的爬虫以（冒充）浏览器的身份向服务器请求数据。<br>更换 UserAgent 可以避免触发某些反爬机制。<br><code>fake-useragent</code> 是用来为爬虫提供 UserAgent 的第三方包。</p><a id="more"></a><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>使用 <code>pip install fake-useragent</code> 安装 <strong>fake-useragent</strong> 这个包，如果网络错误，就多试几次。</p><p>使用 <code>import fake_useragent</code> 导入。一般地，我们只需要 <code>from fake_useragent import UserAgent</code> 即可。</p><p>fake-useragent 的API 十分简单：</p><ul><li><code>UserAgent().random</code> 即可获取一个随机的 UserAgent（一般用这个就行了）</li><li>获取子项的值：<code>.ie</code>, <code>.msie</code>, <code>[&#39;Internet Explore&#39;]</code>, <code>opera</code>, <code>chrome</code>, <code>google</code>, <code>[&#39;google chrome&#39;]</code>, <code>firefox</code>, <code>ff</code>, <code>safari</code></li></ul><p>下面是一个典型的 UserAgent：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36</span><br></pre></td></tr></table></figure><p>其每个字段的含义是：</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200927115718838.png" alt="image-20200927115718838" style="zoom: 67%;"></p><p>这些信息可以通过在线网站 <a href="http://useragentstring.com/" target="_blank" rel="noopener">http://useragentstring.com/</a> 进行查询。</p><h1 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h1><p>fake-useragent 会将数据缓存在系统的临时目下，例如 Linux 的 <code>/tmp</code>。</p><p>可在 python 脚本中随时更新本地缓存的数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">ua.update()</span><br></pre></td></tr></table></figure><p>如果不想将数据缓存到本地，可设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ua = UserAgent(cache = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>如果  <a href="http://useragentstring.com/" target="_blank" rel="noopener">useragentstring.com</a> 或者 <a href="https://www.w3schools.com/browsers/browsers_stats.asp" target="_blank" rel="noopener">w3schools.com</a> 改变或者关闭了它们的资源，fake-useragent 会使用备用的 <a href="https://fake-useragent.herokuapp.com/browsers/0.1.8" target="_blank" rel="noopener">heroku</a>。</p><p>如果你不想使用托管的缓存服务器（此设置在0.1.5版本添加），可设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ua = UserAgent(use_cache_server = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>在极少数情况下，如果托管的缓存服务器和数据源都不可用，fake-useragent 将不会下载任何数据（版本0.1.3添加）。此时调用 <code>UserAgent()</code> 会抛出 <code>fake_useragent.errors.FakeUserAgentError</code> 错误，可再次尝试。</p><p>你可以自定义数据缓存的路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#version = fake_useragent.VERSION</span></span><br><span class="line">ua = UserAgent(path = <span class="string">"/path/to/xxx.json"</span>)</span><br></pre></td></tr></table></figure><p>如遇报错可尝试更新 fake-useragent：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U fake-useragent</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>项目地址：<a href="https://github.com/hellysmile/fake-useragent" target="_blank" rel="noopener">https://github.com/hellysmile/fake-useragent</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;UserAgent&lt;/strong&gt; 让你的爬虫以（冒充）浏览器的身份向服务器请求数据。&lt;br&gt;更换 UserAgent 可以避免触发某些反爬机制。&lt;br&gt;&lt;code&gt;fake-useragent&lt;/code&gt; 是用来为爬虫提供 UserAgent 的第三方包。&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
  </entry>
  
  <entry>
    <title>2G用户怎么装SnapATAC</title>
    <link href="http://chenyin.top/R/20200903-2dec.html"/>
    <id>http://chenyin.top/R/20200903-2dec.html</id>
    <published>2020-09-03T06:42:29.000Z</published>
    <updated>2020-09-16T15:19:45.657Z</updated>
    
    <content type="html"><![CDATA[<p>最近升级R到4.0版本，遂重新安装分析需要的包。大部分包都很顺利，唯独这个SnapATAC，从Rstudio中不管是用<code>devtools::install_github</code>还是用<code>biocManager::install</code>都不响应，等一段时间就timeout了。经过挠头皮思考之后，找到了一种安装方法。适合访问github速度慢或者从github下载源码速度慢的小可爱。想想还是挺有意思的，遂记下来以供参考~</p><a id="more"></a><p>首先SnapATAC为什么下载这么慢？</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200903144834192.png" alt="image-20200903144834192"></p><p>看github上的源码结构我们可以发现作者其实是把代码和数据混在一起，下载数据时经常卡死。</p><p>所以解决方法很简单，我们只下源码，不下demo数据。故而，这里我们排除下载 <strong>data</strong>, <strong>examples</strong>, <strong>images</strong> 和 <strong>inst/extdata</strong> 这四个目录。怎么做呢？</p><p>安装一个叫做 <strong>GitZip</strong> 的chrome插件，这个插件实现了从github项目中下载部分文件或者目录的功能。</p><blockquote><p><a href="https://www.extfans.com/" target="_blank" rel="noopener">扩展迷</a> 上可下载插件：<a href="https://www.extfans.com/" target="_blank" rel="noopener">https://www.extfans.com/</a></p></blockquote><p>安装完成之后双击想要下载的目录或者文件名称后的空白部分标记想要下载的目录或者文件，点击右下角的下载按钮即可。</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200903145426408.png" alt="image-20200903145426408"></p><p>点击下载后会保存到本地，压缩包名为 <strong>SnapATAC-.zip</strong>，解压并重命名目录为 <strong>SnapATAC</strong>。</p><blockquote><p>已经整理好的源码：<a href="https://barwe.lanzous.com/insiGgbf7ba" target="_blank" rel="noopener">https://barwe.lanzous.com/insiGgbf7ba</a></p></blockquote><p>打开cmd并进入到解压目录所在的目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R CMD build SnapATAC</span><br></pre></td></tr></table></figure><p>这一步编译SnapATAC并生成一个压缩包 <strong>SnapATAC_x.x.x.tar.gz</strong>，其中 x.x.x 是版本号。</p><p>然后继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R CMD INSTALL SnapATAC_x.x.x.tar.gz</span><br></pre></td></tr></table></figure><p>如果提示缺少依赖就先装好依赖~</p><p>大功告成~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近升级R到4.0版本，遂重新安装分析需要的包。大部分包都很顺利，唯独这个SnapATAC，从Rstudio中不管是用&lt;code&gt;devtools::install_github&lt;/code&gt;还是用&lt;code&gt;biocManager::install&lt;/code&gt;都不响应，等一段时间就timeout了。经过挠头皮思考之后，找到了一种安装方法。适合访问github速度慢或者从github下载源码速度慢的小可爱。想想还是挺有意思的，遂记下来以供参考~&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://chenyin.top/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>实用的conda换源教程</title>
    <link href="http://chenyin.top/python/20200827-862f.html"/>
    <id>http://chenyin.top/python/20200827-862f.html</id>
    <published>2020-08-27T01:36:57.000Z</published>
    <updated>2020-08-27T01:49:24.561Z</updated>
    
    <content type="html"><![CDATA[<p>官方的默认源在下载某些包（例如pytorch）时实在是太慢了，建议在新建一个虚拟环境前就换源。</p><p>因为不同源的包的默认版本可能不一致，如果中途换源可能会导致许多不必要的麻烦。</p><a id="more"></a><p>这里推荐使用清华大学提供的conda源，亲测好使。</p><p>在用户目录（linux为<code>/home/USER/</code>，windows为<code>C:\Users\USER\</code>）下新建 <strong>.condarc</strong> 文件，并改成以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">show_channel_urls: true</span><br><span class="line">channel_priority: disabled</span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">  - default</span><br></pre></td></tr></table></figure><blockquote><p>windows下不允许新建没有文件名的文件（即以点号开头的文件），有以下几种解决办法：</p><ul><li>在cmd中使用 <code>conda config --set show_channel_urls yes</code> 会自动生成.condarc文件</li><li>使用模拟bash环境（例如git-bash或者msys2等）新建：<code>touch .condarc</code></li><li>使用cmd下载：wget <a href="https://barwe.oss-cn-shenzhen.aliyuncs.com/config/.condarc" target="_blank" rel="noopener">https://barwe.oss-cn-shenzhen.aliyuncs.com/config/.condarc</a></li></ul></blockquote><p>换源后需要重启cmd或者terminal才能使用新的源。</p><p><strong>操作源的其它命令</strong></p><p>查看当前使用的源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --show channels</span><br><span class="line">conda config --show-sources</span><br></pre></td></tr></table></figure><p>重置为默认源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>手动添加一个源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br></pre></td></tr></table></figure><hr><p>另外，中科大也提供了源，但是在我电脑上不咋好使，用清华源足矣。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方的默认源在下载某些包（例如pytorch）时实在是太慢了，建议在新建一个虚拟环境前就换源。&lt;/p&gt;
&lt;p&gt;因为不同源的包的默认版本可能不一致，如果中途换源可能会导致许多不必要的麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://chenyin.top/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>将SpaceSniffer添加到右键菜单</title>
    <link href="http://chenyin.top/os/20200818-7e4.html"/>
    <id>http://chenyin.top/os/20200818-7e4.html</id>
    <published>2020-08-18T03:17:50.000Z</published>
    <updated>2020-08-18T03:47:41.683Z</updated>
    
    <content type="html"><![CDATA[<p>SpaceSniffer 能够以网格形式展示指定目录的结构层次以及它的子目录和子文件的大小。</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818102942470.png" alt="image-20200818102942470"></p><a id="more"></a><p>这里介绍怎么把应用添加到目录的右键菜单，使得我们可以在任意目录上右键分析这个目录的磁盘空间。效果如下：</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818103202292.png" alt="image-20200818103202292"></p><h1 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h1><p>这是一个绿色包，所以不需要安装 ~</p><p>链接：<a href="https://pan.baidu.com/s/186OKHlF_2IJ0VsnwDhvJnQ" target="_blank" rel="noopener">https://pan.baidu.com/s/186OKHlF_2IJ0VsnwDhvJnQ</a>  提取码：83vc</p><h1 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h1><p>直接打开 <strong>SpaceSniffer.exe</strong> 即可。</p><p>需要注意的是，如果待分析的目录中包含需要管理员权限操作的子目录或者子文件，需要以管理员身份启动软件才能正常分析，否则会抛出警告。</p><p>启动后依次点击 <strong>Help &gt; command line help</strong> 可以查看命令行帮助文档：</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818111934093.png" alt="image-20200818111934093"></p><p>我们的任意目录右键分析洗盘空间需要用到这个。</p><p>观察一下，<strong>scan</strong> 参数可以指定我们想要分析的目录，如果是在右键上，我们应该通过变量实时获取目标目录。</p><h1 id="添加右键入口"><a href="#添加右键入口" class="headerlink" title="添加右键入口"></a>添加右键入口</h1><ol><li><p>首先我们需要一个默认以管理员权限启动的 <strong>cmd.exe</strong>，cmd.exe 一般位于 <strong>C:\WINDOWS\system32</strong> 下，找到它然后复制一个新的程序并重命名为 cmda.exe<br> <img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818104334121.png" alt="image-20200818104334121"></p></li><li><p>右键这个 <strong>cmda.exe</strong>，依次点击 <strong>属性 &gt; 兼容性</strong>，勾选 <strong>以管理员身份运行此程序</strong>，然后 <strong>确定</strong>，记下这个 cmda.exe 的路径 <strong>C:\WINDOWS\system32\cmda.exe</strong><br> <img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818104535249.png" alt="image-20200818104535249"></p></li><li><p>打开注册表编辑器（<strong>win + r</strong> 然后输入 <strong>regedit</strong> 确定），定位到 <strong>HKEY_CLASSES_ROOT\Directory\shell</strong>，这个文件夹代表了 <strong>一般目录的右键菜单</strong>：<br> <img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818104855632.png" alt="image-20200818104855632"><br> 可以看到我这里已经添加了四个入口，分别是 cmder, find, git bash 和将要添加的 SpaceSniffer</p></li><li>右键 <strong>shell</strong>，新建 <strong>项</strong>，取名为 SpaceSniffer</li><li><p>修改 SpaceSniffer 项的 <strong>(默认)</strong> 为 <strong>使用 SpaceSniffer 分析这个目录的磁盘空间</strong>，这个字符串将出现在你的右键菜单中，可个性化修改；在 <strong>(默认)</strong> 值的同级环境中右键依次点击 <strong>新建值 &gt; 字符串值</strong>，取名为 <strong>Icon</strong>。双击 Icon，修改其值为 SpaceSniffer.exe 程序的路径；最后再新建一个 <strong>项</strong>，取名为 <strong>command</strong>。最终效果如下：<br> <img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818105751882.png" alt="image-20200818105751882"></p></li><li><p>双击 command 项，修改其默认值为 <strong>“C:\WINDOWS\system32\cmda.exe” “/C start D:\Portable\spacesniffer\SpaceSniffer.exe scan %1”</strong>：</p><ul><li><strong>/C</strong> 表示执行其它程序</li><li><strong>start</strong> 不会显示cmd的黑黢黢的窗口</li><li><strong>scan 路径</strong> 作为 SpaceSniffer.exe 的参数</li><li><strong>%1</strong> 变量动态获取当前目录路径</li></ul></li></ol><p>真香 ~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpaceSniffer 能够以网格形式展示指定目录的结构层次以及它的子目录和子文件的大小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200818102942470.png&quot; alt=&quot;image-20200818102942470&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="os" scheme="http://chenyin.top/categories/os/"/>
    
    
  </entry>
  
  <entry>
    <title>R-下载github源码并离线安装</title>
    <link href="http://chenyin.top/R/20200804-fcaf.html"/>
    <id>http://chenyin.top/R/20200804-fcaf.html</id>
    <published>2020-08-04T06:21:52.000Z</published>
    <updated>2020-08-18T03:22:53.232Z</updated>
    
    <content type="html"><![CDATA[<p><code>devtools::install_github</code> 虽然好用，但是有时候R不能与github通讯时就很尴尬。</p><a id="more"></a><p>在jupyter中使用R时需要安装IRkernel包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtools::install_github(<span class="string">'IRkernel/IRkernel'</span>)</span><br></pre></td></tr></table></figure><p>但是网络似乎出现了问题，but浏览器中还是可以访问这个repo的：</p><p><img src="https://barwe.oss-cn-shenzhen.aliyuncs.com/typora/image-20200804142630369.png" alt="image-20200804142630369"></p><p>这时候可以考虑把repo克隆到本地后再离线安装。过程如下：</p><ol><li><p>下载源码：</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/IRkernel/IRkernel.git</span><br><span class="line">Cloning into <span class="string">'IRkernel'</span><span class="keyword">...</span></span><br><span class="line">remote: Enumerating objects: <span class="number">12</span>, done.</span><br><span class="line">remote: Counting objects: <span class="number">100</span>% (<span class="number">12</span>/<span class="number">12</span>), done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">remote: Total <span class="number">2359</span> (delta <span class="number">3</span>), reused <span class="number">4</span> (delta <span class="number">1</span>), pack-reused <span class="number">2347</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">2359</span>/<span class="number">2359</span>), <span class="number">694.02</span> KiB | <span class="number">30.00</span> KiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">1401</span>/<span class="number">1401</span>), done.</span><br></pre></td></tr></table></figure></li><li><p>编译：需要用到命令行编译，如果git bash中能够检测到R可以直接在git bash中编译和安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ which R</span><br><span class="line">/d/Program/R/R-4.0.2/bin/R</span><br></pre></td></tr></table></figure> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ R CMD build IRkernel</span><br><span class="line">* checking <span class="keyword">for</span> file <span class="string">'IRkernel/DESCRIPTION'</span> <span class="keyword">...</span> OK</span><br><span class="line">* preparing <span class="string">'IRkernel'</span>:</span><br><span class="line">* checking DESCRIPTION meta-information <span class="keyword">...</span> OK</span><br><span class="line">* checking <span class="keyword">for</span> LF line-endings <span class="keyword">in</span> <span class="keyword">source</span> and make files and shell scripts</span><br><span class="line">* checking <span class="keyword">for</span> empty or unneeded directories</span><br><span class="line">Removed empty directory <span class="string">'IRkernel/example-notebooks'</span></span><br><span class="line">Removed empty directory <span class="string">'IRkernel/tests/testthat/jkt'</span></span><br><span class="line">Removed empty directory <span class="string">'IRkernel/tests/testthat/njr'</span></span><br><span class="line">* building <span class="string">'IRkernel_1.1.1.9000.tar.gz'</span></span><br></pre></td></tr></table></figure><p> 编译会生成一个以 <strong>.tar.gz</strong> 结尾的压缩包，安装它即可。</p></li><li><p>安装：需要用到命令行</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ R CMD INSTALL IRkernel_1.1.1.9000.tar.gz</span><br><span class="line">* installing to <span class="keyword">library</span> <span class="string">'D:/Program/R/R-4.0.2/library'</span></span><br><span class="line">* installing *<span class="keyword">source</span>* package <span class="string">'IRkernel'</span> <span class="keyword">...</span></span><br><span class="line">** using staged installation</span><br><span class="line">** R</span><br><span class="line">** inst</span><br><span class="line">** byte-compile and prepare package <span class="keyword">for</span> lazy loading</span><br><span class="line">** help</span><br><span class="line">*** installing help indices</span><br><span class="line">  converting help <span class="keyword">for</span> package <span class="string">'IRkernel'</span></span><br><span class="line">    finding HTML links <span class="keyword">...</span> ▒▒▒▒</span><br><span class="line">    Comm-class                              html</span><br><span class="line">    CommManager-class                       html</span><br><span class="line">    IRkernel-package                        html</span><br><span class="line">    comm_manager                            html</span><br><span class="line">    installspec                             html</span><br><span class="line">    log                                     html</span><br><span class="line">    main                                    html</span><br><span class="line">** building package indices</span><br><span class="line">** testing <span class="keyword">if</span> installed package can be loaded from temporary location</span><br><span class="line">*** arch - i386</span><br><span class="line">*** arch - x64</span><br><span class="line">** testing <span class="keyword">if</span> installed package can be loaded from final location</span><br><span class="line">*** arch - i386</span><br><span class="line">*** arch - x64</span><br><span class="line">** testing <span class="keyword">if</span> installed package keeps a record of temporary installation path</span><br><span class="line">* DONE (IRkernel)</span><br><span class="line">Making <span class="string">'packages.html'</span> <span class="keyword">...</span> ▒▒▒▒</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;devtools::install_github&lt;/code&gt; 虽然好用，但是有时候R不能与github通讯时就很尴尬。&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://chenyin.top/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>C++标准库-fstream文件流</title>
    <link href="http://chenyin.top/Cpp/20200710-111f.html"/>
    <id>http://chenyin.top/Cpp/20200710-111f.html</id>
    <published>2020-07-10T06:12:45.000Z</published>
    <updated>2020-07-10T06:23:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>C++标准库 <strong>fstream</strong> 用来读写文件。</p><a id="more"></a><h1 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h1><p>C++标准库头文件 <code>#include &lt;fstream&gt;</code> 中包含了三个重要的文件流类：</p><ul><li><strong>fstream</strong>：既可以读文件，也可以写文件</li><li><strong>ifstream</strong>：只能读文件</li><li><strong>ofstream</strong>：只能写文件</li></ul><p>文件读写的基本步骤是：</p><ol><li>初始化文件流对象：声明，例如 <code>fstream f</code> 声明了读写文件流对象f</li><li>打开文件：调用 <strong>open</strong> 方法，例如 <code>f.open(&quot;xxx.txt&quot;, ios::in)</code></li><li>读/写文件：读取内容或者写入内容</li><li>关闭文件：调用 <strong>close</strong> 方法，<code>f.close()</code></li></ol><h2 id="声明文件流对象"><a href="#声明文件流对象" class="headerlink" title="声明文件流对象"></a>声明文件流对象</h2><p>如果只是对文件进行 <strong>读</strong> 操作，请使用 <strong>ifstream</strong>；如果只是对文件进行写操作，请使用 <strong>ofstream</strong>。语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::ifstream in;</span><br><span class="line"><span class="built_in">std</span>::ofstream out;</span><br><span class="line"><span class="built_in">std</span>::fstream in_out;</span><br></pre></td></tr></table></figure><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><h3 id="open-方法打开"><a href="#open-方法打开" class="headerlink" title="open 方法打开"></a>open 方法打开</h3><p><strong>open</strong> 是三个文件流类的成员方法，可被文件流对象调用以打开文件，实现文件流对象与具体文件的绑定。</p><p><strong>open</strong> 方法接收两个参数：文件路径，文件操纵模式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in.open(<span class="string">"xxx.txt"</span>, <span class="built_in">std</span>::ios::in);</span><br><span class="line">out.open(<span class="string">"yyy.txt"</span>, <span class="built_in">std</span>::ios::app);</span><br><span class="line">in_out.open(<span class="string">"zzz.txt"</span>, <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::out)</span><br></pre></td></tr></table></figure><p>读文件流对象的模式默认为 <code>ios::in</code>，可以缺省。</p><p><strong>ios标准库</strong> 内置了日常所需的文件操纵模式，包括：</p><ul><li><code>ios::in</code> 打开文件用于读取</li><li><code>ios::out</code> 打开文件用于写入</li><li><code>ios::ate</code> 文件打开后定位到末尾</li><li><code>ios::app</code> 追加模式，所有写入添加到文件末尾</li><li><code>ios::binary</code> 二进制方式</li><li><code>ios::trunc</code> 如果文件已存在则先删除文件</li></ul><p>常见的文件操纵模式组合：</p><ul><li>读取文本文件：<code>ios::in</code></li><li>读取二进制文件：<code>ios::in | ios::binary</code></li><li>写入为文本文件，文件存在时覆盖写入：<code>ios::out</code></li><li>写入为文本文件，文件存在时追加写入：<code>ios::out | ios::ate</code> 或者 <code>ios::app</code></li><li>写入为文本文件，文件存在时先删除再写入：<code>ios::out | ios::trunc</code></li><li>写入为二进制文件，文件存在时覆盖写入：<code>ios::out | ios::binary</code></li></ul><p>关于写入文件的三种情形，假设我有一个文件内容如下，想要写入的内容是 Fuzhou 和 Guangzhou：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nanjing</span><br><span class="line">Shanghai</span><br><span class="line">Shenzhen</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">文件写入方式</th><th>结果</th></tr></thead><tbody><tr><td style="text-align:center">覆盖式</td><td><u>Fuzhou</u><br><u>Guangzhou</u><br>Shenzhen</td></tr><tr><td style="text-align:center">追加式</td><td>Nanjing<br>Shanghai<br>Shenzhen<br><u>Fuzhou</u><br><u>Guangzhou</u></td></tr><tr><td style="text-align:center">删除式</td><td><u>Fuzhou</u><br><u>Guangzhou</u></td></tr></tbody></table><h3 id="在声明时打开"><a href="#在声明时打开" class="headerlink" title="在声明时打开"></a>在声明时打开</h3><p>除了使用 <strong>open</strong> 方法，在声明文件流对象时可以直接打开文件，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"xxx.txt"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"yyy.txt"</span>, <span class="built_in">std</span>::ios::out)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="检查文件打开是否成功"><a href="#检查文件打开是否成功" class="headerlink" title="检查文件打开是否成功"></a>检查文件打开是否成功</h3><p>通过 <code>if(in_out)</code> 来判断文件是否打开成功。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>在某些编程语言中，文件流对象打开文件后又叫做 <strong>文件句柄</strong>。文件句柄本身不存储文件的内容，但我们可以从文件句柄访问整个文件的内容或者写入内容到文件。文件句柄相当于程序和文件之间的一个通道。</p><p>文件句柄的读取方法很多。</p><h3 id="逐个单词读取至string变量"><a href="#逐个单词读取至string变量" class="headerlink" title="逐个单词读取至string变量"></a>逐个单词读取至string变量</h3><p>流运算符的一个特点就是从空白符后的第一个非空白字符开始，读取到下一个空白符为止。所以只能一个单词一个单词的提取。</p><p>常见的空白符有空格、制表符、换行符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"data.txt"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (in) <span class="keyword">while</span> (in &gt;&gt; x) vec.push_back(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : vec) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逐行读取至string变量"><a href="#逐行读取至string变量" class="headerlink" title="逐行读取至string变量"></a>逐行读取至string变量</h3><p><strong>getline</strong> 函数可以按行（换行符分割）读取文件，并将每行的内容保存在字符串类型的变量var里面：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (getline(文件句柄fh, 迭代变量var)) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>🐖：var中的行字符串不包含末尾的换行符。</p><p><strong>这个getline函数从哪里来的？</strong> getline函数用于从 <strong>ifstream</strong> 中按行读取文件内容，<strong>ifstream</strong> 派生自 <strong>istream</strong>，<code>&lt;istream&gt;</code> 头文件中就定义了这个 <strong>getline</strong> 函数。</p><h3 id="逐行读取至char数组"><a href="#逐行读取至char数组" class="headerlink" title="逐行读取至char数组"></a>逐行读取至char数组</h3><p>此外，文件输入流本身也提供了一个 <strong>getline</strong> 方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LINE_LENGTH = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> var[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (in.getline(var, LINE_LENGTH)) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>这个 getline 方法就显得笨重了许多，我们需要先预设一个 LINE_LENGTH，这个值要比文件最长的那一行的长度还要长（假设最长行的长度为99，则这个值最小应该设置为100）。然后我们需要声明一个迭代变量var，它是一个长为 LINE_LENGTH 的 <strong>字符数组</strong>。</p><p>getline 方法的第一个参数是迭代变量，第二个参数是 LINE_LENGTH。</p><p>所以这个 getline 方法实际上是将文件的每一行读进了一个等长的字符数组里面。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="流运算符"><a href="#流运算符" class="headerlink" title="流运算符"></a>流运算符</h3><p>流运算符可以用于写入文本文件，用于二进制文件可能会产生错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"output.txt"</span>)</span></span>;</span><br><span class="line">out &lt;&lt; setw(<span class="number">20</span>) &lt;&lt; setfill(<span class="string">'#'</span>) &lt;&lt; setiosflags(ios::left) &lt;&lt; <span class="string">"name: "</span> &lt;&lt; <span class="string">"barwe"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>尽管程序结束时会自动关闭打开的文件，但为了安全起见，建议手动关闭。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">in_out.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++标准库 &lt;strong&gt;fstream&lt;/strong&gt; 用来读写文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://chenyin.top/categories/Cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>C++标准库索引</title>
    <link href="http://chenyin.top/Cpp/20200710-e3c6.html"/>
    <id>http://chenyin.top/Cpp/20200710-e3c6.html</id>
    <published>2020-07-10T01:27:17.000Z</published>
    <updated>2020-07-10T07:51:41.425Z</updated>
    
    <content type="html"><![CDATA[<p>C++标准库总共51个头文件，按照内容可分为10个类，按照来源可分为3个类。</p><a id="more"></a><table><thead><tr><th style="text-align:center">51</th><th style="text-align:left">C++ （20）</th><th style="text-align:left">C (18)</th><th style="text-align:left">STL (13)</th></tr></thead><tbody><tr><td style="text-align:center">语言支持 (11)</td><td style="text-align:left">limits：C++数值类型特性<br>new：动态内存管理<br>typeinfo：运行时内存信息<br>exception：异常处理</td><td style="text-align:left">cstddef：C标准定义<br>climits：整型大小<br>cfloat：浮点型特性<br>cstdlib：C标准实用工具<br>cstdarg：可变参数<br>csetjmp：非局部跳转<br>csignal：C中断处理</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">输入输出 (10)</td><td style="text-align:left">iostream：标准输入输出流<br>istream：标准输入流<br>ostream：标准输出流<br>sstream：字符串流<br><a href="/Cpp/20200710-111f.html">fstream</a>：文件流<br><a href="https://baike.baidu.com/item/iomanip/3319954" target="_blank" rel="noopener">iomanip</a>：输入输出操纵器<br>ios：iostream的基类<br>iosfwd：输入输出前向声明<br>streambuf：流缓存</td><td style="text-align:left">cstdio：C标准输入输出</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">诊断功能 (3)</td><td style="text-align:left">stdexcept：异常类</td><td style="text-align:left">cassert：C断言验证<br>cerrno：C出错码</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">通用工具(4)</td><td style="text-align:left">-</td><td style="text-align:left">ctime：C时间日期</td><td style="text-align:left">utility：实用元件<br>functional：函数对象<br>memory：内存管理器</td></tr><tr><td style="text-align:center">字符串 (6)</td><td style="text-align:left">string：字符串类<br>strstream：C字符串流类</td><td style="text-align:left">cstring：C字符串<br>cctype：单字节字符类型<br>cwctype：多字节字符类型<br>cwchar：扩展多字节宽字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">容器 (8)</td><td style="text-align:left">bitset：位集</td><td style="text-align:left">-</td><td style="text-align:left"><a href="https://chenyin-rss.online" target="_blank" rel="noopener">vector</a>：向量<br>list：列表<br>queue：队列<br>deque：双队<br>stack：堆栈<br>map：映射<br>set：集合</td></tr><tr><td style="text-align:center">迭代器 (1)</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">iterator：迭代器</td></tr><tr><td style="text-align:center">算法 (2)</td><td style="text-align:left">-</td><td style="text-align:left">cios646：ISO646字符集替换</td><td style="text-align:left">algorithm：算法</td></tr><tr><td style="text-align:center">数值操作 (4)</td><td style="text-align:left">complex：复数<br>valarray：数值矢量</td><td style="text-align:left">cmath：C数学库</td><td style="text-align:left">numeric：数学运算</td></tr><tr><td style="text-align:center">本地化 (2)</td><td style="text-align:left">locale：本地化</td><td style="text-align:left">clocale：C本地化</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++标准库总共51个头文件，按照内容可分为10个类，按照来源可分为3个类。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://chenyin.top/categories/Cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>OD的基本使用2 - demo修改</title>
    <link href="http://chenyin.top/cracking/20191130-9c79.html"/>
    <id>http://chenyin.top/cracking/20191130-9c79.html</id>
    <published>2019-11-30T09:04:21.000Z</published>
    <updated>2020-07-10T01:46:27.888Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A00.jpg" alt="A00"></p><a id="more"></a><p>ODBG110: <a href="https://pan.baidu.com/s/1VklVhE7wH7qrEW2OOLElqw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VklVhE7wH7qrEW2OOLElqw</a> 提取码：uuhg<br>ODBG110BasicPlugins:  <a href="https://pan.baidu.com/s/1QG0ealpvKTTtjd26U9himQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1QG0ealpvKTTtjd26U9himQ</a> 提取码：6fym<br>ODBG Very More Plugins: <a href="https://pan.baidu.com/s/1VQoodK3ArkiGYzJazUToiw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VQoodK3ArkiGYzJazUToiw</a> 提取码：daoo<br>[教程]使用OllyDbg从零开始Cracking: <a href="https://pan.baidu.com/s/1l094huv-bQvka-QOhgNhhg" target="_blank" rel="noopener">https://pan.baidu.com/s/1l094huv-bQvka-QOhgNhhg</a> 提取码：65jv</p><h1 id="了解软件"><a href="#了解软件" class="headerlink" title="了解软件"></a>了解软件</h1><p>我们直接运行打开CRACKME.EXE文件进行注册，随机输入用户名和注册码，点击注册，软件报错，序列号不对，好吧，这才是正常的逻辑。现在尝试着修改软件，使我们输入任意的用户名和序列号，均通过验证。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A01.jpg" alt="A01"></p><p>程序弹出验证错误的消息框，调用的是系统的 <code>MessageBoxA</code> 方法，其它软件应该也是类似的吧。</p><p>消息框的标题是“No luck!”，文本是“No luck there, mate!”。</p><p>以上这是我们已知的重要信息，也是我们破解的关键地方。</p><h1 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h1><p>使用OD打开CRACKME.EXE，界面如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A02.jpg" alt="A02"></p><p>我们通过插件Command Bar（位于OD最下方）对消息弹窗函数 <code>MessageBoxA()</code> 加断点，断点的位置位于该函数的第一个指令处，这意味着如果程序遇到调用该函数的指令，会在跳转到该函数所在的内存区域后停留在第一个指令处。</p><p>加断点的命令为：<code>bp MessageBoxA</code></p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A03.jpg" alt="A03"></p><p>加断点后点击B按钮查看断点标记情况，可以看到背景自动变灰的哪一行就是我们上一步加断点的地方。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A04.jpg" alt="A04"></p><p>我们可以看出，<code>MessageBoxA()</code> 函数的一些基本信息：</p><ul><li>该函数存储的位置为 750F8700 到某个未知位置</li><li>该函数的代码位于 USER32 模块中</li><li>该函数的第一个指令是 <code>MOV EDI, EDI</code></li></ul><p>我们在该条目上右键选择 Follw in Disassembler 或者直接按回车键进入该函数存储的指令区域。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A05.jpg" alt="A05"></p><p>如下图，指令区域跳转至 750F8700 处并自动高亮显示。第一列地址处红色高亮，说明此处添加了断点。</p><p>我们往下数直到第一个 <strong>RETN</strong> 出现的区域为 <code>MessageBoxA()</code> 函数的内存区域。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A06.jpg" alt="A06"></p><p>如果我们此时执行程序，程序会运行到端点处暂停，因为没有实际执行 <code>MessageBoxA()</code> 函数，所以不会有注册成功或者注册失败的消息弹出。</p><p>第一次按下 F9 会跳转到 00401000，这个位置是程序执行的入口。</p><p>再次按下 F9 运行程序。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A07.jpg" alt="A07"></p><p>此时弹出了一个笑脸窗口，这个就是模拟软件的主窗口。</p><p>同时我们观察 EIP = 777BA8FC，说明程序并未执行到我们设置的断点（750F8700）处，为什么呢？因为执行 <code>MessageBoxA()</code> 函数的前提是进行注册，而注册是用户手动完成的。因此我们需要在模拟软件中手动注册。</p><p>点击 Help 按钮选择注册，这里我们特定随机输入用户名“123qwe”，密码为“asdzxc”，点击 OK。</p><p>接着OD中程序暂停在我们设置的断点上，注意此时 EIP = 750F8700。<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A08.jpg" alt="A08"></p><p>观察堆栈的信息：</p><ul><li>当前栈顶位置为 0019FDB8，存储在寄存器 ESP 中</li><li>当前子程序执行完之后会跳回到 004013C1</li><li>程序是从 004013BC 跳转到当前断点位置的，004013BC 处进行了 <code>MessageBoxA()</code> 函数的调用（CALL）</li><li>在调用 004013BC 处的 <code>MessageBoxA()</code> 函数之前，该函数的参数也被压入栈中。调用该函数提供了四个参数，分别是 Style, Title, Text, hOwner。观察它们的值可以发现，调用这个函数将会告诉用户注册失败。</li></ul><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A09.jpg" alt="A09"></p><p>我们在栈顶位置右键选择 Follw in Disassembler 或者直接按回车打开 004013BC 处调用 <code>MessageBoxA()</code> 函数的位置<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A10.jpg" alt="A10"></p><p>指令区域显示的并不是 004013BC 处调用 <code>MessageBoxA()</code> 函数的位置，而是调用结束后跳转继续执行的位置 004013C1</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A11.jpg" alt="A11"></p><p>滑动滚轮或者拉动滑条，观察 004013C1 上面的几行命令</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A12.jpg" alt="A12"></p><p>004013C1 处调用了 <code>MessageBoxA()</code> 函数，该函数需要的参数在 004013AD ~ 004013B9。</p><p>可以预见的是，程序会在这里调用 <code>MessageBoxA()</code> 函数，对我们输入的注册码做出回应，并且告诉我们很遗憾。</p><p>那么是什么导致程序会选择在这里调用 <code>MessageBoxA()</code> 函数呢？</p><p>因为指令都是按顺序执行的，我们去 004013C1 上面找寻答案。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A13.jpg" alt="A13"></p><p>因为 004013AD ~ 004013BC 是在定义 <code>MessageBoxA()</code> 函数的参数和调用，我们点击它们上面的 <code>POP ESI</code>，哎，我们在下面的信息栏中发现了一条重要信息：“Jump from 0040138B”，说明 <code>POP ESI</code> 指令从 0040138B 跳转而来，并且之后继续执行了 <code>MessageBoxA()</code> 函数。</p><p>我们跳转到 0040138B 位置，查看附近的指令：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A14.jpg" alt="A14"></p><p>0040138B 是一条 <strong>JB</strong> 跳转指令，而且在它的上面有这么一条 <code>CMP AL, 41</code> 指令。这表示：当前仅当寄存器 AL 的值 <strong>小于</strong> 41 时才会跳转到 004013AC 处执行 <code>POP ESI</code> 和调用 <code>MessageBoxA()</code> 函数。</p><p>那如果不管 <code>CMP AL, 41</code> 的结果如何，下面都不进行跳转是不是就不会弹出让人遗憾的消息框了？</p><p>这里我们将 <code>CMP AL, 41</code> 篡改成 <code>CMP AL, AL</code> ，这使得 <strong>JB</strong> 跳转永远不会执行。</p><p>双击 <code>CMP AL, 41</code> 指令即可修改。修改后结果如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A15.jpg" alt="A15"></p><p>第二列变为红色字体，表示改行经过修改；指令也已经发生变化。</p><p>按下 F9 执行程序，弹出消息框：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A16.jpg" alt="A16"></p><p>呀，还是注册不通过~</p><p>按下“确定”按钮，OD中程序中又暂停在了 750F8700 的位置，是不是有点眼熟这个位置？</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A17.jpg" alt="A17"></p><p>唯一不同的在这个地方：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A18.jpg" alt="A18"></p><p>这表示有两个不同的地方调用了 <code>MessageBoxA()</code> 函数，一个是 004013BC，一个是 00401378。</p><p>前者我们已经解决了，后者是新出现的。</p><p>这表示有两个甚至多个验证方法检查我们的注册信息，而且明显 004013BC 处的检查排在 00401378 前面。</p><p>下面跳转到 00401378 附近：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A19.jpg" alt="A19"></p><p>我们逐级向上检查，发现在 00401362 的 <code>PUSH 0</code> 处出现了 “Local call from 00401245”，接着调用了另一个USER32库中的函数 <code>MessageBeep</code>，然后就调用了即将给我们抛出遗憾信息的 <code>MessageBoxA</code> 函数。</p><p>我们跳转到 00401245：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A20.jpg" alt="A20"></p><p>这里首先比较了 EAX 和 EBX 的值，然后根据比较结果进行跳转：</p><ul><li>如果相等，<strong>JE</strong> 指令被执行，跳转到 0040124C 执行 <code>CALL ~.0040134D</code></li><li>如果不等，<strong>JE</strong> 指令不执行，直接执行 <code>CALL ~.00401362</code></li><li>不管怎样，最终都会跳转到 004011E6</li></ul><p>我们知道，如果 EAX 和 EBX 的值如果不相等，程序就会跳转到 00401362 继续执行，从而调用 <code>MessageBoxA</code> 函数使用户感到遗憾。那么如果 EAX 和 EBX 的值如果相等会怎么样？0040134D 又是什么东西？我们定位到 0040134D 瞅一下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A21.jpg" alt="A21"></p><p>我们可以看到，0040134D ~ 0040135C 区域依然在单纯地调用 <code>MessageBoxA</code> 函数，只是函数参数变得善良了，也就是说，这块区域只有在我们的注册信息有效的前提下才会被调用。而下面的 00401362 ~ 00401378 区域恰好是我们我们注册信息不通过会被执行的指令。</p><p>回到 00401245：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A20.jpg" alt="A20"></p><p>如果我们使 00401241 处的 <strong>CMP</strong> 结果恒成立会怎么样？例如 <code>CMP EAX, EAX</code>。</p><p>那么此时，不管我们怎么输注册信息，都只会跳转 0040134D 执行注册成功的信息。</p><p>修改后的结果如下：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A22.jpg" alt="A22"></p><p>这个模拟程序对注册信息进行了两次验证，我们也进行了两次修改，从而屏蔽掉了有效性检查。</p><h1 id="保存成果"><a href="#保存成果" class="headerlink" title="保存成果"></a>保存成果</h1><p>修改完成后在指令窗口的任意位置右键选择 Copy to executable 中的 All modifications：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A23.jpg" alt="A23"></p><p>选择 Copy all:</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A24.jpg" alt="A24"></p><p>弹出了一个新的指令集页面：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A25.jpg" alt="A25"></p><p>该页面内任意位置右键选择 Save file：</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A26.jpg" alt="A26"></p><p>重命名例如 CRACKME2.EXE，保存即可<img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A27.jpg" alt="A27"></p><p>关闭OD，验证破解成果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/A/A00.jpg&quot; alt=&quot;A00&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cracking" scheme="http://chenyin.top/categories/cracking/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编 - 标志位和跳转</title>
    <link href="http://chenyin.top/cracking/20191130-ddcd.html"/>
    <id>http://chenyin.top/cracking/20191130-ddcd.html</id>
    <published>2019-11-29T17:08:03.000Z</published>
    <updated>2019-11-29T17:30:04.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/19.jpg" alt=""></p><p><strong>跳转指令</strong> 大部分是基于 <strong>标志位</strong> 的值进行的，也有基于两个数的比较进行的。</p><a id="more"></a><h1 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h1><h2 id="进位标志C"><a href="#进位标志C" class="headerlink" title="进位标志C"></a>进位标志C</h2><p><strong>进位/借位标志CF</strong>（Carry Flag）：当运算结果的<strong>最高有效位</strong>出现<strong>进位</strong>或者<strong>借位</strong>的时候，进位/借位标志被设为1，否则为0。</p><p>我们考虑<code>BB+6A=125</code>，我们说它出现了<strong>进位</strong>，我们这么认为是因为我们假设了操作数的有效位为2，而计算结果的有效位为3，即两个最高只有十位的数相加得到了最高位数为百位的结果，按照这种理解<code>49+6D=B6</code>没有发生进位。相应的，<code>10-9=7</code>发生了<strong>借位</strong>，因为操作数最高位为十位，计算结果最高位位各位。但是，在OD中，每个数用4个字节（1字节=8bits）表示，取值范围从 00 00 00 00 ~ FF FF FF FF，操作数最高位为第8位，在这种情况下所谓的发生进位的<code>BB+6A</code>完整的写法是<code>00 00 00 BB + 00 00 00 6A = 00 00 01 25</code>，此时最高位（第8位）并未发生进位。另一个例子,<code>FF FF FF FF + 00 00 00 01</code>就会在第9位产生1，即发生了<strong>进位</strong>，这已经超过了寄存器允许的最大值，去除溢出的部分，计算结果为<code>00 00 00 00</code>。<strong>借位</strong>类似，例如<code>00 00 00 02 - 00 00 00 03 = FF FF FF FF</code>。</p><h2 id="奇偶标志P"><a href="#奇偶标志P" class="headerlink" title="奇偶标志P"></a>奇偶标志P</h2><p><strong>奇偶标志位PF</strong>（Parity Flag）：当运算结果<strong>最低字节</strong>的二进制数中1的个数为偶数时PF=1，为奇数时PF=0。</p><p>为什么是<strong>最低字节</strong>？没太搞懂，在OD中：</p><ul><li><code>ADD 8930, 0</code>的结果显示P=1。8930H的二进制为1000 1001 0011 0000B，这个数中最低字节有两个1，总共五个1</li><li><code>ADD 8931, 0</code>的结果显示P=0。尽管总共六个1，但是最低字节有3个1</li></ul><h2 id="零标志Z"><a href="#零标志Z" class="headerlink" title="零标志Z"></a>零标志Z</h2><p><strong>零标志ZF</strong>（Zero Flag）：当计算结果为0时Z=1，否为为0。<br>零标志常用来判断两个数是否相等。</p><h2 id="符号标志S"><a href="#符号标志S" class="headerlink" title="符号标志S"></a>符号标志S</h2><p><strong>符号标志SF</strong>（Sign Flag）：我们通常说的<strong>有符号数</strong>指的是负数。当计算结果为负数时S=1，否则S=0。</p><p>四字节数的取值范围是 00 00 00 00 ~ FF FF FF FF，但是实际的取值范围还取决于该四字节数表示的<strong>有符号数</strong>还是<strong>无符号数</strong>：</p><ul><li>如果是<strong>无符号数</strong>：四字节数的表面值就等于实际值；</li><li>如果是<strong>有符号数</strong>：在有限的取值范围下，为了保证正数和负数数目相同，规定 00 00 00 00 ~ 7F FF FF FF 表示相当于十进制的 0 ~ 21,4748,3647，而 80 00 00 00 ~ FF FF FF FF 表示相当于十进制中的 -21,4748,3648 ~ -1。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/18.jpg" alt=""></li></ul><h2 id="溢出标志O"><a href="#溢出标志O" class="headerlink" title="溢出标志O"></a>溢出标志O</h2><p><strong>溢出标志O</strong>（Overflow Flag）：只对<strong>有符号数</strong>的运算，在范围正中间附近（即7F FF FF FF ~ 80 00 00 00）时，计算结果的符号发生改变，则称之为<strong>溢出</strong>，此时O=1。计算结果的期望值与实际值不相等，是的计算结果发生错误。</p><p>例如 <code>7F FF FF FF + 1 = 80 00 00 00</code> 会形成<strong>溢出</strong>。</p><p>换句话说，在OD中，如果计算结果的值超出了[-80000000H, 7FFFFFFFH]的范围就属于<strong>溢出</strong>。</p><h2 id="其它标志位-A-T-D"><a href="#其它标志位-A-T-D" class="headerlink" title="其它标志位: A T D"></a>其它标志位: A T D</h2><h1 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h1><p>洒家总结了以下常见的<strong>跳转指令</strong>，大致可以分为4类：</p><ul><li>检查<strong>标志位</strong>进行跳转</li><li>检查<strong>两个操作数</strong>进行跳转</li><li>比较<strong>两个无符号数</strong>进行跳转</li><li>比较<strong>两个有符号数</strong>进行跳转</li></ul><h2 id="基于标志位"><a href="#基于标志位" class="headerlink" title="基于标志位"></a>基于标志位</h2><p>常见的标志为 <strong>C</strong>(进位/借位)，<strong>P</strong>(奇偶), <strong>Z</strong>(零), <strong>S</strong>(符号), <strong>O</strong>(溢出)，标志位的取值有0和1两种。</p><p>标志位值为1时使用<strong>J</strong>前缀进行跳转，值为0时使用<strong>JN</strong>前缀进行跳转。</p><table><thead><tr><th style="text-align:center">Description</th><th style="text-align:center">Flag</th><th style="text-align:center"><strong>J-</strong> 跳转1</th><th style="text-align:center"><strong>JN-</strong> 跳转0</th></tr></thead><tbody><tr><td style="text-align:center">低字节中1的数目为偶数？Parity？</td><td style="text-align:center"><strong>-P</strong></td><td style="text-align:center">JP</td><td style="text-align:center">JNP</td></tr><tr><td style="text-align:center">计算结果为0？Zero？</td><td style="text-align:center"><strong>-Z</strong></td><td style="text-align:center">JZ</td><td style="text-align:center">JNZ</td></tr><tr><td style="text-align:center">有符号？是负数？Zero？</td><td style="text-align:center"><strong>-S</strong></td><td style="text-align:center">JS</td><td style="text-align:center">JNS</td></tr><tr><td style="text-align:center">溢出？Overflow？</td><td style="text-align:center"><strong>-O</strong></td><td style="text-align:center">JO</td><td style="text-align:center">JNO</td></tr><tr><td style="text-align:center">进位/借位？Carry？</td><td style="text-align:center"><strong>-C</strong></td><td style="text-align:center">JC</td><td style="text-align:center">JNC</td></tr></tbody></table><h2 id="比较两个操作数"><a href="#比较两个操作数" class="headerlink" title="比较两个操作数"></a>比较两个操作数</h2><h3 id="比较两个普通操作数"><a href="#比较两个普通操作数" class="headerlink" title="比较两个普通操作数"></a>比较两个普通操作数</h3><p>比较两个操作数使用<code>CMP leftOp, rightOp</code>，比较结果保存至<strong>标志位</strong>中，然后使用<code>JE</code>或者<code>JNE</code>进行跳转。</p><p><strong>JE</strong>和<strong>JNE</strong>根据<strong>标志位Z</strong>的结果判定是否需要跳转。JE和JZ、JNE和JNE实际上是等效的，都是以标志位Z为依据进行跳转。它们的不同在于直观理解上：</p><ul><li>后缀<strong>E</strong>（Equal）倾向于判断两个操作数是否相同</li><li>后缀<strong>Z</strong>（Zero）倾向于检查标志位Z的值</li></ul><p>在不同的场景中选择不同的语法是个很好的习惯。</p><h3 id="检查寄存器值是否为0"><a href="#检查寄存器值是否为0" class="headerlink" title="检查寄存器值是否为0"></a>检查寄存器值是否为0</h3><p>检查寄存器的值是否为0，当然可以使用CMP，如<code>CMP EAX, 0</code>，但是更一般的，我们为寄存器设计了专用的指令。</p><p>指令结构为：<code>J</code> + <code>[寄存器名称]</code> + <code>Z</code> (表示Zero)，例如：</p><ul><li><code>JECXZ</code> 表示当ECX=0时跳转</li><li><code>JCXZ</code> 表示当CX=0时跳转</li></ul><p>其它的寄存器检查类似。</p><h2 id="比较两个无符号数"><a href="#比较两个无符号数" class="headerlink" title="比较两个无符号数"></a>比较两个无符号数</h2><p>跳转前缀只使用 <strong>J</strong>，跳转后缀使用 <strong>B/E/A</strong> 系统 。</p><p>当第一个操作数 <strong>小于</strong> 第二个操作数时，记为 <strong>B=1</strong>，意为 Below。<br>当第一个操作数 <strong>等于</strong> 第二个操作数时，记为 <strong>E=1</strong>，意为 Equal；<br>当第一个操作数 <strong>大于</strong> 第二个操作数时，记为 <strong>A=1</strong>，意为 Above。<br>当然上述记法并不代表存在这样一个标志位B，E，A。</p><p>假设第一个操作数为<code>left</code>，第二个操作数为<code>right</code>，则</p><table><thead><tr><th style="text-align:center">跳转条件</th><th style="text-align:center">正面描述 指令</th><th style="text-align:center">等价的反面描述 指令 （可以但没必要）</th></tr></thead><tbody><tr><td style="text-align:center">$\text{left} &lt; \text{right}$</td><td style="text-align:center">小于 <strong>JB</strong></td><td style="text-align:center">不大于等于 <strong>JNAE</strong></td></tr><tr><td style="text-align:center">$\text{left} \le \text{right}$</td><td style="text-align:center">小于等于 <strong>JBE</strong></td><td style="text-align:center">不大于 <strong>JNA</strong></td></tr><tr><td style="text-align:center">$\text{left} = \text{right}$</td><td style="text-align:center">等于 <strong>JE</strong></td><td style="text-align:center">既不大于也不小于 JNAB （这个指令不存在）</td></tr><tr><td style="text-align:center">$\text{left} &gt; \text{right}$</td><td style="text-align:center">大于 <strong>JA</strong></td><td style="text-align:center">不小于等于 <strong>JNBE</strong></td></tr><tr><td style="text-align:center">$\text{left} \ge \text{right}$</td><td style="text-align:center">大于等于 <strong>JAE</strong></td><td style="text-align:center">不小于 <strong>JNB</strong></td></tr></tbody></table><h2 id="比较两个有符号数"><a href="#比较两个有符号数" class="headerlink" title="比较两个有符号数"></a>比较两个有符号数</h2><p>与无符号数比较类似，只是后缀采用 <strong>L/E/G</strong> 系统，分别代表 Less / Equal / Greater。</p><table><thead><tr><th style="text-align:center">跳转条件</th><th style="text-align:center">正面描述 指令</th><th style="text-align:center">等价的反面描述 指令 （可以但没必要）</th></tr></thead><tbody><tr><td style="text-align:center">$\text{left} &lt; \text{right}$</td><td style="text-align:center">小于 <strong>JL</strong></td><td style="text-align:center">不大于等于 <strong>JNGE</strong></td></tr><tr><td style="text-align:center">$\text{left} \le \text{right}$</td><td style="text-align:center">小于等于 <strong>JLE</strong></td><td style="text-align:center">不大于 <strong>JNG</strong></td></tr><tr><td style="text-align:center">$\text{left} = \text{right}$</td><td style="text-align:center">等于 <strong>JE</strong></td><td style="text-align:center">既不大于也不小于 <strong>JNGL</strong> （这个指令不存在）</td></tr><tr><td style="text-align:center">$\text{left} &gt; \text{right}$</td><td style="text-align:center">大于 <strong>JG</strong></td><td style="text-align:center">不小于等于 <strong>JNLE</strong></td></tr><tr><td style="text-align:center">$\text{left} \ge \text{right}$</td><td style="text-align:center">大于等于 <strong>JGE</strong></td><td style="text-align:center">不小于 <strong>JNL</strong></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/19.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳转指令&lt;/strong&gt; 大部分是基于 &lt;strong&gt;标志位&lt;/strong&gt; 的值进行的，也有基于两个数的比较进行的。&lt;/p&gt;
    
    </summary>
    
      <category term="cracking" scheme="http://chenyin.top/categories/cracking/"/>
    
    
      <category term="汇编" scheme="http://chenyin.top/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>请求库2 - requests</title>
    <link href="http://chenyin.top/spider/20191128-908f.html"/>
    <id>http://chenyin.top/spider/20191128-908f.html</id>
    <published>2019-11-28T03:31:26.000Z</published>
    <updated>2019-11-28T06:14:57.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests.jpg" alt=""></p><p><strong>urllib</strong>是基本库，功能实现尚且比较复杂。<strong>requests</strong>库更加友好、高效。</p><p><strong>requests</strong>能更加简单的实现Cookies、登录验证和代理设置等额外操作。</p><a id="more"></a><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="基本的GET请求"><a href="#基本的GET请求" class="headerlink" title="基本的GET请求"></a>基本的GET请求</h2><h3 id="实例1：抓取知乎专题的标题"><a href="#实例1：抓取知乎专题的标题" class="headerlink" title="实例1：抓取知乎专题的标题"></a>实例1：抓取知乎专题的标题</h3><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests1.jpg" alt=""></p><p><strong>文本内容</strong>通过<code>response.text</code>属性查询。</p><h4 id="URL参数"><a href="#URL参数" class="headerlink" title="URL参数"></a>URL参数</h4><p>如果get访问的服务器需要参数需要在URL中加入参数，常见的方式有两种：</p><ol><li>直接构建带参数的URL字符串，通过<strong>问号</strong>分隔，例如 <code>http://xxx.com/?key=value</code></li><li>通过<strong>param参数</strong>传递URL参数，该参数接受一个<strong>字典</strong>，如 <code>response = requests.get(..., param = {&#39;k&#39;: &#39;v&#39;})</code><ol><li>可以是简单的字典，如 <code>{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;}</code>构造出的参数字符串为 <code>?key1=value1&amp;key2=value2</code></li><li>可以有多个值，如 <code>{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: [&quot;key21&quot;, &quot;key22&quot;]}</code>构造出的参数字符串为<code>?key1=value1&amp;key2=value21&amp;key2=value22</code> </li><li>可以是空值，此时会忽略这个参数，如 <code>{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: None}</code>构造出的参数字符串为 <code>?key1=value1</code></li></ol></li></ol><h3 id="实例2：抓取json数据"><a href="#实例2：抓取json数据" class="headerlink" title="实例2：抓取json数据"></a>实例2：抓取json数据</h3><p>json数据本质上还是文本数据，我们抓取后需要转化为字典/json格式，为避免这一转化步骤，可直接通过<code>response.json()</code>方法获取json字典</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests2.jpg" alt=""></p><h3 id="实例3：抓取GitHub站点图标"><a href="#实例3：抓取GitHub站点图标" class="headerlink" title="实例3：抓取GitHub站点图标"></a>实例3：抓取GitHub站点图标</h3><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests3.jpg" alt=""></p><p><strong>二进制内容</strong>通过<code>response.content</code>获取，直接打印bytes类型的字符串是没有视觉意义的，因此需要保存到本地。注意文件打开格式为<code>wb</code>。</p><p>图片、视频、音频等二进制多媒体文件都用这种方式获取。</p><h2 id="基本的POST请求"><a href="#基本的POST请求" class="headerlink" title="基本的POST请求"></a>基本的POST请求</h2><p>POST请求需要提交<strong>表单</strong>（form），表单数据在python中以<strong>字典</strong>表示，通过<code>requests.post()</code>函数的<code>data</code>参数传入。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests4.jpg" alt=""></p><p>在<strong>响应</strong>结果中我们可以看到<strong>请求</strong>的数据存储在<code>form</code>字段中。</p><h2 id="响应（response）"><a href="#响应（response）" class="headerlink" title="响应（response）"></a>响应（response）</h2><p>我们通过<code>requests.get()</code>或者<code>requests.post()</code>向服务器发送一个<strong>请求</strong>（request），服务器给我们一个返回结果称之为<strong>响应</strong>（response）。</p><p><strong>响应</strong>结果中包含了许多的信息，主要如下：<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests5.jpg" alt=""></p><ul><li><strong>text</strong>：str类型的请求内容</li><li><strong>json()</strong> ：如果返回内容本质上是json数据，直接调用这个</li><li><strong>content</strong>：bytes类型的请求内容</li><li><strong>cookies</strong>：类型为<code>requests.cookies.RequestsCookieJar</code></li><li><strong>headers</strong>：字典，<code>requests.structures.CaseInsensitiveDict</code>类型</li><li><strong>ok</strong>：bool类型，请求是否正常返回结果</li><li><strong>status_code</strong>：int类型，状态码，正常为200</li><li><strong>encoding</strong>：编码方式，常见的如utf-8, gbk</li><li><strong>url</strong>：请求的url</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>requests内置了一个状态码查询对象<code>requests.codes</code></p><p>例如正常返回200对应的状态码对象为<code>requests.codes.ok</code></p><p>下面是常见的<strong>状态码</strong>和对应的<strong>状态码对象</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信息性状态码</span></span><br><span class="line"><span class="number">100</span>: (<span class="string">'continue'</span>,),</span><br><span class="line"><span class="number">101</span>: (<span class="string">'switching_protocols'</span>,),</span><br><span class="line"><span class="number">102</span>: (<span class="string">'processing'</span>,),</span><br><span class="line"><span class="number">103</span>: (<span class="string">'checkpoint'</span>,),</span><br><span class="line"><span class="number">122</span>: (<span class="string">'uri_too_long'</span>, <span class="string">'request_uri_too_long'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功状态码</span></span><br><span class="line"><span class="number">200</span>: (<span class="string">'ok'</span>, <span class="string">'okay'</span>, <span class="string">'all_ok'</span>, <span class="string">'all_okay'</span>, <span class="string">'all_good'</span>, <span class="string">'\\o/'</span>, <span class="string">'✓'</span>),</span><br><span class="line"><span class="number">201</span>: (<span class="string">'created'</span>,),</span><br><span class="line"><span class="number">202</span>: (<span class="string">'accepted'</span>,),</span><br><span class="line"><span class="number">203</span>: (<span class="string">'non_authoritative_info'</span>, <span class="string">'non_authoritative_information'</span>),</span><br><span class="line"><span class="number">204</span>: (<span class="string">'no_content'</span>,),</span><br><span class="line"><span class="number">205</span>: (<span class="string">'reset_content'</span>, <span class="string">'reset'</span>),</span><br><span class="line"><span class="number">206</span>: (<span class="string">'partial_content'</span>, <span class="string">'partial'</span>),</span><br><span class="line"><span class="number">207</span>: (<span class="string">'multi_status'</span>, <span class="string">'multiple_status'</span>, <span class="string">'multi_stati'</span>, <span class="string">'multiple_stati'</span>),</span><br><span class="line"><span class="number">208</span>: (<span class="string">'already_reported'</span>,),</span><br><span class="line"><span class="number">226</span>: (<span class="string">'im_used'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向状态码</span></span><br><span class="line"><span class="number">300</span>: (<span class="string">'multiple_choices'</span>,),</span><br><span class="line"><span class="number">301</span>: (<span class="string">'moved_permanently'</span>, <span class="string">'moved'</span>, <span class="string">'\\o-'</span>),</span><br><span class="line"><span class="number">302</span>: (<span class="string">'found'</span>,),</span><br><span class="line"><span class="number">303</span>: (<span class="string">'see_other'</span>, <span class="string">'other'</span>),</span><br><span class="line"><span class="number">304</span>: (<span class="string">'not_modified'</span>,),</span><br><span class="line"><span class="number">305</span>: (<span class="string">'use_proxy'</span>,),</span><br><span class="line"><span class="number">306</span>: (<span class="string">'switch_proxy'</span>,),</span><br><span class="line"><span class="number">307</span>: (<span class="string">'temporary_redirect'</span>, <span class="string">'temporary_moved'</span>, <span class="string">'temporary'</span>),</span><br><span class="line"><span class="number">308</span>: (<span class="string">'permanent_redirect'</span>,</span><br><span class="line">      <span class="string">'resume_incomplete'</span>, <span class="string">'resume'</span>,), <span class="comment"># These 2 to be removed in 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端错误状态码</span></span><br><span class="line"><span class="number">400</span>: (<span class="string">'bad_request'</span>, <span class="string">'bad'</span>),</span><br><span class="line"><span class="number">401</span>: (<span class="string">'unauthorized'</span>,),</span><br><span class="line"><span class="number">402</span>: (<span class="string">'payment_required'</span>, <span class="string">'payment'</span>),</span><br><span class="line"><span class="number">403</span>: (<span class="string">'forbidden'</span>,),</span><br><span class="line"><span class="number">404</span>: (<span class="string">'not_found'</span>, <span class="string">'-o-'</span>),</span><br><span class="line"><span class="number">405</span>: (<span class="string">'method_not_allowed'</span>, <span class="string">'not_allowed'</span>),</span><br><span class="line"><span class="number">406</span>: (<span class="string">'not_acceptable'</span>,),</span><br><span class="line"><span class="number">407</span>: (<span class="string">'proxy_authentication_required'</span>, <span class="string">'proxy_auth'</span>, <span class="string">'proxy_authentication'</span>),</span><br><span class="line"><span class="number">408</span>: (<span class="string">'request_timeout'</span>, <span class="string">'timeout'</span>),</span><br><span class="line"><span class="number">409</span>: (<span class="string">'conflict'</span>,),</span><br><span class="line"><span class="number">410</span>: (<span class="string">'gone'</span>,),</span><br><span class="line"><span class="number">411</span>: (<span class="string">'length_required'</span>,),</span><br><span class="line"><span class="number">412</span>: (<span class="string">'precondition_failed'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">413</span>: (<span class="string">'request_entity_too_large'</span>,),</span><br><span class="line"><span class="number">414</span>: (<span class="string">'request_uri_too_large'</span>,),</span><br><span class="line"><span class="number">415</span>: (<span class="string">'unsupported_media_type'</span>, <span class="string">'unsupported_media'</span>, <span class="string">'media_type'</span>),</span><br><span class="line"><span class="number">416</span>: (<span class="string">'requested_range_not_satisfiable'</span>, <span class="string">'requested_range'</span>, <span class="string">'range_not_satisfiable'</span>),</span><br><span class="line"><span class="number">417</span>: (<span class="string">'expectation_failed'</span>,),</span><br><span class="line"><span class="number">418</span>: (<span class="string">'im_a_teapot'</span>, <span class="string">'teapot'</span>, <span class="string">'i_am_a_teapot'</span>),</span><br><span class="line"><span class="number">421</span>: (<span class="string">'misdirected_request'</span>,),</span><br><span class="line"><span class="number">422</span>: (<span class="string">'unprocessable_entity'</span>, <span class="string">'unprocessable'</span>),</span><br><span class="line"><span class="number">423</span>: (<span class="string">'locked'</span>,),</span><br><span class="line"><span class="number">424</span>: (<span class="string">'failed_dependency'</span>, <span class="string">'dependency'</span>),</span><br><span class="line"><span class="number">425</span>: (<span class="string">'unordered_collection'</span>, <span class="string">'unordered'</span>),</span><br><span class="line"><span class="number">426</span>: (<span class="string">'upgrade_required'</span>, <span class="string">'upgrade'</span>),</span><br><span class="line"><span class="number">428</span>: (<span class="string">'precondition_required'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">429</span>: (<span class="string">'too_many_requests'</span>, <span class="string">'too_many'</span>),</span><br><span class="line"><span class="number">431</span>: (<span class="string">'header_fields_too_large'</span>, <span class="string">'fields_too_large'</span>),</span><br><span class="line"><span class="number">444</span>: (<span class="string">'no_response'</span>, <span class="string">'none'</span>),</span><br><span class="line"><span class="number">449</span>: (<span class="string">'retry_with'</span>, <span class="string">'retry'</span>),</span><br><span class="line"><span class="number">450</span>: (<span class="string">'blocked_by_windows_parental_controls'</span>, <span class="string">'parental_controls'</span>),</span><br><span class="line"><span class="number">451</span>: (<span class="string">'unavailable_for_legal_reasons'</span>, <span class="string">'legal_reasons'</span>),</span><br><span class="line"><span class="number">499</span>: (<span class="string">'client_closed_request'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端错误状态码</span></span><br><span class="line"><span class="number">500</span>: (<span class="string">'internal_server_error'</span>, <span class="string">'server_error'</span>, <span class="string">'/o\\'</span>, <span class="string">'✗'</span>),</span><br><span class="line"><span class="number">501</span>: (<span class="string">'not_implemented'</span>,),</span><br><span class="line"><span class="number">502</span>: (<span class="string">'bad_gateway'</span>,),</span><br><span class="line"><span class="number">503</span>: (<span class="string">'service_unavailable'</span>, <span class="string">'unavailable'</span>),</span><br><span class="line"><span class="number">504</span>: (<span class="string">'gateway_timeout'</span>,),</span><br><span class="line"><span class="number">505</span>: (<span class="string">'http_version_not_supported'</span>, <span class="string">'http_version'</span>),</span><br><span class="line"><span class="number">506</span>: (<span class="string">'variant_also_negotiates'</span>,),</span><br><span class="line"><span class="number">507</span>: (<span class="string">'insufficient_storage'</span>,),</span><br><span class="line"><span class="number">509</span>: (<span class="string">'bandwidth_limit_exceeded'</span>, <span class="string">'bandwidth'</span>),</span><br><span class="line"><span class="number">510</span>: (<span class="string">'not_extended'</span>,),</span><br><span class="line"><span class="number">511</span>: (<span class="string">'network_authentication_required'</span>, <span class="string">'network_auth'</span>, <span class="string">'network_authentication'</span>)</span><br></pre></td></tr></table></figure><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><p>这里涉及到一个 <strong>Session</strong> 的概念。不管是调用<code>get</code>还是调用<code>post</code>或者其它请求方法，requests都会默认给我们建立一个Session，当请求完成自动·关闭Session。一个Session就相当于打开了一个浏览器，我们打开浏览器，点击某个页面，看到了信息，然后关闭浏览器。</p><p>如果我们连续两次发出请求，其实是相当于打开了两个浏览器窗口。两个窗口之间的信息是不互通的，例如我在一个浏览器中登录了，想在第二个浏览器中获取登陆后的个人信息是做不到的，除非我们手动在第二个浏览器的请求中添加第一次登录的Cookie信息。</p><p>如果我们是在同一个浏览器中打开了两个标签页，情况就不一样了。第一个标签页中登录，第二个标签页也处于登录状态。</p><p>Session方式通过<code>requests.Session()</code>初始化，返回一个<code>requests.session.Session</code>对象。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests7.jpg" alt=""></p><p>Session通常用来打开同一个站点的不同页面。</p><h2 id="POST上传文件"><a href="#POST上传文件" class="headerlink" title="POST上传文件"></a>POST上传文件</h2><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests6.jpg" alt="requests6"></p><p><code>requests.post()</code>的参数<code>files</code>接受一个字典类型的数据，字典每个元素标识了相应的文件</p><p>注意传入的字典包含的是 <strong>文件对象</strong>，而不是文件名字符串。</p><h2 id="Cookies获取"><a href="#Cookies获取" class="headerlink" title="Cookies获取"></a>Cookies获取</h2><p>Cookies信息存储在<code>response.cookies</code>中，数据类型为 <strong>requests.cookies.RequestsCookieJar</strong>。</p><p><code>response.cookies.items()</code>返回一个 <strong>元组列表</strong>。</p><p>Cookies可以用来维持 <strong>登录状态</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'...'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Chrome/53.0.2785.116'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://www.zhihu.com'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><p>原文所举的12306的例子好像已经被修复了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>, verify=<span class="keyword">True</span>)</span><br><span class="line">response.status_code <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>如果设置<code>varify = True</code>(默认值)，当我们请求一个HTTPS的站点需要验证SSL证书，如果证书无效（不存在或者不合法），程序抛出<code>requests.exceptions.SSLError</code>。</p><p>不验证SSL证书需要手动设置<code>varify = False</code>，可能会抛出 <strong>警告</strong>：建议设置证书。</p><p>忽略警告可以使用：</p><ul><li><code>requests.packages.urllib3.disable_warnings()</code></li><li><code>import logging; logging.captureWarnings(True)</code></li></ul><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p> 对于某些网站，在测试的时候请求几次，能正常获取内容。但是一旦开始大规模爬取，对于大规模且频繁的请求，网站可能会弹出验证码，或者跳转到登录认证页面，更甚者可能会直接封禁客户端的IP，导致一定时间段内无法访问。 </p><p>通过设置 <strong>代理</strong> 可以解决上述问题，设置代理通过参数<code>proxies</code>实现。</p><h3 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h3><p>简单的参数用于指定HTTP/HTTPS代理，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">"proxy_name"</span>: <span class="string">"http://host:port"</span>&#125; <span class="comment"># 模板地址</span></span><br><span class="line">response = requests.get(url, proxies = proxies)</span><br></pre></td></tr></table></figure><p>HTTP代理需要身份验证时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">"proxy_name"</span>: <span class="string">"http://user:passwd@host:port"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h3><p>安装socks库：<code>pip install requests[socks]</code></p><p>设置代理：<code>proxies = {&#39;http&#39;: &#39;socks5://user:passwd@host:port&#39;}</code></p><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p> 在本机网络状况不好或者服务器网络响应太慢甚至无响应时，我们可能会等待特别久的时间才可能收到响应，甚至到最后收不到响应而报错。为了防止服务器不能及时响应，应该设置一个超时时间，即超过了这个时间还没有得到响应，那就报错。这需要用到<code>timeout</code>参数。</p><p>这个时间的计算是发出请求到服务器返回响应的时间。 </p><p>请求时间分为两部分：连接（connect）和读取（read）。因此<code>timeout</code>参数的值可以是标量，也可以是元组。</p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>在访问网站时我们可能需要提供用户名和密码才能继续访问。</p><h3 id="HTTP认证"><a href="#HTTP认证" class="headerlink" title="HTTP认证"></a>HTTP认证</h3><p>requests自带身份认证模块<code>requests.auth.HHTPBasicAuth</code>。</p><p>带身份认证的请求通过参数<code>auth</code>实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"><span class="comment">##1.完整形式</span></span><br><span class="line">response = requests.get(url, auth=HTTPBasicAuth(<span class="string">'user'</span>, <span class="string">'passwd'</span>))</span><br><span class="line"><span class="comment">##2.简写形式</span></span><br><span class="line">response = requests.get(url, auth=(<span class="string">'user'</span>, <span class="string">'passwd'</span>))</span><br></pre></td></tr></table></figure><h3 id="OAuth认证"><a href="#OAuth认证" class="headerlink" title="OAuth认证"></a>OAuth认证</h3><p>安装第三方包：<code>pip install requests_oauthlib</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_oauthlib <span class="keyword">import</span> OAuth1</span><br><span class="line">auth = OAuth1(<span class="string">'app_key'</span>, <span class="string">'app_secret'</span>, <span class="string">'user_oauth_token'</span>, <span class="string">'user_oauth_token_secret'</span>)</span><br><span class="line">response = requests.get(url, auth = auth)</span><br></pre></td></tr></table></figure><h2 id="对请求进行抽象"><a href="#对请求进行抽象" class="headerlink" title="对请求进行抽象"></a>对请求进行抽象</h2><p>将 <strong>请求</strong> 抽象为 <strong>Requests类</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br></pre></td></tr></table></figure><p>初始化<code>Request</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'...'</span></span><br><span class="line">data = <span class="string">'&#123;...&#125;'</span></span><br><span class="line">headers = <span class="string">'&#123;...&#125;'</span></span><br><span class="line">request = Request(<span class="string">'POST'</span>, url, data = data, headers = headers)</span><br></pre></td></tr></table></figure><p>转换<code>request</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session = Session()</span><br><span class="line">prepared_request = session.prepare_request(request)</span><br><span class="line">response = session.send(prepared_request) <span class="comment"># not post or get</span></span><br></pre></td></tr></table></figure><p>将 <strong>请求</strong> 独立成本地的对象，需要的时候才在 <strong>会话</strong> 中获取结果。</p><p>这在队列调度中十分有效。</p><hr><ol><li>使用chrome可以通过访问 <code>chrome://version</code> 查询到<strong>用户代理</strong>信息。<br> <img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/01.png" alt=""></li><li>本文参考：<a href="https://cuiqingcai.com/5514.html" target="_blank" rel="noopener">https://cuiqingcai.com/5514.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/requests.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;urllib&lt;/strong&gt;是基本库，功能实现尚且比较复杂。&lt;strong&gt;requests&lt;/strong&gt;库更加友好、高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;requests&lt;/strong&gt;能更加简单的实现Cookies、登录验证和代理设置等额外操作。&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="爬虫" scheme="http://chenyin.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://chenyin.top/tags/python/"/>
    
      <category term="requests" scheme="http://chenyin.top/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>请求库1 - urllib</title>
    <link href="http://chenyin.top/spider/20191127-ae0b.html"/>
    <id>http://chenyin.top/spider/20191127-ae0b.html</id>
    <published>2019-11-27T08:09:28.000Z</published>
    <updated>2019-11-28T06:13:50.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/urllib.jpg" alt="urllib"></p><a id="more"></a><p><strong>urllib库</strong>是Python内置的HTTP请求库，包含4个模块：</p><ul><li><code>request</code>：用来模拟发送请求的基本HTTP请求模块</li><li><code>error</code>：此模块定义了请求过程中可能出现的<strong>异常</strong>，高效的爬虫需要捕获并处理这些可能出现的异常以防止程序意外终止</li><li><code>parse</code>：处理URL的工具</li><li><code>robotparser</code>：<strong>不常用</strong>，识别网站的robots.txt文件，判定网站是否可爬</li></ul><h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="request-urlopen"><a href="#request-urlopen" class="headerlink" title="request.urlopen"></a>request.urlopen</h2><p><code>urllib.request</code>模块可以模拟浏览器发送请求，提供了最基本的HTTP请求方法。</p><p>向服务器发送一个请求并获得<strong>响应</strong>（Response）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = urllib.request.urlopen(<span class="string">"https://www.python.org"</span>)</span><br></pre></td></tr></table></figure></p><p>取得的<strong>响应</strong>是一个<code>http.client.HTTPResponse</code>对象，它包含了与请求结果相关的各种属性和方法：</p><ul><li><strong>超文本解码</strong>：<code>response.read().decode(&#39;utf-8&#39;)</code></li><li><strong>请求状态码</strong>：<code>response.status</code>，200表示请求成功</li><li><strong>头部信息</strong>：<code>response.getheaders()</code>，<strong>元组列表</strong>形式</li><li><strong>某项头部信息</strong>：<code>response.getheader(&#39;Server&#39;)</code>，响应头中的Server值。例如如果Server值为”nginx”就代表服务器是由Nginx搭建的</li></ul><p><code>urllib.request.urlopen()</code>的API如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlopen(url, data=<span class="keyword">None</span>, [timeout, ]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>除了给定基本的URL之外，还可以传递其它数据：</p><ul><li><p><strong>data参数</strong>：可选，用于构造<strong>POST</strong>请求。<strong>data</strong>必须是<strong>bytes</strong>类型/bytes类型的可迭代对象/文件对象，不能是str类型。下面这种方式可以构造一个有效的<strong>data</strong>参数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">args = &#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125; <span class="comment"># dict</span></span><br><span class="line">args = urllib.parse.urlencode(args) <span class="comment"># str: Unicode</span></span><br><span class="line">data = bytes(args, encoding=<span class="string">'utf-8'</span>) <span class="comment"># bytes: UTF-8</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line"><span class="comment"># response.getheader('Content-Type') =&gt; application/json</span></span><br><span class="line"><span class="comment"># response.read().decode('utf-8')是一个json字符串</span></span><br><span class="line"><span class="comment"># 我们构造的data参数存储在"form"字段中</span></span><br><span class="line"><span class="comment"># 表示我们提交的是表单请求</span></span><br></pre></td></tr></table></figure></li><li><p><strong>timeout参数</strong>：可选，超时时间，单位为<strong>秒</strong>。超时未响应的程序会抛出<code>urllib.error.URLError</code>错误（其实叫<strong>异常</strong>是不是更好~）</p></li><li><strong>context参数</strong>：可选，用来指定SSL设置，必须是<code>ssl.SSLContext</code>类型</li><li><strong>cafile参数</strong>：可选，CA证书名称，HTTPS请求需要</li><li><strong>capath参数</strong>：可选，CA证书路径，HTTPS请求需要</li></ul><h2 id="request-Request"><a href="#request-Request" class="headerlink" title="request.Request"></a>request.Request</h2><p><code>urlopen</code>只能实现最基本的请求发起，参数过于简单，不能加入<strong>headers</strong>等信息。构建完整的请求可以使用<strong>Request</strong>类。我们通过各种丰富的参数实例化<strong>Request</strong>类，然后再调用<code>urlopen</code>进行请求：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request = urllib.request.Request(<span class="string">'https://python.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">html = response.read().decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p><p><code>urllib.request.Request</code>对象的构造方法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span><span class="params">(url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</span></span></span><br></pre></td></tr></table></figure></p><ul><li><strong>data</strong>：<strong>bytes</strong>类型，同<code>urlopen</code>中的<code>data</code>参数相似</li><li><strong>headers</strong>：<strong>dict</strong>类型，请求头；或者通过<code>.add_header()</code>方法添加。常用的<strong>请求头</strong>为：<code>{&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;}</code></li><li><strong>origin_req_host</strong>：请求方的host地址（ip地址）</li><li><strong>unverifiable</strong>：是否是无法验证的请求，默认为<code>False</code>，表示用胡可以获取请求的结果</li><li><strong>method</strong>：请求的方法（GET/POST/PUT/…）</li></ul><p>一个使用<code>Request</code>对象获取请求的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">data_dict = &#123;<span class="string">'name'</span>: <span class="string">'Germey'</span>&#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(data_dict), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url, data = data, headers = headers, method = <span class="string">'POST'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="request-Handler"><a href="#request-Handler" class="headerlink" title="request.Handler"></a>request.Handler</h2><p><code>urlopen</code>只能进行最基础的请求，<code>Request</code>类实现了在请求中添加<strong>请求头</strong>，但它们都不能解决Cookies处理和代理设置等更加高级的问题，此时就轮到<strong>Handler</strong>工具登场了。</p><p>基于<code>urllib.request.Handler</code>基类继承实现的高级<strong>Handler</strong>主要有：</p><ul><li><code>HTTPDefaultErrorHandler</code>：处理HTTP响应错误</li><li><code>HTTPRedirectHandler</code>：处理重定向</li><li><code>HTTPCookieProcessor</code>：处理Cookies</li><li><code>ProxyHandler</code>：设置代理</li><li><code>HTTPPasswordMgr</code>：管理密码</li><li><code>HTTPBasicAuthHandler</code>：管理认证</li><li><a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler" target="_blank" rel="noopener">其它的<code>Handler</code>类</a></li></ul><h2 id="request-OpenerDirector"><a href="#request-OpenerDirector" class="headerlink" title="request.OpenerDirector"></a>request.OpenerDirector</h2><p>在之前的例子中，<strong>urllib</strong>通过<code>urlopen</code>函数为我们提供了一个隐藏的<code>OpenerDirector</code>对象（或者叫<code>Opener</code>）。</p><p><code>Opener</code>类相比于<code>urlopen</code>函数和<code>Request</code>类能实现更多的功能，它是更加底层的工具。</p><p><code>Opener</code>对象通过<code>Handler</code>来构建。</p><p><code>opener.addheaders = [(&#39;user-Agent&#39;, &#39;...)]</code>可设置请求头</p><hr><blockquote><p><a href="https://cuiqingcai.com/5500.html" target="_blank" rel="noopener">[Python3网络爬虫开发实战] 3.1.1-发送请求</a></p></blockquote><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>合理的异常处理使得程序更加稳健。</p><p><code>urllib.request</code>产生的<strong>异常</strong>由<code>urllib.error</code>模块处理。</p><h2 id="URLError-base"><a href="#URLError-base" class="headerlink" title="URLError (base)"></a>URLError (base)</h2><p><code>urllib.error.URLError</code>是<code>urllib.error</code>模块中的<strong>基类</strong>，下面提到的所有异常都是继承自<code>URLError</code>。</p><p>所有的<code>urllib.request</code>产生的异常都可以通过<code>URLError</code>进行捕获，如果记不住其它更精细的异常类的话用这个准没错。</p><p><code>URLError</code>异常有个很常用的属性叫做<code>reason</code>，帮助我们快速判断出错原因。</p><p><code>reason</code>描述了错误的原因，但它不一定是字符串，也可能是个对象。例如超时请求会返回一个<code>socket.timeout</code>对象，因此使用异常的<code>reason</code>的值时最好进行类型检查。</p><h2 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h2><p>处理HTTP请求错误，常用的三个属性：</p><ul><li><code>code</code>：状态码</li><li><code>reason</code>：错误原因</li><li><code>headers</code>：请求头</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><hr><blockquote><p><a href="https://cuiqingcai.com/5505.html" target="_blank" rel="noopener">[Python3网络爬虫开发实战] 3.1.2-处理异常</a></p></blockquote><h1 id="URL处理"><a href="#URL处理" class="headerlink" title="URL处理"></a>URL处理</h1><p><code>urllib.parse</code>模块用来处理URL（部分），支持多种协议。</p><p>常用方法如下：</p><ul><li><strong>urlparse</strong>: 将完整的URL字符串拆分为一个六元素元组。<br>URL的标准格式为：<code>scheme://netloc/path;parameters?query#fragment</code></li><li><strong>urlunparse</strong>: 将一个长度为6的可迭代对象（元组、列表等）转化为一个完整的URL字符串</li><li><strong>urlsplit</strong>: 和<code>urlparse()</code>十分相似，只是把<code>params</code>部分合并到了<code>path</code>中</li><li><strong>urlunsplit</strong>: 和<code>urlunparse()</code>十分相似，处理对象为5元素的可迭代对象</li><li><strong>urljoin</strong>: 只能填补、合并</li><li><strong>urlencode</strong>：将<strong>参数字典</strong>序列化为<strong>GET请求</strong>的参数字符串</li><li><strong>parse_qs</strong>：功能与<code>urlencode</code>相反，将参数字符串转化为字典</li><li><strong>parse_qsl</strong>：功能与<code>urlencode</code>相反，将参数字符串转化为元组列表</li><li><strong>quote</strong>：对字符串进行URL编码，例如中文会被转化为编码</li><li><strong>unquote</strong>：对编码的字符串进行URL解码，例如中文编码被解码回中文</li><li>其它</li></ul><h1 id="分析Robots协议"><a href="#分析Robots协议" class="headerlink" title="分析Robots协议"></a>分析Robots协议</h1><p><strong>Robots协议</strong>也称作<strong>爬虫协议</strong>、<strong>机器人协议</strong>，它的全名叫作<strong>网络爬虫排除标准</strong>（Robots Exclusion Protocol），用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。</p><p>它通常是一个叫作<u>robots.txt</u>的文本文件，一般放在网站的根目录下。当搜索爬虫访问一个站点时，它首先会检查这个站点根目录下是否存在robots.txt文件，如果存在，搜索爬虫会根据其中定义的爬取范围来爬取。如果没有找到这个文件，搜索爬虫便会访问所有可直接访问的页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/urllib.jpg&quot; alt=&quot;urllib&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="爬虫" scheme="http://chenyin.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="http://chenyin.top/tags/urllib/"/>
    
      <category term="python" scheme="http://chenyin.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>asyncio与异步协程爬虫</title>
    <link href="http://chenyin.top/spider/20191126-af0c.html"/>
    <id>http://chenyin.top/spider/20191126-af0c.html</id>
    <published>2019-11-26T07:42:41.000Z</published>
    <updated>2019-11-26T09:30:33.485Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/async.jpg" alt="async"></p><a id="more"></a><h1 id="关于异步协程"><a href="#关于异步协程" class="headerlink" title="关于异步协程"></a>关于异步协程</h1><p><strong>异步协程</strong>往往对IO密集型任务非常有效，如网络IO、磁盘IO，典型的应用场景是提升爬虫效率。</p><p>不适用任何并行或者异步的爬虫往往因为服务器响应过慢而将大量的时间花费在IO等待上。</p><p>当需要获取多个url的内容时，怎么url内容获取的累计时间？这里主要有两个思路。一是多进程并行，这种方法的效率主要取决于机器CPU的核数，一般情况下CPU核数有限，而且单个CPU在等待响应的过程中仍然处于空闲状态。二是<strong>异步协程</strong>，其设计思想为：在执行某个子程序如果遇到阻塞就将该子程序挂起转而执行其它的子程序到其完成或者挂起为止，这样在多个子程序间进行切换，从而充分利用处理器。在爬虫设计中，多个url的内容获取实际上是相互独立的，当程序处理一个url遇到阻塞时可以将其挂起等待服务器响应转而处理其它的url，通过队列访问的方式不断循环处理任务。当被挂起的子程序处理完成后自动添加到任务队列末尾等待轮执；如果所有任务都处于挂起状态则程序进入阻塞状态直到新的可执行任务出现。</p><p>Python3.5以后添加了<strong>async/await</strong>关键字用以实现<strong>异步协程</strong>，使用它们需要导入包<strong>asyncio</strong>:</p><ul><li><strong>async</strong>：定义一个<strong>异步函数</strong>（协程）或者异步生成器</li><li><strong>await</strong>：当子程序阻塞时挂起子程序（任务）</li></ul><p>一些基本概念：</p><ul><li><strong>阻塞</strong>：程序在等待某个操作完成而不能去干别的事情，即程序处于挂起状态，称该程序处于 <strong>阻塞状态</strong>。常见的阻塞形式有：等待网络I/O，等待磁盘I/O，等待用户输入，CPU切换上下文等；</li><li><strong>非阻塞</strong>：非阻塞是相对于阻塞而言的：如果程序包含多个独立的子程序，当其中一个子程序完成或者阻塞时可以转而执行其它的子程序，从而避免因为毫无作为的等待而造成的效率低下；</li><li><strong>同步</strong>：为了完成某个任务，不同程序间需要相互协商、相互影响，则这些程序是同步的；同步通常通过“锁”来实现</li><li><strong>异步</strong>：如果在完成某个任务时，程序之间不需要相互通信而各自独立运行，则这些程序是异步的</li></ul><p>异步协程中的基本概念：</p><ul><li><p><strong>事件循环</strong>（event loop）：我们需要向系统申请一个<strong>事件循环对象</strong>运行我们自己的<strong>协程对象</strong>，事件循环帮助我们自动执行、挂起协程子程序。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop</span><br><span class="line"><span class="comment"># &lt;_WindowsSelectorEventLoop running=False closed=False debug=False&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>协程</strong>（Coroutine）：协程对象类型，需要被注册到<strong>事件循环</strong>中才能被循环调用，通过<strong>async</strong>关键字定义，直接调用不会被立即执行，而是返回一个<strong>协程对象</strong>。</p></li><li><p><strong>任务</strong>（Task）：任务是对<strong>协程对象</strong>的封装，包含了更多的信息。</p></li><li><p><strong>future</strong></p></li></ul><h1 id="异步协程爬虫"><a href="#异步协程爬虫" class="headerlink" title="异步协程爬虫"></a>异步协程爬虫</h1><p>下面以一个例子说明异步协程爬虫的基本语法。</p><h2 id="模拟慢速服务器"><a href="#模拟慢速服务器" class="headerlink" title="模拟慢速服务器"></a>模拟慢速服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(threaded=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>这里我们定义了一个 Flask 服务，主入口是 index() 方法，方法里面先调用了 sleep() 方法休眠 3 秒，然后接着再返回结果，也就是说，每次请求这个接口至少要耗时 3 秒，这样我们就模拟了一个慢速的服务接口。</p><p>注意这里服务启动的时候，run() 方法加了一个参数 threaded，这表明 Flask 启动了多线程模式，不然默认是只有一个线程的。如果不开启多线程模式，同一时刻遇到多个请求的时候，只能顺次处理，这样即使我们使用协程异步请求了这个服务，也只能一个一个排队等待，瓶颈就会出现在服务端。所以，多线程模式是有必要打开的。</p><p>启动之后，Flask 应该默认会在 127.0.0.1:5000 上运行，运行之后控制台输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Running on http:*//127.0.0.1:5000/ (Press CTRL+C to quit)*</span><br></pre></td></tr></table></figure><h2 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio <span class="comment"># 异步I/O</span></span><br><span class="line"><span class="keyword">import</span> aiohttp <span class="comment"># 实现了异步的网络通信工具，替换requests</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>, url)</span><br><span class="line">    result = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from %s Result: %s'</span>%(url, result))</span><br></pre></td></tr></table></figure><p><strong>asyncio</strong>中实现了定义和执行协程的关键字和方法，<strong>aiohttp</strong>中实现了支持异步操作的网络通信，<strong>requests</strong>不支持异步操作。</p><p>异步函数<code>request()</code>定义了一个协程，如果事件循环执行到本协程的<code>await get(url)</code>语句时遇到阻塞就会将此协程挂起转而执行任务队列中的其它任务。当本协程挂起时实际上是在等待<code>get(url)</code>的结果，<code>get(url)</code>本身也是一个协程，它返回一个<strong>可等待对象</strong>（Awaitable object）。</p><p><code>get(url)</code>同样是一个协程，如果事件循环执行到<code>await session.get(url)</code>时遇到阻塞，该任务被挂起等待服务器响应，当下次轮执此协程时会再次遇到<code>await response.text()</code>，如果这个子程序没有遇到执行阻塞，就不会挂起继续向下执行。</p><p>总结一下：</p><ul><li><code>async</code>定义协程，<code>await</code>当任务阻塞时挂起任务，<code>await</code>只能用于<code>async</code>定义的协程里面</li><li><code>await</code>关键字修饰的必须是<strong>可等待对象</strong>。<a href="https://www.python.org/dev/peps/pep-0492/#await-expression" target="_blank" rel="noopener">哪些是<strong>可等待对象</strong>？</a><ul><li>异步函数定义的原生协程对象</li><li>异步生成器</li><li>实现了<code>__await__()</code>方法的迭代器</li></ul></li></ul><h2 id="任务包装并注册到事件循环"><a href="#任务包装并注册到事件循环" class="headerlink" title="任务包装并注册到事件循环"></a>任务包装并注册到事件循环</h2><p>将<strong>协程对象</strong>包装为<strong>任务对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p>获取<strong>事件循环对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><p>将任务注册到事件循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 单个任务</span></span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多个任务</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure><p>获取运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = [task.result() <span class="keyword">for</span> task <span class="keyword">in</span> tasks]</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>非原创声明</strong>：本笔记非原创，主要内容参考博客 <a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">https://cuiqingcai.com/6160.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/async.jpg&quot; alt=&quot;async&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="爬虫" scheme="http://chenyin.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="协程" scheme="http://chenyin.top/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>决策树 - CART</title>
    <link href="http://chenyin.top/ml/20191122-edcd.html"/>
    <id>http://chenyin.top/ml/20191122-edcd.html</id>
    <published>2019-11-22T03:37:42.000Z</published>
    <updated>2019-11-26T09:24:56.712Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/cart.jpg" alt="CART"></p><a id="more"></a><p>Breiman等在1984年提出了 <strong>分类与回归树模型</strong>（CART, Classification and regression tree）。</p><p>CART能够输出随机变量$Y$的 <strong>条件概率分布</strong>。</p><p>CART的一个重要特点是假设决策树是二叉树，这意味着不论特征是连续型随机变量还是多个取值的离散型随机变量，都将被处理成二元变量，即需要确定一个 <strong>阈值</strong>。</p><h1 id="CART生成"><a href="#CART生成" class="headerlink" title="CART生成"></a>CART生成</h1><h2 id="生成回归树"><a href="#生成回归树" class="headerlink" title="生成回归树"></a>生成回归树</h2><p>给定训练数据集<br>$$<br>D = { (x_1, y_1),(x_2,y_2), \cdots, (x_N,y_N) }<br>$$<br>如果选定第$j$个特征和该特征的某个取值$s$，我们就能将所有样本的第$j$个特征的取值与$s$分别进行比较，从而将数据集$D$划分为两部分。对于这两个划分的子数据集$D_1$和$D_2$，我们再次执行上面的操作进行进一步的划分……</p><p>最终我们将数据集$D$划分成了$M$个子集，或者说将输入空间（特征空间）划分成了$M$个区域。对于划分的每一个子区域$R_m$（$m=1,2,\cdots,M$）我们可以通过某种方法求出这样一个值$c_m$，于是就可以定义 <strong>回归模型</strong><br>$$<br>f(x) = \sum_{m=1}^M c_m I(x \in R_m)<br>$$<br>其中$I(x \in R_m)$称为 <strong>指示函数</strong>，样本$x$只会属于子区域中的某一个，而不会同时被划分到多个子区域，因为互斥完备。</p><p>这里产生了两个问题：</p><ol><li>如何确定最优的$j$和$s$？</li><li>如何定义$c_m$？</li></ol><p>先看第二个问题：因为是回归模型，我们用 <strong>平方误差</strong> 来表示回归树对训练数据的预测误差<br>$$<br>\begin{split}<br>L(D) &amp;= \sum_{i=1}^N [y_i - f(x_i)]^2 \\<br>&amp;= \sum_{m=1}^M \sum_{x_k \in R_m} [y_k - f(x_k)]^2 \\<br>&amp;= \sum_{m=1}^M \sum_{x_k \in R_m} (y_k - c_m)^2<br>\end{split}<br>$$<br>若使$L(D)$最小，则使$\sum_{x_k \in R_m} (y_k - c_m)^2$最小，一阶导等于0极小，解得<br>$$<br>C_m = \frac1{|D_m|} \sum_{k=1}^{|D_m|} y_k = avg(y_k|x_k \in R_m)<br>$$<br>其中数据集$D$位于子空间$R_m$中的子数据集为$D_m$，$|D_m|$为数据集$D_m$中的样本总数。</p><p>综上所述，子空间$R_m$上的$c_m$的最优估计值$\hat{c}_m$是$R_m$上所有输入样本对应的$y$的均值。</p><p>再看第一个问题：怎么确定最优的$j$和$s$，亦即怎么对样本空间进行划分。</p><p>这里我们将第$j$个变量称为 <strong>切分变量</strong>（splitting variable），将该变量的取值$s$称为 <strong>切分点</strong>（splitting point），并进行如下划分：<br>$$<br>\begin{split}<br>R_1(j,s) &amp;= { x|x^{(j)} \le s } \\<br>R_2(j,s) &amp;= { x|x^{(j)} \gt s}<br>\end{split}<br>$$<br><strong>启发式</strong> 方法寻找最优的切分变量$j$和切分点$s$：遍历所有输入输入特征，固定$j$扫描可能的切分点$s$，计算<br>$$<br>Loss(j,s) = \sum_{x_i \in R_1(j,s)}(y_i-\bar{y_i})^2 + \sum_{x_i \in R_2(j,s)}(y_i-\bar{y_i})^2<br>$$<br>哪组$(j,s)$的$Loss$小就选谁。</p><p>迭代划分得到$M$个子区域。</p><h2 id="生成分类树"><a href="#生成分类树" class="headerlink" title="生成分类树"></a>生成分类树</h2><h3 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h3><p><strong>基尼指数</strong> 用来度量集合$D$的不确定性，基尼指数越大，集合$D$的不确定性越大，与<strong>熵</strong>类似。<br>$$<br>\text{Gini}(p) = \sum_{k=1}^K p_k(1-p_k) = 1 - \sum_{k=1}^K p_k^2<br>$$<br>二分类问题的基尼指数为 $2p(1-p)$</p><p>样本集合$D$的基尼指数为 $1-\sum_{k=1}^K (\frac{|D_k|}{|D|})^2$</p><p>依据某特征A是否取值为a可将数据集D分为两个子集$D_1$和$D_2$<br>$$<br>\begin{split}<br>D &amp;= D_1 + D_2 \\<br>D_1 &amp;= { (x,y) \in D | A(x) = a } \\<br>D_2 &amp;= { (x,y) \in D | A(x) \ne a }<br>\end{split}<br>$$<br>在特征A的条件下数据集D的基尼指数定义为<br>$$<br>\text{Gini}(D,A) = \frac{|D_1|}{|D|}\text{Gini}(D_1) + \frac{|D_2|}{|D|}\text{Gini}(D_2)<br>$$<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/14.jpg" alt=""></p><h3 id="CART生成-1"><a href="#CART生成-1" class="headerlink" title="CART生成"></a>CART生成</h3><p>遍历所有的可用的特征，遍历该特征所有可能的取值，分别计算基尼指数，取基尼指数最小的切分变量和切分点作为当前二分数据集的策略。</p><p>递归对数据集进行二分。</p><p>以下表为例说明基尼指数如何用于选择切分变量和切分点</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/11.jpg" alt=""></p><p>$$<br>\begin{split}<br>\text{Gini}(D,A=1) &amp;= \frac{5}{15}(2 \times \frac25 \times (1-\frac25)) + \frac{10}{15}(2 \times \frac7{10} \times (1 - \frac7{10})) \\<br>&amp;= 0.44 \\<br>\text{Gini}(D,A=2) &amp;= 0.48 \\<br>\text{Gini}(D,A=3) &amp;= 0.44<br>\end{split}<br>$$<br>$\text{Gini}(D,A=1)$或者$\text{Gini}(D,A=3)$都可以作为A的最优切分点</p><p>同理求得其它特征的最优切分点<br>$$<br>\begin{split}<br>\text{Gini}(D,B=1) &amp;= 0.32 \\<br>\text{Gini}(D,C=1) &amp;= 0.27 \\<br>\text{Gini}(D,E=3) &amp;= 0.32<br>\end{split}<br>$$<br>上面的四个切分点中，$\text{Gini}(D,C=1)$最小，所以选择特征C（有自己的房子）作为最优分类特征，C=1为最优切分点，将数据集D分为两个子集，同时根节点也产生了两个子节点。由于C=1的样本标签全部为1，则此节点为叶子节点，类别标记为1；接下来对另一个子节点进行寻找最优分类特征和最优切分点。</p><h1 id="CART剪枝"><a href="#CART剪枝" class="headerlink" title="CART剪枝"></a>CART剪枝</h1><p>CART剪枝算法是个很费解的东西，我尝试着通俗化地去描述它。</p><p>CART的剪枝同ID3/C4.5的剪枝算法有些许区别。ID3/C4.5的剪枝算法直接计算内部节点剪除前后决策树损失大小，CART剪枝算法多了一步：先从“完全生长”的整树$T_0$开始一个节点一个节点（内部节点）的剪除，直到剩下最后的根节点$T_n$，每剪一次就会得到一棵树，这样就得到了一个树的序列${T_0,T_1,\cdots,T_n}$，注意这里的$n$并不是指整树内部节点的多少，实际上由整树生成的子树非常多，这个$n$可能会很大，但是它始终是有限的；然后在 <strong>验证数据集</strong> 上分别进行测试，选择损失最小的树作为最终结果。</p><p>先来回顾一下决策树$T$的损失函数的定义，其中$C(T)$是对训练数据的预测误差，$|T|$是模型复杂度：<br>$$<br>C_\alpha(T) = C(T) + \alpha |T|,\ \alpha \ge 0<br>$$<br>在ID3/C4.5的剪枝算法中，$\alpha$作为超参需要预先设定，当我们预设$\alpha$的值后对整树进行剪枝，最后会得到一个整树的子树作为最终结果，这里$0&lt;\alpha&lt;+\infty$，特别地，当$\alpha=0$时，整树是最优解；当$\alpha=+\infty$时仅由根节点构成地单节点树是最优解，当然一般情况下$\alpha=0$或者$\alpha=+\infty$都不会是我们想要的结果。所以，当我们确定了$\alpha$的值时，我们就确定了整树的某一棵子树；换言之，一个$\alpha$值对应着一颗子树，而这棵子树就是这个$\alpha$条件下的最优解。</p><p>如果我更改$\alpha$的值就会得到不同的子树，那么哪一棵子树才是最好的呢？CART剪枝算法把$\alpha$视为一个参数而不是超参，在剪枝的过程中寻找最优的$\alpha$和这个$\alpha$对应的最优子树。$\alpha \in (0,+\infty)$表示$\alpha$有无穷多的取值，那这是不是意味着有无穷多的子树呢？显然不是的，因为整树的节点是有限的，所以整树的子树肯定是有限的。但是一个$\alpha$必定对应着一棵子树，这就表示很多个$\alpha$对应着相同的子树，换言之，一棵子树对应着很多个$\alpha$值，<strong>一棵子树对应了一个$\alpha$的区间</strong>。我们将$[0,+\infty]$区间分成$[\alpha_0,\alpha_1)$、$[\alpha_1,\alpha_2)$、…、$[\alpha_n,\alpha_{n+1})$，其中$\alpha_0=0$, $\alpha_{n+1}=+\infty$，每个区间$[\alpha_i,\alpha_{i+1})$的$\alpha$对应的最优子树都是$T_i$。于是乎，我们假设，如果我们可以求出每个子树$T_i$对应区间的左$\alpha$的值，我们就能将子树$T_i$与$\alpha$区间一一对应，通过求解最优子树来求解最优$\alpha$。</p><p>那么问题来了，怎么通过子树求区间左边界的$\alpha$呢？</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/15.jpg" alt=""></p><p>我们通过比较剪除节点$t$前后损失的变化来决定是否剪除节点$t$。我们观察预测误差$C_\alpha(T)= \sum_{k=1}^{|T|} N_k H_k(T)$：独立计算每个叶子节点$N_kH_k(T)$再求加和，这意味着剪除节点$t$整个决策树的损失变化就等价于上图中粉色区域子树剪除节点$t$损失的变化。</p><p>对于整树$T_0$的任意一个内部节点$t$，假设剪除此节点得到的子树为$T_k$，$k \in {1,\cdots,n}$。</p><p>以$t$为根节点的单节点树的损失函数为<br>$$<br>C_\alpha(t) = C(t) + \alpha |t| = C(t) + \alpha<br>$$<br>以$t$为根节点的多节点子树$T_t$的损失为<br>$$<br>C_\alpha(T_t) = C(T_t) + \alpha |T_t|<br>$$<br>上面两个式子中的$C(t)$和$C(T_t)$都是可求的。</p><p>当$\alpha=0$或者$\alpha$充分小时，预测误差占损失函数的大头，单节点树的损失肯定比多节点子树高，$C(t)&gt;C_\alpha(T_t)$；当$\alpha$充分大时，模型复杂度占损失函数的大头，单节点树的损失肯定比多节点树低，$C(t)&lt;C_\alpha(T_t)$。如果单节点损失较大，说明还是保留$t$的叶子节点比较好，因为损失比较小，此时不剪枝；如果单节点树的损失较小，说明应该剪除内部节点$t$。</p><p>那么应该存在这样一个不大不小的$\alpha$，使得单节点树的损失刚好等于多节点树的损失，即$C_\alpha(t)=C_\alpha(T_t)$，解得<br>$$<br>\alpha’ = \frac{C_t - C(T_t)}{|T_t|-1}<br>$$<br>如果$\alpha$的值比这个$\alpha’$小，单节点树损失更大，意味着不能剪$t$；当$\alpha$的值比这个$\alpha ‘$大，单节点树损失更小，意味着应该剪除$t$。根据前面的叙述，子树$T_k$对应的$\alpha$区间为$[\alpha_k, \alpha_{k+1})$，子树$T_k$存在的前体就是相应内部节点被无情的剪除了，所以$\alpha_k = \alpha’$。</p><p>所以，我们对整树$T_0$的所有内部节点求其$\frac{C_t - C(T_t)}{|T_t|-1}$，按$\alpha$从小到大依次剪除对应的节点得到相应的子树序列${T_0,T_1,\cdots,T_n}$。</p><p>至此，我们已经拿到了按照$\alpha$从小到大排列的子树序列，接下来在 <strong>验证数据集</strong> 上进行验证，取损失最小的子树即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/cart.jpg&quot; alt=&quot;CART&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ml" scheme="http://chenyin.top/categories/ml/"/>
    
    
      <category term="决策树" scheme="http://chenyin.top/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>从生成器到协程</title>
    <link href="http://chenyin.top/spider/20191120-1aaa.html"/>
    <id>http://chenyin.top/spider/20191120-1aaa.html</id>
    <published>2019-11-20T04:30:56.000Z</published>
    <updated>2019-11-26T09:30:59.890Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_1.png" alt=""></p><a id="more"></a><h1 id="可迭代对象和迭代器"><a href="#可迭代对象和迭代器" class="headerlink" title="可迭代对象和迭代器"></a>可迭代对象和迭代器</h1><p><strong>可迭代对象</strong>（Iterable）指的是能够使用<strong>for循环</strong>进行遍历的对象，如字符串、数组、迭代器、生成器等。</p><p><strong>可迭代对象</strong>实现了<code>__iter__()</code>方法。</p><p><strong>迭代器</strong>（Iterator）是一种特殊的<strong>可迭代对象</strong>，实现了<code>__next__()</code>方法。</p><p>判断一个对象<code>obj</code>是否是<strong>可迭代对象/迭代器</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"></span><br><span class="line">isinstance(obj, Iterable)</span><br><span class="line">isinstance(obj, Iterator)</span><br></pre></td></tr></table></figure></p><p><code>iter()</code>函数称之为<strong>迭代器工厂</strong>函数，它能将一个<strong>可迭代对象</strong>转化为<strong>迭代器</strong>，通过给非迭代器的可迭代对象添加<code>__next__()</code>方法，实现工厂式的加工和包装功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(isinstance(x, Iterable)) <span class="comment"># True</span></span><br><span class="line">print(isinstance(x, Iterator)) <span class="comment"># False</span></span><br><span class="line">x_iter = iter(x)</span><br><span class="line">print(isinstance(x_iter, Iterable)) <span class="comment"># True</span></span><br><span class="line">print(isinstance(x_iter, Iterator)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p><strong>生成器</strong>（Generator）本质上还是<strong>迭代器</strong>，因此<strong>迭代器</strong>的所有特性都适合于<strong>生成器</strong>。他们的区别在于实现方式不同：实现一个<strong>迭代器</strong>往往需要定义一个<strong>类</strong>并且实现其<code>__iter__()</code>方法和<code>__next__()</code>方法；实现一个生成器只需要在函数中使用<code>yield</code>关键字。后者的实现方式更加简洁，性能与迭代器一样高效。</p><p>python中的<strong>生成器</strong>有两种基本实现方式，一种是通过<code>yield</code>关键字实现，一种叫做<strong>生成器表达式</strong>。<strong>生成器表达式</strong>与<strong>列表推导式</strong>十分相似，只需把<code>[...]</code>换成<code>(...)</code>即可。在大数据的迭代过程中，<strong>列表推导式</strong>将会耗费大量的时间和空间，此时选择<strong>生成器表达式</strong>性能将会得到显著的提升。只是简简单单地改变一个括号，程序运行的速度就能肉眼可见的变快！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Generator</span><br><span class="line"></span><br><span class="line">l = [x**<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>)] <span class="comment"># 列表推导式</span></span><br><span class="line">isinstance(l, list) <span class="comment"># True</span></span><br><span class="line">g = (x**<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>)) <span class="comment"># 生成器表达式</span></span><br><span class="line">isinstance(g, Generator) <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><p>另外一种实现<strong>生成器</strong>的方法是在函数中使用<code>yield</code>关键字。当函数执行到<code>yield</code>时会返回<code>yield</code>指定的值，同时将函数挂起，这点同<code>return</code>不一样：<code>return</code>返回指定的值时意味着函数调用结束。当再次调用此函数时，不会从头执行，而是会接着上次挂起时的状态接着执行。</p><p><code>yield</code>关键字不仅能返回数据，也能从外界接收数据，接收数据通过<code>.send(...)</code>方法实现。<code>next()</code>函数和<code>.send()</code>方法都能够激活生成器函数继续运行直到下一次遇到<code>yield</code>挂起，不同的是，<code>.send()</code>方法还能够向生成器函数传递值。看下面这个生硬的例子：<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_2.png" alt=""></p><p>使用<code>next(g)</code>使生成器运行至<code>yield</code>处，函数等待外界传值给局部变量<code>x</code>并挂起，此时再使用<code>g.send(3)</code>将3传递给<code>x</code>，函数被激活继续向下执行，计算<code>y</code>等于8，此时遇到第二个<code>yield</code>，函数返回<code>y</code>的值并挂起，所以<code>g.send(3)</code>的返回结果为8。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_3.png" alt=""></p><p>如果再次执行<code>g.send(4)</code>会发现返回结果为空！这是因为：<code>.send()</code>方法激活可生成器函数并从上次挂起的地方继续执行（<code>yield y</code>），执行至<code>x = yield</code>等待外界传值，也就是说本次<code>.send</code>发送的消息，生成器函数内部没有变量接收，相当于一次无效的消息发送，故而没有返回值。如果再次执行<code>g.send(4)</code>，返回结果显示为16，这与上述<code>g.send(3)</code>的情景相似。<br><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_3.png" alt=""></p><p>通过<code>yield</code>关键字和<code>.send</code>方法，用户可以随时中断一个函数执行转而执行另一个函数，相当于手动从一个子程序的执行切换到了另一个子程序的执行。在这种子程序的切换过程中没有涉及到<strong>线程</strong>的切换，我们将一个子程序和它被执行以及被挂起时的状态称之为一个<strong>协程</strong>（Coroutine）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/1aaa_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spider" scheme="http://chenyin.top/categories/spider/"/>
    
    
      <category term="迭代器与生成器" scheme="http://chenyin.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="异步协程" scheme="http://chenyin.top/tags/%E5%BC%82%E6%AD%A5%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开启搬瓦工VPS的IPv6服务</title>
    <link href="http://chenyin.top/it/20191119-a377.html"/>
    <id>http://chenyin.top/it/20191119-a377.html</id>
    <published>2019-11-19T05:18:50.000Z</published>
    <updated>2019-11-22T07:08:00.254Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/ipv6.png" alt=""></p><a id="more"></a><p>搬瓦工上能买到带IPv6的服务器。此服务器位于LOS ANGELES，IPv4地址是xxx.xxx.xxx.xxx。如下</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/06.jpg" alt=""></p><p>注册并登陆<a href="https://www.tunnelbroker.net" target="_blank" rel="noopener">tunnelbroker</a>，如下</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/07.jpg" alt=""></p><p>点击<strong>Create Regular Tunnel</strong>，在2处输入服务器的IPv4地址，确定后自动检查该IP是否支持IPv6。</p><p>如果3处变为绿色并显示”IP is apotential tunnel endpoint”表示该IP支持IPv6服务。</p><p>在4处选择服务器所在的地区。</p><p>点击页面底部的<strong>确认</strong>。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/08.jpg" alt=""></p><p>点击<strong>Example Configurations</strong>，在1处选择服务器的操作系统（本服务器操作系统是Ubuntu16.04，选择”Linux-net-tools”），确认后在2处会显示相关命令。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/09.jpg" alt=""></p><p>打开服务器终端，依次执行上述命令。</p><p><img src="https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/10.jpg" alt=""></p><p>输入<code>ping6 google.com</code>检查IPv6是否可用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://barwe-blog.oss-cn-shenzhen.aliyuncs.com/img/19/11/ipv6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="it" scheme="http://chenyin.top/categories/it/"/>
    
    
  </entry>
  
</feed>
